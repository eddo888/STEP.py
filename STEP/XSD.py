# ./binding.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:442a1f87df33708349cf81bf3be1cf6b91abb565
# Generated 2024-08-20 13:59:15.210313 by PyXB version 1.2.6 using Python 3.9.16.final.0
# Namespace http://www.stibosystems.com/step

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:90aee10a-5ea8-11ef-bc7e-00e04c680993')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.stibosystems.com/step', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: [anonymous]
class STD_ANON (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 145, 16)
    _Documentation = None
STD_ANON._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON, enum_prefix=None)
STD_ANON.CLEAR_ENTIRE_TERMSLISTS = STD_ANON._CF_enumeration.addEnumeration(unicode_value='CLEAR_ENTIRE_TERMSLISTS', tag='CLEAR_ENTIRE_TERMSLISTS')
STD_ANON.CLEAR_ONLY_FOR_IMPORTED_PRODUCTS = STD_ANON._CF_enumeration.addEnumeration(unicode_value='CLEAR_ONLY_FOR_IMPORTED_PRODUCTS', tag='CLEAR_ONLY_FOR_IMPORTED_PRODUCTS')
STD_ANON._InitializeFacetMap(STD_ANON._CF_enumeration)
_module_typeBindings.STD_ANON = STD_ANON

# Atomic simple type: {http://www.stibosystems.com/step}ConfigurationType
class ConfigurationType (pyxb.binding.datatypes.base64Binary):

    """
                A configuration is not human readable, as it has been zipped and encoded in BASE64. The content of the
                configuration is a contract between the exporter and the importer, and must not be altered in between.
            """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ConfigurationType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 251, 4)
    _Documentation = '\n                A configuration is not human readable, as it has been zipped and encoded in BASE64. The content of the\n                configuration is a contract between the exporter and the importer, and must not be altered in between.\n            '
ConfigurationType._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'ConfigurationType', ConfigurationType)
_module_typeBindings.ConfigurationType = ConfigurationType

# Atomic simple type: {http://www.stibosystems.com/step}EntityRevisabilityType
class EntityRevisabilityType (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EntityRevisabilityType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 260, 4)
    _Documentation = None
EntityRevisabilityType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=EntityRevisabilityType, enum_prefix=None)
EntityRevisabilityType.Global = EntityRevisabilityType._CF_enumeration.addEnumeration(unicode_value='Global', tag='Global')
EntityRevisabilityType.Workspace = EntityRevisabilityType._CF_enumeration.addEnumeration(unicode_value='Workspace', tag='Workspace')
EntityRevisabilityType._InitializeFacetMap(EntityRevisabilityType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'EntityRevisabilityType', EntityRevisabilityType)
_module_typeBindings.EntityRevisabilityType = EntityRevisabilityType

# Atomic simple type: {http://www.stibosystems.com/step}GUISetupAdvancedType
class GUISetupAdvancedType (pyxb.binding.datatypes.string):

    """
                Puts the GUI menu item in the advanced sub menu.
            """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GUISetupAdvancedType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 266, 4)
    _Documentation = '\n                Puts the GUI menu item in the advanced sub menu.\n            '
GUISetupAdvancedType._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'GUISetupAdvancedType', GUISetupAdvancedType)
_module_typeBindings.GUISetupAdvancedType = GUISetupAdvancedType

# Atomic simple type: {http://www.stibosystems.com/step}GUISetupDisabledType
class GUISetupDisabledType (pyxb.binding.datatypes.string):

    """
                Disables a menu item.
            """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GUISetupDisabledType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 274, 4)
    _Documentation = '\n                Disables a menu item.\n            '
GUISetupDisabledType._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'GUISetupDisabledType', GUISetupDisabledType)
_module_typeBindings.GUISetupDisabledType = GUISetupDisabledType

# Atomic simple type: {http://www.stibosystems.com/step}GUISetupEnabledType
class GUISetupEnabledType (pyxb.binding.datatypes.string):

    """
                Enables a menu item.
            """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GUISetupEnabledType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 282, 4)
    _Documentation = '\n                Enables a menu item.\n            '
GUISetupEnabledType._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'GUISetupEnabledType', GUISetupEnabledType)
_module_typeBindings.GUISetupEnabledType = GUISetupEnabledType

# Atomic simple type: {http://www.stibosystems.com/step}GUITopType
class GUITopType (pyxb.binding.datatypes.string):

    """
                A step URL, restricting the user to a top tree node in the Tree editor.
            """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GUITopType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 290, 4)
    _Documentation = '\n                A step URL, restricting the user to a top tree node in the Tree editor.\n            '
GUITopType._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'GUITopType', GUITopType)
_module_typeBindings.GUITopType = GUITopType

# Atomic simple type: {http://www.stibosystems.com/step}NonEmptyStringType
class NonEmptyStringType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NonEmptyStringType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 298, 4)
    _Documentation = None
NonEmptyStringType._CF_pattern = pyxb.binding.facets.CF_pattern()
NonEmptyStringType._CF_pattern.addPattern(pattern='.+')
NonEmptyStringType._InitializeFacetMap(NonEmptyStringType._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'NonEmptyStringType', NonEmptyStringType)
_module_typeBindings.NonEmptyStringType = NonEmptyStringType

# Atomic simple type: {http://www.stibosystems.com/step}ParentChildRelationType
class ParentChildRelationType (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ParentChildRelationType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 303, 4)
    _Documentation = None
ParentChildRelationType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ParentChildRelationType, enum_prefix=None)
ParentChildRelationType.NONE = ParentChildRelationType._CF_enumeration.addEnumeration(unicode_value='NONE', tag='NONE')
ParentChildRelationType.TARGETASCHILD = ParentChildRelationType._CF_enumeration.addEnumeration(unicode_value='TARGETASCHILD', tag='TARGETASCHILD')
ParentChildRelationType.SOURCEASCHILD = ParentChildRelationType._CF_enumeration.addEnumeration(unicode_value='SOURCEASCHILD', tag='SOURCEASCHILD')
ParentChildRelationType._InitializeFacetMap(ParentChildRelationType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ParentChildRelationType', ParentChildRelationType)
_module_typeBindings.ParentChildRelationType = ParentChildRelationType

# Atomic simple type: {http://www.stibosystems.com/step}ReferenceTargetLockPolicyType
class ReferenceTargetLockPolicyType (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReferenceTargetLockPolicyType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 310, 4)
    _Documentation = None
ReferenceTargetLockPolicyType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ReferenceTargetLockPolicyType, enum_prefix=None)
ReferenceTargetLockPolicyType.Strict = ReferenceTargetLockPolicyType._CF_enumeration.addEnumeration(unicode_value='Strict', tag='Strict')
ReferenceTargetLockPolicyType.Relaxed = ReferenceTargetLockPolicyType._CF_enumeration.addEnumeration(unicode_value='Relaxed', tag='Relaxed')
ReferenceTargetLockPolicyType._InitializeFacetMap(ReferenceTargetLockPolicyType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ReferenceTargetLockPolicyType', ReferenceTargetLockPolicyType)
_module_typeBindings.ReferenceTargetLockPolicyType = ReferenceTargetLockPolicyType

# Atomic simple type: {http://www.stibosystems.com/step}RuleBasedLayoutType
class RuleBasedLayoutType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RuleBasedLayoutType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 316, 4)
    _Documentation = None
RuleBasedLayoutType._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'RuleBasedLayoutType', RuleBasedLayoutType)
_module_typeBindings.RuleBasedLayoutType = RuleBasedLayoutType

# Atomic simple type: {http://www.stibosystems.com/step}StepID
class StepID (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 319, 4)
    _Documentation = None
StepID._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(40))
StepID._InitializeFacetMap(StepID._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'StepID', StepID)
_module_typeBindings.StepID = StepID

# Atomic simple type: {http://www.stibosystems.com/step}LOVValueID
class LOVValueID (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LOVValueID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 324, 4)
    _Documentation = None
LOVValueID._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100))
LOVValueID._InitializeFacetMap(LOVValueID._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'LOVValueID', LOVValueID)
_module_typeBindings.LOVValueID = LOVValueID

# Atomic simple type: {http://www.stibosystems.com/step}TagID
class TagID (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TagID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 367, 4)
    _Documentation = None
TagID._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(2000))
TagID._InitializeFacetMap(TagID._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'TagID', TagID)
_module_typeBindings.TagID = TagID

# Atomic simple type: {http://www.stibosystems.com/step}TwoDecimalValueType
class TwoDecimalValueType (pyxb.binding.datatypes.decimal):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TwoDecimalValueType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 372, 4)
    _Documentation = None
TwoDecimalValueType._CF_fractionDigits = pyxb.binding.facets.CF_fractionDigits(value=pyxb.binding.datatypes.nonNegativeInteger(2))
TwoDecimalValueType._InitializeFacetMap(TwoDecimalValueType._CF_fractionDigits)
Namespace.addCategoryObject('typeBinding', 'TwoDecimalValueType', TwoDecimalValueType)
_module_typeBindings.TwoDecimalValueType = TwoDecimalValueType

# Atomic simple type: {http://www.stibosystems.com/step}YesNoType
class YesNoType (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'YesNoType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 377, 4)
    _Documentation = None
YesNoType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=YesNoType, enum_prefix=None)
YesNoType.Y = YesNoType._CF_enumeration.addEnumeration(unicode_value='Y', tag='Y')
YesNoType.N = YesNoType._CF_enumeration.addEnumeration(unicode_value='N', tag='N')
YesNoType._InitializeFacetMap(YesNoType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'YesNoType', YesNoType)
_module_typeBindings.YesNoType = YesNoType

# Atomic simple type: [anonymous]
class STD_ANON_ (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 416, 12)
    _Documentation = None
STD_ANON_._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_, enum_prefix=None)
STD_ANON_.setup = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='setup', tag='setup')
STD_ANON_.user = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='user', tag='user')
STD_ANON_._InitializeFacetMap(STD_ANON_._CF_enumeration)
_module_typeBindings.STD_ANON_ = STD_ANON_

# Atomic simple type: [anonymous]
class STD_ANON_2 (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 754, 12)
    _Documentation = None
STD_ANON_2._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_2, enum_prefix=None)
STD_ANON_2.Read = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='Read', tag='Read')
STD_ANON_2.Discard = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='Discard', tag='Discard')
STD_ANON_2._InitializeFacetMap(STD_ANON_2._CF_enumeration)
_module_typeBindings.STD_ANON_2 = STD_ANON_2

# Atomic simple type: [anonymous]
class STD_ANON_3 (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1029, 12)
    _Documentation = None
STD_ANON_3._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_3, enum_prefix=None)
STD_ANON_3.Normal = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='Normal', tag='Normal')
STD_ANON_3.Property = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='Property', tag='Property')
STD_ANON_3._InitializeFacetMap(STD_ANON_3._CF_enumeration)
_module_typeBindings.STD_ANON_3 = STD_ANON_3

# Atomic simple type: [anonymous]
class STD_ANON_4 (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1531, 12)
    _Documentation = None
STD_ANON_4._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_4, enum_prefix=None)
STD_ANON_4.Local = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='Local', tag='Local')
STD_ANON_4.Global = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='Global', tag='Global')
STD_ANON_4._InitializeFacetMap(STD_ANON_4._CF_enumeration)
_module_typeBindings.STD_ANON_4 = STD_ANON_4

# Atomic simple type: [anonymous]
class STD_ANON_5 (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1551, 12)
    _Documentation = None
STD_ANON_5._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_5, enum_prefix=None)
STD_ANON_5.Condition = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='Condition', tag='Condition')
STD_ANON_5.Action = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='Action', tag='Action')
STD_ANON_5.Library = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='Library', tag='Library')
STD_ANON_5.Function = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='Function', tag='Function')
STD_ANON_5._InitializeFacetMap(STD_ANON_5._CF_enumeration)
_module_typeBindings.STD_ANON_5 = STD_ANON_5

# Atomic simple type: [anonymous]
class STD_ANON_6 (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2920, 12)
    _Documentation = None
STD_ANON_6._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_6, enum_prefix=None)
STD_ANON_6.n1 = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='1', tag='n1')
STD_ANON_6._InitializeFacetMap(STD_ANON_6._CF_enumeration)
_module_typeBindings.STD_ANON_6 = STD_ANON_6

# Atomic simple type: [anonymous]
class STD_ANON_7 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3307, 16)
    _Documentation = None
STD_ANON_7._InitializeFacetMap()
_module_typeBindings.STD_ANON_7 = STD_ANON_7

# Atomic simple type: [anonymous]
class STD_ANON_8 (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3478, 12)
    _Documentation = None
STD_ANON_8._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_8, enum_prefix=None)
STD_ANON_8.C = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='C', tag='C')
STD_ANON_8.CA = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='CA', tag='CA')
STD_ANON_8.CP = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='CP', tag='CP')
STD_ANON_8.CCR = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='CCR', tag='CCR')
STD_ANON_8.P = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='P', tag='P')
STD_ANON_8.PPR = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='PPR', tag='PPR')
STD_ANON_8.PCR = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='PCR', tag='PCR')
STD_ANON_8.PA = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='PA', tag='PA')
STD_ANON_8.ACR = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='ACR', tag='ACR')
STD_ANON_8._InitializeFacetMap(STD_ANON_8._CF_enumeration)
_module_typeBindings.STD_ANON_8 = STD_ANON_8

# Atomic simple type: [anonymous]
class STD_ANON_9 (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3910, 12)
    _Documentation = None
STD_ANON_9._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_9, enum_prefix=None)
STD_ANON_9.Read = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='Read', tag='Read')
STD_ANON_9.Discard = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='Discard', tag='Discard')
STD_ANON_9._InitializeFacetMap(STD_ANON_9._CF_enumeration)
_module_typeBindings.STD_ANON_9 = STD_ANON_9

# Atomic simple type: [anonymous]
class STD_ANON_10 (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4600, 12)
    _Documentation = None
STD_ANON_10._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_10, enum_prefix=None)
STD_ANON_10.Inactive = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='Inactive', tag='Inactive')
STD_ANON_10.PreInactive = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='PreInactive', tag='PreInactive')
STD_ANON_10.PreChecking = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='PreChecking', tag='PreChecking')
STD_ANON_10.Checking = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='Checking', tag='Checking')
STD_ANON_10.PreActivating = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='PreActivating', tag='PreActivating')
STD_ANON_10.Activating = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='Activating', tag='Activating')
STD_ANON_10.Active = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='Active', tag='Active')
STD_ANON_10.PreDeactivating = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='PreDeactivating', tag='PreDeactivating')
STD_ANON_10.Deactivating = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='Deactivating', tag='Deactivating')
STD_ANON_10._InitializeFacetMap(STD_ANON_10._CF_enumeration)
_module_typeBindings.STD_ANON_10 = STD_ANON_10

# Atomic simple type: [anonymous]
class STD_ANON_11 (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4664, 12)
    _Documentation = None
STD_ANON_11._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_11, enum_prefix=None)
STD_ANON_11.CA = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='CA', tag='CA')
STD_ANON_11.PA = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='PA', tag='PA')
STD_ANON_11._InitializeFacetMap(STD_ANON_11._CF_enumeration)
_module_typeBindings.STD_ANON_11 = STD_ANON_11

# Atomic simple type: [anonymous]
class STD_ANON_12 (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4855, 12)
    _Documentation = None
STD_ANON_12._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_12, enum_prefix=None)
STD_ANON_12.Local = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='Local', tag='Local')
STD_ANON_12.Global = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='Global', tag='Global')
STD_ANON_12._InitializeFacetMap(STD_ANON_12._CF_enumeration)
_module_typeBindings.STD_ANON_12 = STD_ANON_12

# Atomic simple type: [anonymous]
class STD_ANON_13 (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4868, 12)
    _Documentation = None
STD_ANON_13._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_13, enum_prefix=None)
STD_ANON_13.Condition = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='Condition', tag='Condition')
STD_ANON_13.Action = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='Action', tag='Action')
STD_ANON_13._InitializeFacetMap(STD_ANON_13._CF_enumeration)
_module_typeBindings.STD_ANON_13 = STD_ANON_13

# Atomic simple type: [anonymous]
class STD_ANON_14 (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5204, 12)
    _Documentation = None
STD_ANON_14._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_14, enum_prefix=None)
STD_ANON_14.Never = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='Never', tag='Never')
STD_ANON_14.Trigger = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='Trigger', tag='Trigger')
STD_ANON_14.ValidateBefore = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='ValidateBefore', tag='ValidateBefore')
STD_ANON_14.ValidateAfter = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='ValidateAfter', tag='ValidateAfter')
STD_ANON_14.ValidateBeforeAndAfter = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='ValidateBeforeAndAfter', tag='ValidateBeforeAndAfter')
STD_ANON_14._InitializeFacetMap(STD_ANON_14._CF_enumeration)
_module_typeBindings.STD_ANON_14 = STD_ANON_14

# Atomic simple type: [anonymous]
class STD_ANON_15 (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6103, 12)
    _Documentation = None
STD_ANON_15._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_15, enum_prefix=None)
STD_ANON_15.InDesign = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='InDesign', tag='InDesign')
STD_ANON_15.Quark = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='Quark', tag='Quark')
STD_ANON_15._InitializeFacetMap(STD_ANON_15._CF_enumeration)
_module_typeBindings.STD_ANON_15 = STD_ANON_15

# Atomic simple type: [anonymous]
class STD_ANON_16 (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8397, 12)
    _Documentation = None
STD_ANON_16._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_16, enum_prefix=None)
STD_ANON_16.Unit = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='Unit', tag='Unit')
STD_ANON_16.Dates = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='Dates', tag='Dates')
STD_ANON_16.Quantities = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='Quantities', tag='Quantities')
STD_ANON_16.LotSize = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='LotSize', tag='LotSize')
STD_ANON_16.LeadTime = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='LeadTime', tag='LeadTime')
STD_ANON_16._InitializeFacetMap(STD_ANON_16._CF_enumeration)
_module_typeBindings.STD_ANON_16 = STD_ANON_16

# Atomic simple type: {http://www.stibosystems.com/step}StepActionID
class StepActionID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepActionID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 329, 4)
    _Documentation = None
StepActionID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepActionID', StepActionID)
_module_typeBindings.StepActionID = StepActionID

# Atomic simple type: {http://www.stibosystems.com/step}StepActionSetID
class StepActionSetID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepActionSetID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 330, 4)
    _Documentation = None
StepActionSetID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepActionSetID', StepActionSetID)
_module_typeBindings.StepActionSetID = StepActionSetID

# Atomic simple type: {http://www.stibosystems.com/step}StepAssetPushConfigurationID
class StepAssetPushConfigurationID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepAssetPushConfigurationID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 331, 4)
    _Documentation = None
StepAssetPushConfigurationID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepAssetPushConfigurationID', StepAssetPushConfigurationID)
_module_typeBindings.StepAssetPushConfigurationID = StepAssetPushConfigurationID

# Atomic simple type: {http://www.stibosystems.com/step}StepAssetPushEventQueueID
class StepAssetPushEventQueueID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepAssetPushEventQueueID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 332, 4)
    _Documentation = None
StepAssetPushEventQueueID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepAssetPushEventQueueID', StepAssetPushEventQueueID)
_module_typeBindings.StepAssetPushEventQueueID = StepAssetPushEventQueueID

# Atomic simple type: {http://www.stibosystems.com/step}StepAttributeID
class StepAttributeID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepAttributeID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 333, 4)
    _Documentation = None
StepAttributeID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepAttributeID', StepAttributeID)
_module_typeBindings.StepAttributeID = StepAttributeID

# Atomic simple type: {http://www.stibosystems.com/step}StepBusinessRuleID
class StepBusinessRuleID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepBusinessRuleID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 334, 4)
    _Documentation = None
StepBusinessRuleID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepBusinessRuleID', StepBusinessRuleID)
_module_typeBindings.StepBusinessRuleID = StepBusinessRuleID

# Atomic simple type: {http://www.stibosystems.com/step}StepDataContainerTypeID
class StepDataContainerTypeID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepDataContainerTypeID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 335, 4)
    _Documentation = None
StepDataContainerTypeID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepDataContainerTypeID', StepDataContainerTypeID)
_module_typeBindings.StepDataContainerTypeID = StepDataContainerTypeID

# Atomic simple type: {http://www.stibosystems.com/step}StepEventProcessorID
class StepEventProcessorID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepEventProcessorID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 336, 4)
    _Documentation = None
StepEventProcessorID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepEventProcessorID', StepEventProcessorID)
_module_typeBindings.StepEventProcessorID = StepEventProcessorID

# Atomic simple type: {http://www.stibosystems.com/step}StepEventQueueID
class StepEventQueueID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepEventQueueID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 337, 4)
    _Documentation = None
StepEventQueueID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepEventQueueID', StepEventQueueID)
_module_typeBindings.StepEventQueueID = StepEventQueueID

# Atomic simple type: {http://www.stibosystems.com/step}StepGatewayEndPointID
class StepGatewayEndPointID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepGatewayEndPointID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 338, 4)
    _Documentation = None
StepGatewayEndPointID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepGatewayEndPointID', StepGatewayEndPointID)
_module_typeBindings.StepGatewayEndPointID = StepGatewayEndPointID

# Atomic simple type: {http://www.stibosystems.com/step}StepImageConversionConfigurationID
class StepImageConversionConfigurationID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepImageConversionConfigurationID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 339, 4)
    _Documentation = None
StepImageConversionConfigurationID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepImageConversionConfigurationID', StepImageConversionConfigurationID)
_module_typeBindings.StepImageConversionConfigurationID = StepImageConversionConfigurationID

# Atomic simple type: {http://www.stibosystems.com/step}StepInboundEndPointID
class StepInboundEndPointID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepInboundEndPointID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 340, 4)
    _Documentation = None
StepInboundEndPointID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepInboundEndPointID', StepInboundEndPointID)
_module_typeBindings.StepInboundEndPointID = StepInboundEndPointID

# Atomic simple type: {http://www.stibosystems.com/step}StepKeyID
class StepKeyID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepKeyID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 341, 4)
    _Documentation = None
StepKeyID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepKeyID', StepKeyID)
_module_typeBindings.StepKeyID = StepKeyID

# Atomic simple type: {http://www.stibosystems.com/step}StepLinkTypeID
class StepLinkTypeID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepLinkTypeID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 342, 4)
    _Documentation = None
StepLinkTypeID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepLinkTypeID', StepLinkTypeID)
_module_typeBindings.StepLinkTypeID = StepLinkTypeID

# Atomic simple type: {http://www.stibosystems.com/step}StepLOVID
class StepLOVID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepLOVID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 343, 4)
    _Documentation = None
StepLOVID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepLOVID', StepLOVID)
_module_typeBindings.StepLOVID = StepLOVID

# Atomic simple type: {http://www.stibosystems.com/step}StepMatchCodeID
class StepMatchCodeID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepMatchCodeID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 344, 4)
    _Documentation = None
StepMatchCodeID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepMatchCodeID', StepMatchCodeID)
_module_typeBindings.StepMatchCodeID = StepMatchCodeID

# Atomic simple type: {http://www.stibosystems.com/step}StepMatchingAlgorithmID
class StepMatchingAlgorithmID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepMatchingAlgorithmID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 345, 4)
    _Documentation = None
StepMatchingAlgorithmID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepMatchingAlgorithmID', StepMatchingAlgorithmID)
_module_typeBindings.StepMatchingAlgorithmID = StepMatchingAlgorithmID

# Atomic simple type: {http://www.stibosystems.com/step}StepObjectTypeID
class StepObjectTypeID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepObjectTypeID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 346, 4)
    _Documentation = None
StepObjectTypeID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepObjectTypeID', StepObjectTypeID)
_module_typeBindings.StepObjectTypeID = StepObjectTypeID

# Atomic simple type: {http://www.stibosystems.com/step}StepOutboundEndPointID
class StepOutboundEndPointID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepOutboundEndPointID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 347, 4)
    _Documentation = None
StepOutboundEndPointID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepOutboundEndPointID', StepOutboundEndPointID)
_module_typeBindings.StepOutboundEndPointID = StepOutboundEndPointID

# Atomic simple type: {http://www.stibosystems.com/step}StepPortalConfigurationID
class StepPortalConfigurationID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepPortalConfigurationID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 348, 4)
    _Documentation = None
StepPortalConfigurationID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepPortalConfigurationID', StepPortalConfigurationID)
_module_typeBindings.StepPortalConfigurationID = StepPortalConfigurationID

# Atomic simple type: {http://www.stibosystems.com/step}StepQualifierID
class StepQualifierID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepQualifierID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 349, 4)
    _Documentation = None
StepQualifierID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepQualifierID', StepQualifierID)
_module_typeBindings.StepQualifierID = StepQualifierID

# Atomic simple type: {http://www.stibosystems.com/step}StepReferenceTypeID
class StepReferenceTypeID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepReferenceTypeID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 350, 4)
    _Documentation = None
StepReferenceTypeID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepReferenceTypeID', StepReferenceTypeID)
_module_typeBindings.StepReferenceTypeID = StepReferenceTypeID

# Atomic simple type: {http://www.stibosystems.com/step}StepSetupEntityID
class StepSetupEntityID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepSetupEntityID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 351, 4)
    _Documentation = None
StepSetupEntityID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepSetupEntityID', StepSetupEntityID)
_module_typeBindings.StepSetupEntityID = StepSetupEntityID

# Atomic simple type: {http://www.stibosystems.com/step}StepSetupGroupID
class StepSetupGroupID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepSetupGroupID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 352, 4)
    _Documentation = None
StepSetupGroupID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepSetupGroupID', StepSetupGroupID)
_module_typeBindings.StepSetupGroupID = StepSetupGroupID

# Atomic simple type: {http://www.stibosystems.com/step}StepTermsListID
class StepTermsListID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepTermsListID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 353, 4)
    _Documentation = None
StepTermsListID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepTermsListID', StepTermsListID)
_module_typeBindings.StepTermsListID = StepTermsListID

# Atomic simple type: {http://www.stibosystems.com/step}StepTradingTermsID
class StepTradingTermsID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepTradingTermsID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 354, 4)
    _Documentation = None
StepTradingTermsID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepTradingTermsID', StepTradingTermsID)
_module_typeBindings.StepTradingTermsID = StepTradingTermsID

# Atomic simple type: {http://www.stibosystems.com/step}StepUnitID
class StepUnitID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepUnitID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 355, 4)
    _Documentation = None
StepUnitID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepUnitID', StepUnitID)
_module_typeBindings.StepUnitID = StepUnitID

# Atomic simple type: {http://www.stibosystems.com/step}StepUserGroupID
class StepUserGroupID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepUserGroupID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 356, 4)
    _Documentation = None
StepUserGroupID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepUserGroupID', StepUserGroupID)
_module_typeBindings.StepUserGroupID = StepUserGroupID

# Atomic simple type: {http://www.stibosystems.com/step}StepUserID
class StepUserID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepUserID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 357, 4)
    _Documentation = None
StepUserID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepUserID', StepUserID)
_module_typeBindings.StepUserID = StepUserID

# Atomic simple type: {http://www.stibosystems.com/step}StepWorkflowID
class StepWorkflowID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepWorkflowID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 358, 4)
    _Documentation = None
StepWorkflowID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepWorkflowID', StepWorkflowID)
_module_typeBindings.StepWorkflowID = StepWorkflowID

# Atomic simple type: {http://www.stibosystems.com/step}StepWorkflowProfileID
class StepWorkflowProfileID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepWorkflowProfileID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 359, 4)
    _Documentation = None
StepWorkflowProfileID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepWorkflowProfileID', StepWorkflowProfileID)
_module_typeBindings.StepWorkflowProfileID = StepWorkflowProfileID

# Atomic simple type: {http://www.stibosystems.com/step}StepProductID
class StepProductID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepProductID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 360, 4)
    _Documentation = None
StepProductID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepProductID', StepProductID)
_module_typeBindings.StepProductID = StepProductID

# Atomic simple type: {http://www.stibosystems.com/step}StepClassificationID
class StepClassificationID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepClassificationID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 361, 4)
    _Documentation = None
StepClassificationID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepClassificationID', StepClassificationID)
_module_typeBindings.StepClassificationID = StepClassificationID

# Atomic simple type: {http://www.stibosystems.com/step}StepEntityID
class StepEntityID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepEntityID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 362, 4)
    _Documentation = None
StepEntityID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepEntityID', StepEntityID)
_module_typeBindings.StepEntityID = StepEntityID

# Atomic simple type: {http://www.stibosystems.com/step}StepAssetID
class StepAssetID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepAssetID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 363, 4)
    _Documentation = None
StepAssetID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepAssetID', StepAssetID)
_module_typeBindings.StepAssetID = StepAssetID

# Atomic simple type: {http://www.stibosystems.com/step}StepNodeCollectionID
class StepNodeCollectionID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepNodeCollectionID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 364, 4)
    _Documentation = None
StepNodeCollectionID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepNodeCollectionID', StepNodeCollectionID)
_module_typeBindings.StepNodeCollectionID = StepNodeCollectionID

# Atomic simple type: {http://www.stibosystems.com/step}StepProcessID
class StepProcessID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepProcessID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 365, 4)
    _Documentation = None
StepProcessID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepProcessID', StepProcessID)
_module_typeBindings.StepProcessID = StepProcessID

# Atomic simple type: {http://www.stibosystems.com/step}StepTagGroupID
class StepTagGroupID (StepID):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StepTagGroupID')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 366, 4)
    _Documentation = None
StepTagGroupID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StepTagGroupID', StepTagGroupID)
_module_typeBindings.StepTagGroupID = StepTagGroupID

# Complex type {http://www.stibosystems.com/step}ActionSetListType with content type ELEMENT_ONLY
class ActionSetListType (pyxb.binding.basis.complexTypeDefinition):
    """
                A list of action sets.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ActionSetListType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 427, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}ActionSet uses Python identifier ActionSet
    __ActionSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ActionSet'), 'ActionSet', '__httpwww_stibosystems_comstep_ActionSetListType_httpwww_stibosystems_comstepActionSet', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 434, 12), )

    
    ActionSet = property(__ActionSet.value, __ActionSet.set, None, None)

    _ElementMap.update({
        __ActionSet.name() : __ActionSet
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ActionSetListType = ActionSetListType
Namespace.addCategoryObject('typeBinding', 'ActionSetListType', ActionSetListType)


# Complex type {http://www.stibosystems.com/step}AssetContentType with content type ELEMENT_ONLY
class AssetContentType (pyxb.binding.basis.complexTypeDefinition):
    """
                Holds asset conversion information.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AssetContentType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 509, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}AssetContentSpecification uses Python identifier AssetContentSpecification
    __AssetContentSpecification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssetContentSpecification'), 'AssetContentSpecification', '__httpwww_stibosystems_comstep_AssetContentType_httpwww_stibosystems_comstepAssetContentSpecification', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 516, 12), )

    
    AssetContentSpecification = property(__AssetContentSpecification.value, __AssetContentSpecification.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_AssetContentType_QualifierID', pyxb.binding.datatypes.string)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 519, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 519, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, None)

    _ElementMap.update({
        __AssetContentSpecification.name() : __AssetContentSpecification
    })
    _AttributeMap.update({
        __QualifierID.name() : __QualifierID
    })
_module_typeBindings.AssetContentType = AssetContentType
Namespace.addCategoryObject('typeBinding', 'AssetContentType', AssetContentType)


# Complex type {http://www.stibosystems.com/step}AssetPushEventQueuesType with content type ELEMENT_ONLY
class AssetPushEventQueuesType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for asset push event queues.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AssetPushEventQueuesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 731, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}AssetPushEventQueue uses Python identifier AssetPushEventQueue
    __AssetPushEventQueue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssetPushEventQueue'), 'AssetPushEventQueue', '__httpwww_stibosystems_comstep_AssetPushEventQueuesType_httpwww_stibosystems_comstepAssetPushEventQueue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 738, 12), )

    
    AssetPushEventQueue = property(__AssetPushEventQueue.value, __AssetPushEventQueue.set, None, None)

    _ElementMap.update({
        __AssetPushEventQueue.name() : __AssetPushEventQueue
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AssetPushEventQueuesType = AssetPushEventQueuesType
Namespace.addCategoryObject('typeBinding', 'AssetPushEventQueuesType', AssetPushEventQueuesType)


# Complex type {http://www.stibosystems.com/step}AssetPushConfigurationsType with content type ELEMENT_ONLY
class AssetPushConfigurationsType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for AssetPush configurations.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AssetPushConfigurationsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 765, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}AssetPushConfiguration uses Python identifier AssetPushConfiguration
    __AssetPushConfiguration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssetPushConfiguration'), 'AssetPushConfiguration', '__httpwww_stibosystems_comstep_AssetPushConfigurationsType_httpwww_stibosystems_comstepAssetPushConfiguration', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 772, 12), )

    
    AssetPushConfiguration = property(__AssetPushConfiguration.value, __AssetPushConfiguration.set, None, None)

    _ElementMap.update({
        __AssetPushConfiguration.name() : __AssetPushConfiguration
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AssetPushConfigurationsType = AssetPushConfigurationsType
Namespace.addCategoryObject('typeBinding', 'AssetPushConfigurationsType', AssetPushConfigurationsType)


# Complex type {http://www.stibosystems.com/step}AssetPushConfigurationMIMETypesType with content type ELEMENT_ONLY
class AssetPushConfigurationMIMETypesType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for AssetPush configuration MIMETypes.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AssetPushConfigurationMIMETypesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 811, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}AssetPushMIMEType uses Python identifier AssetPushMIMEType
    __AssetPushMIMEType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssetPushMIMEType'), 'AssetPushMIMEType', '__httpwww_stibosystems_comstep_AssetPushConfigurationMIMETypesType_httpwww_stibosystems_comstepAssetPushMIMEType', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 818, 12), )

    
    AssetPushMIMEType = property(__AssetPushMIMEType.value, __AssetPushMIMEType.set, None, None)

    _ElementMap.update({
        __AssetPushMIMEType.name() : __AssetPushMIMEType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AssetPushConfigurationMIMETypesType = AssetPushConfigurationMIMETypesType
Namespace.addCategoryObject('typeBinding', 'AssetPushConfigurationMIMETypesType', AssetPushConfigurationMIMETypesType)


# Complex type {http://www.stibosystems.com/step}AssetPushConfigurationAttributesType with content type ELEMENT_ONLY
class AssetPushConfigurationAttributesType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for AssetPush configuration attributes.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AssetPushConfigurationAttributesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 821, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}AssetPushAttribute uses Python identifier AssetPushAttribute
    __AssetPushAttribute = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssetPushAttribute'), 'AssetPushAttribute', '__httpwww_stibosystems_comstep_AssetPushConfigurationAttributesType_httpwww_stibosystems_comstepAssetPushAttribute', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 828, 12), )

    
    AssetPushAttribute = property(__AssetPushAttribute.value, __AssetPushAttribute.set, None, None)

    _ElementMap.update({
        __AssetPushAttribute.name() : __AssetPushAttribute
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AssetPushConfigurationAttributesType = AssetPushConfigurationAttributesType
Namespace.addCategoryObject('typeBinding', 'AssetPushConfigurationAttributesType', AssetPushConfigurationAttributesType)


# Complex type {http://www.stibosystems.com/step}AssetPushConfigurationClassificationsType with content type ELEMENT_ONLY
class AssetPushConfigurationClassificationsType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for AssetPush configuration classifications.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AssetPushConfigurationClassificationsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 831, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}AssetPushClassification uses Python identifier AssetPushClassification
    __AssetPushClassification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssetPushClassification'), 'AssetPushClassification', '__httpwww_stibosystems_comstep_AssetPushConfigurationClassificationsType_httpwww_stibosystems_comstepAssetPushClassification', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 838, 12), )

    
    AssetPushClassification = property(__AssetPushClassification.value, __AssetPushClassification.set, None, None)

    _ElementMap.update({
        __AssetPushClassification.name() : __AssetPushClassification
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AssetPushConfigurationClassificationsType = AssetPushConfigurationClassificationsType
Namespace.addCategoryObject('typeBinding', 'AssetPushConfigurationClassificationsType', AssetPushConfigurationClassificationsType)


# Complex type {http://www.stibosystems.com/step}AssetPushConfigurationEventQueuesType with content type ELEMENT_ONLY
class AssetPushConfigurationEventQueuesType (pyxb.binding.basis.complexTypeDefinition):
    """
                @Deprecated, not used anymore, replaced with EventQueueLink.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AssetPushConfigurationEventQueuesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 841, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}AssetPushEventQueue uses Python identifier AssetPushEventQueue
    __AssetPushEventQueue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssetPushEventQueue'), 'AssetPushEventQueue', '__httpwww_stibosystems_comstep_AssetPushConfigurationEventQueuesType_httpwww_stibosystems_comstepAssetPushEventQueue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 848, 12), )

    
    AssetPushEventQueue = property(__AssetPushEventQueue.value, __AssetPushEventQueue.set, None, None)

    _ElementMap.update({
        __AssetPushEventQueue.name() : __AssetPushEventQueue
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AssetPushConfigurationEventQueuesType = AssetPushConfigurationEventQueuesType
Namespace.addCategoryObject('typeBinding', 'AssetPushConfigurationEventQueuesType', AssetPushConfigurationEventQueuesType)


# Complex type {http://www.stibosystems.com/step}AssetSettingsType with content type ELEMENT_ONLY
class AssetSettingsType (pyxb.binding.basis.complexTypeDefinition):
    """
                Describes dimension dependencies of all assets in the STEP system.
                On import it will not remove dimension dependencies.
                On import it will only add dimension dependencies as long as all existing dimension dependencies also
                are given in import file.
                In other words, all dimension dependencies needs to be provided on import.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AssetSettingsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 862, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}DimensionLink uses Python identifier DimensionLink
    __DimensionLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink'), 'DimensionLink', '__httpwww_stibosystems_comstep_AssetSettingsType_httpwww_stibosystems_comstepDimensionLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 873, 12), )

    
    DimensionLink = property(__DimensionLink.value, __DimensionLink.set, None, None)

    _ElementMap.update({
        __DimensionLink.name() : __DimensionLink
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AssetSettingsType = AssetSettingsType
Namespace.addCategoryObject('typeBinding', 'AssetSettingsType', AssetSettingsType)


# Complex type {http://www.stibosystems.com/step}AttributeSequenceType with content type ELEMENT_ONLY
class AttributeSequenceType (pyxb.binding.basis.complexTypeDefinition):
    """
                The sequence of attributes in a manually sorted attribute group. On import, any attributes not mentioned
                in the sequence will be left in the beginning of the sequence.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AttributeSequenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1100, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}AttributeLink uses Python identifier AttributeLink
    __AttributeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink'), 'AttributeLink', '__httpwww_stibosystems_comstep_AttributeSequenceType_httpwww_stibosystems_comstepAttributeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1108, 12), )

    
    AttributeLink = property(__AttributeLink.value, __AttributeLink.set, None, None)

    _ElementMap.update({
        __AttributeLink.name() : __AttributeLink
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AttributeSequenceType = AttributeSequenceType
Namespace.addCategoryObject('typeBinding', 'AttributeSequenceType', AttributeSequenceType)


# Complex type {http://www.stibosystems.com/step}AttributeGroupListType with content type ELEMENT_ONLY
class AttributeGroupListType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for attribute groups.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupListType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1187, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}AttributeGroup uses Python identifier AttributeGroup
    __AttributeGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroup'), 'AttributeGroup', '__httpwww_stibosystems_comstep_AttributeGroupListType_httpwww_stibosystems_comstepAttributeGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1194, 12), )

    
    AttributeGroup = property(__AttributeGroup.value, __AttributeGroup.set, None, None)

    _ElementMap.update({
        __AttributeGroup.name() : __AttributeGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AttributeGroupListType = AttributeGroupListType
Namespace.addCategoryObject('typeBinding', 'AttributeGroupListType', AttributeGroupListType)


# Complex type {http://www.stibosystems.com/step}AttributeListType with content type ELEMENT_ONLY
class AttributeListType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for attributes.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AttributeListType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1263, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Attribute uses Python identifier Attribute
    __Attribute = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Attribute'), 'Attribute', '__httpwww_stibosystems_comstep_AttributeListType_httpwww_stibosystems_comstepAttribute', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1270, 12), )

    
    Attribute = property(__Attribute.value, __Attribute.set, None, None)

    _ElementMap.update({
        __Attribute.name() : __Attribute
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AttributeListType = AttributeListType
Namespace.addCategoryObject('typeBinding', 'AttributeListType', AttributeListType)


# Complex type {http://www.stibosystems.com/step}AttributeTransformationGroupsType with content type ELEMENT_ONLY
class AttributeTransformationGroupsType (pyxb.binding.basis.complexTypeDefinition):
    """
                A list of attribute transformation groups.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AttributeTransformationGroupsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1333, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}AttributeTransformationGroup uses Python identifier AttributeTransformationGroup
    __AttributeTransformationGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeTransformationGroup'), 'AttributeTransformationGroup', '__httpwww_stibosystems_comstep_AttributeTransformationGroupsType_httpwww_stibosystems_comstepAttributeTransformationGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1340, 12), )

    
    AttributeTransformationGroup = property(__AttributeTransformationGroup.value, __AttributeTransformationGroup.set, None, None)

    _ElementMap.update({
        __AttributeTransformationGroup.name() : __AttributeTransformationGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AttributeTransformationGroupsType = AttributeTransformationGroupsType
Namespace.addCategoryObject('typeBinding', 'AttributeTransformationGroupsType', AttributeTransformationGroupsType)


# Complex type {http://www.stibosystems.com/step}BasketType with content type ELEMENT_ONLY
class BasketType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}BasketType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BasketType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1362, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}ClassificationBasketLink uses Python identifier ClassificationBasketLink
    __ClassificationBasketLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClassificationBasketLink'), 'ClassificationBasketLink', '__httpwww_stibosystems_comstep_BasketType_httpwww_stibosystems_comstepClassificationBasketLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1364, 12), )

    
    ClassificationBasketLink = property(__ClassificationBasketLink.value, __ClassificationBasketLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ProductBasketLink uses Python identifier ProductBasketLink
    __ProductBasketLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ProductBasketLink'), 'ProductBasketLink', '__httpwww_stibosystems_comstep_BasketType_httpwww_stibosystems_comstepProductBasketLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1365, 12), )

    
    ProductBasketLink = property(__ProductBasketLink.value, __ProductBasketLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AssetBasketLink uses Python identifier AssetBasketLink
    __AssetBasketLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssetBasketLink'), 'AssetBasketLink', '__httpwww_stibosystems_comstep_BasketType_httpwww_stibosystems_comstepAssetBasketLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1366, 12), )

    
    AssetBasketLink = property(__AssetBasketLink.value, __AssetBasketLink.set, None, None)

    _ElementMap.update({
        __ClassificationBasketLink.name() : __ClassificationBasketLink,
        __ProductBasketLink.name() : __ProductBasketLink,
        __AssetBasketLink.name() : __AssetBasketLink
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.BasketType = BasketType
Namespace.addCategoryObject('typeBinding', 'BasketType', BasketType)


# Complex type {http://www.stibosystems.com/step}BulkUpdateConfigurationsType with content type ELEMENT_ONLY
class BulkUpdateConfigurationsType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for bulk update configurations.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BulkUpdateConfigurationsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1403, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}BulkUpdateConfiguration uses Python identifier BulkUpdateConfiguration
    __BulkUpdateConfiguration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BulkUpdateConfiguration'), 'BulkUpdateConfiguration', '__httpwww_stibosystems_comstep_BulkUpdateConfigurationsType_httpwww_stibosystems_comstepBulkUpdateConfiguration', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1410, 12), )

    
    BulkUpdateConfiguration = property(__BulkUpdateConfiguration.value, __BulkUpdateConfiguration.set, None, None)

    _ElementMap.update({
        __BulkUpdateConfiguration.name() : __BulkUpdateConfiguration
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.BulkUpdateConfigurationsType = BulkUpdateConfigurationsType
Namespace.addCategoryObject('typeBinding', 'BulkUpdateConfigurationsType', BulkUpdateConfigurationsType)


# Complex type {http://www.stibosystems.com/step}BusinessLibrariesType with content type ELEMENT_ONLY
class BusinessLibrariesType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for business libraries.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BusinessLibrariesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1428, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}BusinessRule uses Python identifier BusinessRule
    __BusinessRule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BusinessRule'), 'BusinessRule', '__httpwww_stibosystems_comstep_BusinessLibrariesType_httpwww_stibosystems_comstepBusinessRule', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1435, 12), )

    
    BusinessRule = property(__BusinessRule.value, __BusinessRule.set, None, None)

    _ElementMap.update({
        __BusinessRule.name() : __BusinessRule
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.BusinessLibrariesType = BusinessLibrariesType
Namespace.addCategoryObject('typeBinding', 'BusinessLibrariesType', BusinessLibrariesType)


# Complex type {http://www.stibosystems.com/step}BusinessRuleDescriptionType with content type MIXED
class BusinessRuleDescriptionType (pyxb.binding.basis.complexTypeDefinition):
    """
                A description of a business rule.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BusinessRuleDescriptionType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1459, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.BusinessRuleDescriptionType = BusinessRuleDescriptionType
Namespace.addCategoryObject('typeBinding', 'BusinessRuleDescriptionType', BusinessRuleDescriptionType)


# Complex type {http://www.stibosystems.com/step}BusinessRulesType with content type ELEMENT_ONLY
class BusinessRulesType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for non-library business rules.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BusinessRulesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1480, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}BusinessRule uses Python identifier BusinessRule
    __BusinessRule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BusinessRule'), 'BusinessRule', '__httpwww_stibosystems_comstep_BusinessRulesType_httpwww_stibosystems_comstepBusinessRule', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1487, 12), )

    
    BusinessRule = property(__BusinessRule.value, __BusinessRule.set, None, None)

    _ElementMap.update({
        __BusinessRule.name() : __BusinessRule
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.BusinessRulesType = BusinessRulesType
Namespace.addCategoryObject('typeBinding', 'BusinessRulesType', BusinessRulesType)


# Complex type {http://www.stibosystems.com/step}CalculatedAttributeSettingsType with content type ELEMENT_ONLY
class CalculatedAttributeSettingsType (pyxb.binding.basis.complexTypeDefinition):
    """
                Describes dimension dependencies of all templates of calculated attributes in the STEP system.
                It goes for both value and unit templates of calculated attributes.
                On import it will not remove dimension dependencies.
                On import it will only add dimension dependencies as long as all existing dimension dependencies also
                are given in import file.
                In other words, all dimension dependencies needs to be provided on import.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CalculatedAttributeSettingsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1564, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}DimensionLink uses Python identifier DimensionLink
    __DimensionLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink'), 'DimensionLink', '__httpwww_stibosystems_comstep_CalculatedAttributeSettingsType_httpwww_stibosystems_comstepDimensionLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1576, 12), )

    
    DimensionLink = property(__DimensionLink.value, __DimensionLink.set, None, None)

    _ElementMap.update({
        __DimensionLink.name() : __DimensionLink
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CalculatedAttributeSettingsType = CalculatedAttributeSettingsType
Namespace.addCategoryObject('typeBinding', 'CalculatedAttributeSettingsType', CalculatedAttributeSettingsType)


# Complex type {http://www.stibosystems.com/step}ChangePackagesType with content type ELEMENT_ONLY
class ChangePackagesType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}ChangePackagesType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ChangePackagesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1611, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}ChangePackage uses Python identifier ChangePackage
    __ChangePackage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ChangePackage'), 'ChangePackage', '__httpwww_stibosystems_comstep_ChangePackagesType_httpwww_stibosystems_comstepChangePackage', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1613, 12), )

    
    ChangePackage = property(__ChangePackage.value, __ChangePackage.set, None, None)

    _ElementMap.update({
        __ChangePackage.name() : __ChangePackage
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ChangePackagesType = ChangePackagesType
Namespace.addCategoryObject('typeBinding', 'ChangePackagesType', ChangePackagesType)


# Complex type {http://www.stibosystems.com/step}CollectionListType with content type ELEMENT_ONLY
class CollectionListType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for collections and collection groups.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CollectionListType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2224, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}CollectionGroup uses Python identifier CollectionGroup
    __CollectionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CollectionGroup'), 'CollectionGroup', '__httpwww_stibosystems_comstep_CollectionListType_httpwww_stibosystems_comstepCollectionGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2231, 12), )

    
    CollectionGroup = property(__CollectionGroup.value, __CollectionGroup.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Collection uses Python identifier Collection
    __Collection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Collection'), 'Collection', '__httpwww_stibosystems_comstep_CollectionListType_httpwww_stibosystems_comstepCollection', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2232, 12), )

    
    Collection = property(__Collection.value, __Collection.set, None, None)

    _ElementMap.update({
        __CollectionGroup.name() : __CollectionGroup,
        __Collection.name() : __Collection
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CollectionListType = CollectionListType
Namespace.addCategoryObject('typeBinding', 'CollectionListType', CollectionListType)


# Complex type {http://www.stibosystems.com/step}ColumnTypesType with content type ELEMENT_ONLY
class ColumnTypesType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}ColumnTypesType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ColumnTypesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2316, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}ColumnType uses Python identifier ColumnType
    __ColumnType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ColumnType'), 'ColumnType', '__httpwww_stibosystems_comstep_ColumnTypesType_httpwww_stibosystems_comstepColumnType', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2318, 12), )

    
    ColumnType = property(__ColumnType.value, __ColumnType.set, None, None)

    _ElementMap.update({
        __ColumnType.name() : __ColumnType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ColumnTypesType = ColumnTypesType
Namespace.addCategoryObject('typeBinding', 'ColumnTypesType', ColumnTypesType)


# Complex type {http://www.stibosystems.com/step}ContextListType with content type ELEMENT_ONLY
class ContextListType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for contexts.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ContextListType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2490, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Context uses Python identifier Context
    __Context = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Context'), 'Context', '__httpwww_stibosystems_comstep_ContextListType_httpwww_stibosystems_comstepContext', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2497, 12), )

    
    Context = property(__Context.value, __Context.set, None, None)

    _ElementMap.update({
        __Context.name() : __Context
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ContextListType = ContextListType
Namespace.addCategoryObject('typeBinding', 'ContextListType', ContextListType)


# Complex type {http://www.stibosystems.com/step}CrossContextsType with content type ELEMENT_ONLY
class CrossContextsType (pyxb.binding.basis.complexTypeDefinition):
    """
                @Deprecated, may be removed in future release.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CrossContextsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2500, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Context uses Python identifier Context
    __Context = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Context'), 'Context', '__httpwww_stibosystems_comstep_CrossContextsType_httpwww_stibosystems_comstepContext', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2507, 12), )

    
    Context = property(__Context.value, __Context.set, None, None)

    _ElementMap.update({
        __Context.name() : __Context
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CrossContextsType = CrossContextsType
Namespace.addCategoryObject('typeBinding', 'CrossContextsType', CrossContextsType)


# Complex type {http://www.stibosystems.com/step}ComponentModelsType with content type ELEMENT_ONLY
class ComponentModelsType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for component models.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ComponentModelsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2510, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Model uses Python identifier Model
    __Model = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Model'), 'Model', '__httpwww_stibosystems_comstep_ComponentModelsType_httpwww_stibosystems_comstepModel', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2517, 12), )

    
    Model = property(__Model.value, __Model.set, None, None)

    
    # Attribute version uses Python identifier version
    __version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'version'), 'version', '__httpwww_stibosystems_comstep_ComponentModelsType_version', pyxb.binding.datatypes.string)
    __version._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2519, 8)
    __version._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2519, 8)
    
    version = property(__version.value, __version.set, None, '\n                    Version of the component model representation.\n                ')

    _ElementMap.update({
        __Model.name() : __Model
    })
    _AttributeMap.update({
        __version.name() : __version
    })
_module_typeBindings.ComponentModelsType = ComponentModelsType
Namespace.addCategoryObject('typeBinding', 'ComponentModelsType', ComponentModelsType)


# Complex type {http://www.stibosystems.com/step}CrossReferenceTypesType with content type ELEMENT_ONLY
class CrossReferenceTypesType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for reference and link type definitions.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CrossReferenceTypesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2541, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}AssetCrossReferenceType uses Python identifier AssetCrossReferenceType
    __AssetCrossReferenceType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssetCrossReferenceType'), 'AssetCrossReferenceType', '__httpwww_stibosystems_comstep_CrossReferenceTypesType_httpwww_stibosystems_comstepAssetCrossReferenceType', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2549, 16), )

    
    AssetCrossReferenceType = property(__AssetCrossReferenceType.value, __AssetCrossReferenceType.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ProductCrossReferenceType uses Python identifier ProductCrossReferenceType
    __ProductCrossReferenceType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ProductCrossReferenceType'), 'ProductCrossReferenceType', '__httpwww_stibosystems_comstep_CrossReferenceTypesType_httpwww_stibosystems_comstepProductCrossReferenceType', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2550, 16), )

    
    ProductCrossReferenceType = property(__ProductCrossReferenceType.value, __ProductCrossReferenceType.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ClassificationCrossReferenceType uses Python identifier ClassificationCrossReferenceType
    __ClassificationCrossReferenceType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClassificationCrossReferenceType'), 'ClassificationCrossReferenceType', '__httpwww_stibosystems_comstep_CrossReferenceTypesType_httpwww_stibosystems_comstepClassificationCrossReferenceType', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2551, 16), )

    
    ClassificationCrossReferenceType = property(__ClassificationCrossReferenceType.value, __ClassificationCrossReferenceType.set, None, None)

    
    # Element {http://www.stibosystems.com/step}EntityCrossReferenceType uses Python identifier EntityCrossReferenceType
    __EntityCrossReferenceType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EntityCrossReferenceType'), 'EntityCrossReferenceType', '__httpwww_stibosystems_comstep_CrossReferenceTypesType_httpwww_stibosystems_comstepEntityCrossReferenceType', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2552, 16), )

    
    EntityCrossReferenceType = property(__EntityCrossReferenceType.value, __EntityCrossReferenceType.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ClassificationProductLinkType uses Python identifier ClassificationProductLinkType
    __ClassificationProductLinkType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClassificationProductLinkType'), 'ClassificationProductLinkType', '__httpwww_stibosystems_comstep_CrossReferenceTypesType_httpwww_stibosystems_comstepClassificationProductLinkType', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2553, 16), )

    
    ClassificationProductLinkType = property(__ClassificationProductLinkType.value, __ClassificationProductLinkType.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ContextCrossReferenceType uses Python identifier ContextCrossReferenceType
    __ContextCrossReferenceType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ContextCrossReferenceType'), 'ContextCrossReferenceType', '__httpwww_stibosystems_comstep_CrossReferenceTypesType_httpwww_stibosystems_comstepContextCrossReferenceType', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2554, 16), )

    
    ContextCrossReferenceType = property(__ContextCrossReferenceType.value, __ContextCrossReferenceType.set, None, None)

    
    # Element {http://www.stibosystems.com/step}WorkspaceCrossReferenceType uses Python identifier WorkspaceCrossReferenceType
    __WorkspaceCrossReferenceType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'WorkspaceCrossReferenceType'), 'WorkspaceCrossReferenceType', '__httpwww_stibosystems_comstep_CrossReferenceTypesType_httpwww_stibosystems_comstepWorkspaceCrossReferenceType', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2555, 16), )

    
    WorkspaceCrossReferenceType = property(__WorkspaceCrossReferenceType.value, __WorkspaceCrossReferenceType.set, None, None)

    
    # Element {http://www.stibosystems.com/step}LinkType uses Python identifier LinkType
    __LinkType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LinkType'), 'LinkType', '__httpwww_stibosystems_comstep_CrossReferenceTypesType_httpwww_stibosystems_comstepLinkType', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2556, 16), )

    
    LinkType = property(__LinkType.value, __LinkType.set, None, None)

    _ElementMap.update({
        __AssetCrossReferenceType.name() : __AssetCrossReferenceType,
        __ProductCrossReferenceType.name() : __ProductCrossReferenceType,
        __ClassificationCrossReferenceType.name() : __ClassificationCrossReferenceType,
        __EntityCrossReferenceType.name() : __EntityCrossReferenceType,
        __ClassificationProductLinkType.name() : __ClassificationProductLinkType,
        __ContextCrossReferenceType.name() : __ContextCrossReferenceType,
        __WorkspaceCrossReferenceType.name() : __WorkspaceCrossReferenceType,
        __LinkType.name() : __LinkType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CrossReferenceTypesType = CrossReferenceTypesType
Namespace.addCategoryObject('typeBinding', 'CrossReferenceTypesType', CrossReferenceTypesType)


# Complex type {http://www.stibosystems.com/step}CurrentTasksType with content type ELEMENT_ONLY
class CurrentTasksType (pyxb.binding.basis.complexTypeDefinition):
    """
                Contains information about current workflow tasks for the containing object.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CurrentTasksType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2560, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Task uses Python identifier Task
    __Task = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Task'), 'Task', '__httpwww_stibosystems_comstep_CurrentTasksType_httpwww_stibosystems_comstepTask', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2567, 12), )

    
    Task = property(__Task.value, __Task.set, None, None)

    _ElementMap.update({
        __Task.name() : __Task
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CurrentTasksType = CurrentTasksType
Namespace.addCategoryObject('typeBinding', 'CurrentTasksType', CurrentTasksType)


# Complex type {http://www.stibosystems.com/step}DataContainersType with content type ELEMENT_ONLY
class DataContainersType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for data containers.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DataContainersType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2570, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}DataContainer uses Python identifier DataContainer
    __DataContainer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DataContainer'), 'DataContainer', '__httpwww_stibosystems_comstep_DataContainersType_httpwww_stibosystems_comstepDataContainer', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2577, 12), )

    
    DataContainer = property(__DataContainer.value, __DataContainer.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MultiDataContainer uses Python identifier MultiDataContainer
    __MultiDataContainer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MultiDataContainer'), 'MultiDataContainer', '__httpwww_stibosystems_comstep_DataContainersType_httpwww_stibosystems_comstepMultiDataContainer', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2578, 12), )

    
    MultiDataContainer = property(__MultiDataContainer.value, __MultiDataContainer.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteDataContainer uses Python identifier DeleteDataContainer
    __DeleteDataContainer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteDataContainer'), 'DeleteDataContainer', '__httpwww_stibosystems_comstep_DataContainersType_httpwww_stibosystems_comstepDeleteDataContainer', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2579, 12), )

    
    DeleteDataContainer = property(__DeleteDataContainer.value, __DeleteDataContainer.set, None, None)

    _ElementMap.update({
        __DataContainer.name() : __DataContainer,
        __MultiDataContainer.name() : __MultiDataContainer,
        __DeleteDataContainer.name() : __DeleteDataContainer
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DataContainersType = DataContainersType
Namespace.addCategoryObject('typeBinding', 'DataContainersType', DataContainersType)


# Complex type {http://www.stibosystems.com/step}DataContainerTypesType with content type ELEMENT_ONLY
class DataContainerTypesType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for data container types.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DataContainerTypesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2640, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}DataContainerType uses Python identifier DataContainerType
    __DataContainerType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DataContainerType'), 'DataContainerType', '__httpwww_stibosystems_comstep_DataContainerTypesType_httpwww_stibosystems_comstepDataContainerType', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2647, 12), )

    
    DataContainerType = property(__DataContainerType.value, __DataContainerType.set, None, None)

    _ElementMap.update({
        __DataContainerType.name() : __DataContainerType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DataContainerTypesType = DataContainerTypesType
Namespace.addCategoryObject('typeBinding', 'DataContainerTypesType', DataContainerTypesType)


# Complex type {http://www.stibosystems.com/step}DeleteAssetsType with content type ELEMENT_ONLY
class DeleteAssetsType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for asset deletion information.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteAssetsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2782, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}DeleteAsset uses Python identifier DeleteAsset
    __DeleteAsset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteAsset'), 'DeleteAsset', '__httpwww_stibosystems_comstep_DeleteAssetsType_httpwww_stibosystems_comstepDeleteAsset', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2789, 12), )

    
    DeleteAsset = property(__DeleteAsset.value, __DeleteAsset.set, None, None)

    _ElementMap.update({
        __DeleteAsset.name() : __DeleteAsset
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeleteAssetsType = DeleteAssetsType
Namespace.addCategoryObject('typeBinding', 'DeleteAssetsType', DeleteAssetsType)


# Complex type {http://www.stibosystems.com/step}DeleteAttributesType with content type ELEMENT_ONLY
class DeleteAttributesType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for attribute and attribute group deletion information.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteAttributesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2831, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}DeleteAttributeOrGroup uses Python identifier DeleteAttributeOrGroup
    __DeleteAttributeOrGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteAttributeOrGroup'), 'DeleteAttributeOrGroup', '__httpwww_stibosystems_comstep_DeleteAttributesType_httpwww_stibosystems_comstepDeleteAttributeOrGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2838, 12), )

    
    DeleteAttributeOrGroup = property(__DeleteAttributeOrGroup.value, __DeleteAttributeOrGroup.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteAttribute uses Python identifier DeleteAttribute
    __DeleteAttribute = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteAttribute'), 'DeleteAttribute', '__httpwww_stibosystems_comstep_DeleteAttributesType_httpwww_stibosystems_comstepDeleteAttribute', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2840, 12), )

    
    DeleteAttribute = property(__DeleteAttribute.value, __DeleteAttribute.set, None, None)

    _ElementMap.update({
        __DeleteAttributeOrGroup.name() : __DeleteAttributeOrGroup,
        __DeleteAttribute.name() : __DeleteAttribute
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeleteAttributesType = DeleteAttributesType
Namespace.addCategoryObject('typeBinding', 'DeleteAttributesType', DeleteAttributesType)


# Complex type {http://www.stibosystems.com/step}DeleteClassificationsType with content type ELEMENT_ONLY
class DeleteClassificationsType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for classification deletion information.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteClassificationsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2882, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}DeleteClassification uses Python identifier DeleteClassification
    __DeleteClassification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteClassification'), 'DeleteClassification', '__httpwww_stibosystems_comstep_DeleteClassificationsType_httpwww_stibosystems_comstepDeleteClassification', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2889, 12), )

    
    DeleteClassification = property(__DeleteClassification.value, __DeleteClassification.set, None, None)

    _ElementMap.update({
        __DeleteClassification.name() : __DeleteClassification
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeleteClassificationsType = DeleteClassificationsType
Namespace.addCategoryObject('typeBinding', 'DeleteClassificationsType', DeleteClassificationsType)


# Complex type {http://www.stibosystems.com/step}DeleteEntitiesType with content type ELEMENT_ONLY
class DeleteEntitiesType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for entity deletion information.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteEntitiesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3004, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}DeleteEntity uses Python identifier DeleteEntity
    __DeleteEntity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteEntity'), 'DeleteEntity', '__httpwww_stibosystems_comstep_DeleteEntitiesType_httpwww_stibosystems_comstepDeleteEntity', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3011, 12), )

    
    DeleteEntity = property(__DeleteEntity.value, __DeleteEntity.set, None, None)

    _ElementMap.update({
        __DeleteEntity.name() : __DeleteEntity
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeleteEntitiesType = DeleteEntitiesType
Namespace.addCategoryObject('typeBinding', 'DeleteEntitiesType', DeleteEntitiesType)


# Complex type {http://www.stibosystems.com/step}DeleteListOfValuesType with content type ELEMENT_ONLY
class DeleteListOfValuesType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for LOV deletion information.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteListOfValuesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3014, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}DeleteListOfValue uses Python identifier DeleteListOfValue
    __DeleteListOfValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteListOfValue'), 'DeleteListOfValue', '__httpwww_stibosystems_comstep_DeleteListOfValuesType_httpwww_stibosystems_comstepDeleteListOfValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3021, 12), )

    
    DeleteListOfValue = property(__DeleteListOfValue.value, __DeleteListOfValue.set, None, None)

    _ElementMap.update({
        __DeleteListOfValue.name() : __DeleteListOfValue
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeleteListOfValuesType = DeleteListOfValuesType
Namespace.addCategoryObject('typeBinding', 'DeleteListOfValuesType', DeleteListOfValuesType)


# Complex type {http://www.stibosystems.com/step}DeleteProductsType with content type ELEMENT_ONLY
class DeleteProductsType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for product deletion information.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteProductsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3055, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}DeleteProduct uses Python identifier DeleteProduct
    __DeleteProduct = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteProduct'), 'DeleteProduct', '__httpwww_stibosystems_comstep_DeleteProductsType_httpwww_stibosystems_comstepDeleteProduct', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3062, 12), )

    
    DeleteProduct = property(__DeleteProduct.value, __DeleteProduct.set, None, None)

    _ElementMap.update({
        __DeleteProduct.name() : __DeleteProduct
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeleteProductsType = DeleteProductsType
Namespace.addCategoryObject('typeBinding', 'DeleteProductsType', DeleteProductsType)


# Complex type {http://www.stibosystems.com/step}DeleteUnitsType with content type ELEMENT_ONLY
class DeleteUnitsType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for unit and unit family deletion information.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteUnitsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3255, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}DeleteUnitOrFamily uses Python identifier DeleteUnitOrFamily
    __DeleteUnitOrFamily = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteUnitOrFamily'), 'DeleteUnitOrFamily', '__httpwww_stibosystems_comstep_DeleteUnitsType_httpwww_stibosystems_comstepDeleteUnitOrFamily', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3262, 12), )

    
    DeleteUnitOrFamily = property(__DeleteUnitOrFamily.value, __DeleteUnitOrFamily.set, None, None)

    _ElementMap.update({
        __DeleteUnitOrFamily.name() : __DeleteUnitOrFamily
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeleteUnitsType = DeleteUnitsType
Namespace.addCategoryObject('typeBinding', 'DeleteUnitsType', DeleteUnitsType)


# Complex type {http://www.stibosystems.com/step}DerivedEventTypesType with content type ELEMENT_ONLY
class DerivedEventTypesType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for derived event type definitions.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DerivedEventTypesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3299, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}DerivedEventType uses Python identifier DerivedEventType
    __DerivedEventType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DerivedEventType'), 'DerivedEventType', '__httpwww_stibosystems_comstep_DerivedEventTypesType_httpwww_stibosystems_comstepDerivedEventType', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3306, 12), )

    
    DerivedEventType = property(__DerivedEventType.value, __DerivedEventType.set, None, None)

    _ElementMap.update({
        __DerivedEventType.name() : __DerivedEventType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DerivedEventTypesType = DerivedEventTypesType
Namespace.addCategoryObject('typeBinding', 'DerivedEventTypesType', DerivedEventTypesType)


# Complex type {http://www.stibosystems.com/step}DimensionListType with content type ELEMENT_ONLY
class DimensionListType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container elements for dimensions.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DimensionListType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3357, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Dimension uses Python identifier Dimension
    __Dimension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Dimension'), 'Dimension', '__httpwww_stibosystems_comstep_DimensionListType_httpwww_stibosystems_comstepDimension', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3364, 12), )

    
    Dimension = property(__Dimension.value, __Dimension.set, None, None)

    _ElementMap.update({
        __Dimension.name() : __Dimension
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DimensionListType = DimensionListType
Namespace.addCategoryObject('typeBinding', 'DimensionListType', DimensionListType)


# Complex type {http://www.stibosystems.com/step}ECatalogsType with content type ELEMENT_ONLY
class ECatalogsType (pyxb.binding.basis.complexTypeDefinition):
    """
                Element that holds all top level eCatalogs.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ECatalogsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3454, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}ECatalog uses Python identifier ECatalog
    __ECatalog = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ECatalog'), 'ECatalog', '__httpwww_stibosystems_comstep_ECatalogsType_httpwww_stibosystems_comstepECatalog', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3461, 12), )

    
    ECatalog = property(__ECatalog.value, __ECatalog.set, None, None)

    _ElementMap.update({
        __ECatalog.name() : __ECatalog
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ECatalogsType = ECatalogsType
Namespace.addCategoryObject('typeBinding', 'ECatalogsType', ECatalogsType)


# Complex type {http://www.stibosystems.com/step}EdgeTypesType with content type ELEMENT_ONLY
class EdgeTypesType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for edge / link types that come with the system.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EdgeTypesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3493, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}EdgeType uses Python identifier EdgeType
    __EdgeType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EdgeType'), 'EdgeType', '__httpwww_stibosystems_comstep_EdgeTypesType_httpwww_stibosystems_comstepEdgeType', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3500, 12), )

    
    EdgeType = property(__EdgeType.value, __EdgeType.set, None, None)

    _ElementMap.update({
        __EdgeType.name() : __EdgeType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.EdgeTypesType = EdgeTypesType
Namespace.addCategoryObject('typeBinding', 'EdgeTypesType', EdgeTypesType)


# Complex type {http://www.stibosystems.com/step}EmbeddedMatchCodeType with content type ELEMENT_ONLY
class EmbeddedMatchCodeType (pyxb.binding.basis.complexTypeDefinition):
    """
                A configuration of an embedded match code.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EmbeddedMatchCodeType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3503, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}ValidObjectType uses Python identifier ValidObjectType
    __ValidObjectType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValidObjectType'), 'ValidObjectType', '__httpwww_stibosystems_comstep_EmbeddedMatchCodeType_httpwww_stibosystems_comstepValidObjectType', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3510, 12), )

    
    ValidObjectType = property(__ValidObjectType.value, __ValidObjectType.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ValidForProductHierarchy uses Python identifier ValidForProductHierarchy
    __ValidForProductHierarchy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValidForProductHierarchy'), 'ValidForProductHierarchy', '__httpwww_stibosystems_comstep_EmbeddedMatchCodeType_httpwww_stibosystems_comstepValidForProductHierarchy', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3512, 16), )

    
    ValidForProductHierarchy = property(__ValidForProductHierarchy.value, __ValidForProductHierarchy.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ValidForClassificationHierarchy uses Python identifier ValidForClassificationHierarchy
    __ValidForClassificationHierarchy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValidForClassificationHierarchy'), 'ValidForClassificationHierarchy', '__httpwww_stibosystems_comstep_EmbeddedMatchCodeType_httpwww_stibosystems_comstepValidForClassificationHierarchy', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3513, 16), )

    
    ValidForClassificationHierarchy = property(__ValidForClassificationHierarchy.value, __ValidForClassificationHierarchy.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ValidForEntityHierarchy uses Python identifier ValidForEntityHierarchy
    __ValidForEntityHierarchy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValidForEntityHierarchy'), 'ValidForEntityHierarchy', '__httpwww_stibosystems_comstep_EmbeddedMatchCodeType_httpwww_stibosystems_comstepValidForEntityHierarchy', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3514, 16), )

    
    ValidForEntityHierarchy = property(__ValidForEntityHierarchy.value, __ValidForEntityHierarchy.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ValidForCollection uses Python identifier ValidForCollection
    __ValidForCollection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValidForCollection'), 'ValidForCollection', '__httpwww_stibosystems_comstep_EmbeddedMatchCodeType_httpwww_stibosystems_comstepValidForCollection', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3515, 16), )

    
    ValidForCollection = property(__ValidForCollection.value, __ValidForCollection.set, None, None)

    _ElementMap.update({
        __ValidObjectType.name() : __ValidObjectType,
        __ValidForProductHierarchy.name() : __ValidForProductHierarchy,
        __ValidForClassificationHierarchy.name() : __ValidForClassificationHierarchy,
        __ValidForEntityHierarchy.name() : __ValidForEntityHierarchy,
        __ValidForCollection.name() : __ValidForCollection
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.EmbeddedMatchCodeType = EmbeddedMatchCodeType
Namespace.addCategoryObject('typeBinding', 'EmbeddedMatchCodeType', EmbeddedMatchCodeType)


# Complex type {http://www.stibosystems.com/step}EventProcessorsType with content type ELEMENT_ONLY
class EventProcessorsType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for event processors.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EventProcessorsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3822, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}EventProcessor uses Python identifier EventProcessor
    __EventProcessor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EventProcessor'), 'EventProcessor', '__httpwww_stibosystems_comstep_EventProcessorsType_httpwww_stibosystems_comstepEventProcessor', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3829, 12), )

    
    EventProcessor = property(__EventProcessor.value, __EventProcessor.set, None, None)

    _ElementMap.update({
        __EventProcessor.name() : __EventProcessor
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.EventProcessorsType = EventProcessorsType
Namespace.addCategoryObject('typeBinding', 'EventProcessorsType', EventProcessorsType)


# Complex type {http://www.stibosystems.com/step}EventQueuesType with content type ELEMENT_ONLY
class EventQueuesType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for event queues not associated with an outbound integration endpoint or event
                processor.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EventQueuesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3922, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}EventQueue uses Python identifier EventQueue
    __EventQueue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EventQueue'), 'EventQueue', '__httpwww_stibosystems_comstep_EventQueuesType_httpwww_stibosystems_comstepEventQueue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3930, 12), )

    
    EventQueue = property(__EventQueue.value, __EventQueue.set, None, None)

    _ElementMap.update({
        __EventQueue.name() : __EventQueue
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.EventQueuesType = EventQueuesType
Namespace.addCategoryObject('typeBinding', 'EventQueuesType', EventQueuesType)


# Complex type {http://www.stibosystems.com/step}ExportConfigurationsType with content type ELEMENT_ONLY
class ExportConfigurationsType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for export configurations.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ExportConfigurationsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3987, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}ExportConfiguration uses Python identifier ExportConfiguration
    __ExportConfiguration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExportConfiguration'), 'ExportConfiguration', '__httpwww_stibosystems_comstep_ExportConfigurationsType_httpwww_stibosystems_comstepExportConfiguration', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3994, 12), )

    
    ExportConfiguration = property(__ExportConfiguration.value, __ExportConfiguration.set, None, None)

    _ElementMap.update({
        __ExportConfiguration.name() : __ExportConfiguration
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ExportConfigurationsType = ExportConfigurationsType
Namespace.addCategoryObject('typeBinding', 'ExportConfigurationsType', ExportConfigurationsType)


# Complex type {http://www.stibosystems.com/step}TranslationConfigurationsType with content type ELEMENT_ONLY
class TranslationConfigurationsType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for translation configurations.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TranslationConfigurationsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3997, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}TranslationConfiguration uses Python identifier TranslationConfiguration
    __TranslationConfiguration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TranslationConfiguration'), 'TranslationConfiguration', '__httpwww_stibosystems_comstep_TranslationConfigurationsType_httpwww_stibosystems_comstepTranslationConfiguration', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4004, 12), )

    
    TranslationConfiguration = property(__TranslationConfiguration.value, __TranslationConfiguration.set, None, None)

    _ElementMap.update({
        __TranslationConfiguration.name() : __TranslationConfiguration
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.TranslationConfigurationsType = TranslationConfigurationsType
Namespace.addCategoryObject('typeBinding', 'TranslationConfigurationsType', TranslationConfigurationsType)


# Complex type {http://www.stibosystems.com/step}FormattingType with content type MIXED
class FormattingType (pyxb.binding.basis.complexTypeDefinition):
    """
                Tag output conversions. Describes how tag is outputted to a given format.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FormattingType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4069, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute Format uses Python identifier Format
    __Format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Format'), 'Format', '__httpwww_stibosystems_comstep_FormattingType_Format', pyxb.binding.datatypes.string, required=True)
    __Format._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4075, 8)
    __Format._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4075, 8)
    
    Format = property(__Format.value, __Format.set, None, '\n                    Output format.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Format.name() : __Format
    })
_module_typeBindings.FormattingType = FormattingType
Namespace.addCategoryObject('typeBinding', 'FormattingType', FormattingType)


# Complex type {http://www.stibosystems.com/step}GlobalSettingsType with content type ELEMENT_ONLY
class GlobalSettingsType (pyxb.binding.basis.complexTypeDefinition):
    """
                Contains global settings of the STEP system.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GlobalSettingsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4166, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}CalculatedAttributeSettings uses Python identifier CalculatedAttributeSettings
    __CalculatedAttributeSettings = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CalculatedAttributeSettings'), 'CalculatedAttributeSettings', '__httpwww_stibosystems_comstep_GlobalSettingsType_httpwww_stibosystems_comstepCalculatedAttributeSettings', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4173, 12), )

    
    CalculatedAttributeSettings = property(__CalculatedAttributeSettings.value, __CalculatedAttributeSettings.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AssetSettings uses Python identifier AssetSettings
    __AssetSettings = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssetSettings'), 'AssetSettings', '__httpwww_stibosystems_comstep_GlobalSettingsType_httpwww_stibosystems_comstepAssetSettings', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4174, 12), )

    
    AssetSettings = property(__AssetSettings.value, __AssetSettings.set, None, None)

    _ElementMap.update({
        __CalculatedAttributeSettings.name() : __CalculatedAttributeSettings,
        __AssetSettings.name() : __AssetSettings
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.GlobalSettingsType = GlobalSettingsType
Namespace.addCategoryObject('typeBinding', 'GlobalSettingsType', GlobalSettingsType)


# Complex type {http://www.stibosystems.com/step}GUISetupType with content type ELEMENT_ONLY
class GUISetupType (pyxb.binding.basis.complexTypeDefinition):
    """
                The elements of the Workbench GUISetup, used to enable or disable menu items, workspaces and contexts
                for users and groups.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GUISetupType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4177, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}GUISetupEnabled uses Python identifier GUISetupEnabled
    __GUISetupEnabled = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GUISetupEnabled'), 'GUISetupEnabled', '__httpwww_stibosystems_comstep_GUISetupType_httpwww_stibosystems_comstepGUISetupEnabled', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4186, 16), )

    
    GUISetupEnabled = property(__GUISetupEnabled.value, __GUISetupEnabled.set, None, None)

    
    # Element {http://www.stibosystems.com/step}GUISetupDisabled uses Python identifier GUISetupDisabled
    __GUISetupDisabled = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GUISetupDisabled'), 'GUISetupDisabled', '__httpwww_stibosystems_comstep_GUISetupType_httpwww_stibosystems_comstepGUISetupDisabled', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4187, 16), )

    
    GUISetupDisabled = property(__GUISetupDisabled.value, __GUISetupDisabled.set, None, None)

    
    # Element {http://www.stibosystems.com/step}GUISetupAdvanced uses Python identifier GUISetupAdvanced
    __GUISetupAdvanced = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GUISetupAdvanced'), 'GUISetupAdvanced', '__httpwww_stibosystems_comstep_GUISetupType_httpwww_stibosystems_comstepGUISetupAdvanced', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4188, 16), )

    
    GUISetupAdvanced = property(__GUISetupAdvanced.value, __GUISetupAdvanced.set, None, None)

    _ElementMap.update({
        __GUISetupEnabled.name() : __GUISetupEnabled,
        __GUISetupDisabled.name() : __GUISetupDisabled,
        __GUISetupAdvanced.name() : __GUISetupAdvanced
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.GUISetupType = GUISetupType
Namespace.addCategoryObject('typeBinding', 'GUISetupType', GUISetupType)


# Complex type {http://www.stibosystems.com/step}ImportConfigurationsType with content type ELEMENT_ONLY
class ImportConfigurationsType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for import configurations.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ImportConfigurationsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4316, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}ImportConfiguration uses Python identifier ImportConfiguration
    __ImportConfiguration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ImportConfiguration'), 'ImportConfiguration', '__httpwww_stibosystems_comstep_ImportConfigurationsType_httpwww_stibosystems_comstepImportConfiguration', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4323, 12), )

    
    ImportConfiguration = property(__ImportConfiguration.value, __ImportConfiguration.set, None, None)

    _ElementMap.update({
        __ImportConfiguration.name() : __ImportConfiguration
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ImportConfigurationsType = ImportConfigurationsType
Namespace.addCategoryObject('typeBinding', 'ImportConfigurationsType', ImportConfigurationsType)


# Complex type {http://www.stibosystems.com/step}ImageConversionConfigurationsType with content type ELEMENT_ONLY
class ImageConversionConfigurationsType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for image conversion configurations.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ImageConversionConfigurationsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4326, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}ImageConversionConfiguration uses Python identifier ImageConversionConfiguration
    __ImageConversionConfiguration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ImageConversionConfiguration'), 'ImageConversionConfiguration', '__httpwww_stibosystems_comstep_ImageConversionConfigurationsType_httpwww_stibosystems_comstepImageConversionConfiguration', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4333, 12), )

    
    ImageConversionConfiguration = property(__ImageConversionConfiguration.value, __ImageConversionConfiguration.set, None, None)

    _ElementMap.update({
        __ImageConversionConfiguration.name() : __ImageConversionConfiguration
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ImageConversionConfigurationsType = ImageConversionConfigurationsType
Namespace.addCategoryObject('typeBinding', 'ImageConversionConfigurationsType', ImageConversionConfigurationsType)


# Complex type {http://www.stibosystems.com/step}IntegrationEndpointsType with content type ELEMENT_ONLY
class IntegrationEndpointsType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for inbound, outbound and gateway integration endpoints.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IntegrationEndpointsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4565, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}OutBoundIntegrationEndpoint uses Python identifier OutBoundIntegrationEndpoint
    __OutBoundIntegrationEndpoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OutBoundIntegrationEndpoint'), 'OutBoundIntegrationEndpoint', '__httpwww_stibosystems_comstep_IntegrationEndpointsType_httpwww_stibosystems_comstepOutBoundIntegrationEndpoint', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4572, 12), )

    
    OutBoundIntegrationEndpoint = property(__OutBoundIntegrationEndpoint.value, __OutBoundIntegrationEndpoint.set, None, None)

    
    # Element {http://www.stibosystems.com/step}InBoundIntegrationEndpoint uses Python identifier InBoundIntegrationEndpoint
    __InBoundIntegrationEndpoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InBoundIntegrationEndpoint'), 'InBoundIntegrationEndpoint', '__httpwww_stibosystems_comstep_IntegrationEndpointsType_httpwww_stibosystems_comstepInBoundIntegrationEndpoint', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4573, 12), )

    
    InBoundIntegrationEndpoint = property(__InBoundIntegrationEndpoint.value, __InBoundIntegrationEndpoint.set, None, None)

    
    # Element {http://www.stibosystems.com/step}GatewayIntegrationEndpoint uses Python identifier GatewayIntegrationEndpoint
    __GatewayIntegrationEndpoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GatewayIntegrationEndpoint'), 'GatewayIntegrationEndpoint', '__httpwww_stibosystems_comstep_IntegrationEndpointsType_httpwww_stibosystems_comstepGatewayIntegrationEndpoint', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4574, 12), )

    
    GatewayIntegrationEndpoint = property(__GatewayIntegrationEndpoint.value, __GatewayIntegrationEndpoint.set, None, None)

    _ElementMap.update({
        __OutBoundIntegrationEndpoint.name() : __OutBoundIntegrationEndpoint,
        __InBoundIntegrationEndpoint.name() : __InBoundIntegrationEndpoint,
        __GatewayIntegrationEndpoint.name() : __GatewayIntegrationEndpoint
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.IntegrationEndpointsType = IntegrationEndpointsType
Namespace.addCategoryObject('typeBinding', 'IntegrationEndpointsType', IntegrationEndpointsType)


# Complex type {http://www.stibosystems.com/step}KeyFormulaType with content type MIXED
class KeyFormulaType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}KeyFormulaType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'KeyFormulaType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4619, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.KeyFormulaType = KeyFormulaType
Namespace.addCategoryObject('typeBinding', 'KeyFormulaType', KeyFormulaType)


# Complex type {http://www.stibosystems.com/step}KeysType with content type ELEMENT_ONLY
class KeysType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for key definitions.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'KeysType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4620, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Key uses Python identifier Key
    __Key = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Key'), 'Key', '__httpwww_stibosystems_comstep_KeysType_httpwww_stibosystems_comstepKey', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4627, 12), )

    
    Key = property(__Key.value, __Key.set, None, None)

    _ElementMap.update({
        __Key.name() : __Key
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.KeysType = KeysType
Namespace.addCategoryObject('typeBinding', 'KeysType', KeysType)


# Complex type {http://www.stibosystems.com/step}LayerMappingType with content type EMPTY
class LayerMappingType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}LayerMappingType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LayerMappingType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4630, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute Template uses Python identifier Template
    __Template = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Template'), 'Template', '__httpwww_stibosystems_comstep_LayerMappingType_Template', pyxb.binding.datatypes.string, required=True)
    __Template._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4631, 8)
    __Template._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4631, 8)
    
    Template = property(__Template.value, __Template.set, None, None)

    
    # Attribute Document uses Python identifier Document
    __Document = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Document'), 'Document', '__httpwww_stibosystems_comstep_LayerMappingType_Document', pyxb.binding.datatypes.string, required=True)
    __Document._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4632, 8)
    __Document._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4632, 8)
    
    Document = property(__Document.value, __Document.set, None, None)

    
    # Attribute Owner uses Python identifier Owner
    __Owner = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Owner'), 'Owner', '__httpwww_stibosystems_comstep_LayerMappingType_Owner', pyxb.binding.datatypes.boolean, required=True)
    __Owner._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4633, 8)
    __Owner._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4633, 8)
    
    Owner = property(__Owner.value, __Owner.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Template.name() : __Template,
        __Document.name() : __Document,
        __Owner.name() : __Owner
    })
_module_typeBindings.LayerMappingType = LayerMappingType
Namespace.addCategoryObject('typeBinding', 'LayerMappingType', LayerMappingType)


# Complex type {http://www.stibosystems.com/step}LinkAspectDescriptorsType with content type ELEMENT_ONLY
class LinkAspectDescriptorsType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}LinkAspectDescriptorsType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LinkAspectDescriptorsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4635, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}LinkAspectDescriptor uses Python identifier LinkAspectDescriptor
    __LinkAspectDescriptor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LinkAspectDescriptor'), 'LinkAspectDescriptor', '__httpwww_stibosystems_comstep_LinkAspectDescriptorsType_httpwww_stibosystems_comstepLinkAspectDescriptor', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4637, 12), )

    
    LinkAspectDescriptor = property(__LinkAspectDescriptor.value, __LinkAspectDescriptor.set, None, None)

    _ElementMap.update({
        __LinkAspectDescriptor.name() : __LinkAspectDescriptor
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.LinkAspectDescriptorsType = LinkAspectDescriptorsType
Namespace.addCategoryObject('typeBinding', 'LinkAspectDescriptorsType', LinkAspectDescriptorsType)


# Complex type {http://www.stibosystems.com/step}LinkAspectDescriptorType with content type ELEMENT_ONLY
class LinkAspectDescriptorType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}LinkAspectDescriptorType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LinkAspectDescriptorType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4640, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpwww_stibosystems_comstep_LinkAspectDescriptorType_id', pyxb.binding.datatypes.string, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4644, 8)
    __id._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4644, 8)
    
    id = property(__id.value, __id.set, None, '\n                    ID of the LinkAspectDescriptor element.\n                ')

    _HasWildcardElement = True
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.LinkAspectDescriptorType = LinkAspectDescriptorType
Namespace.addCategoryObject('typeBinding', 'LinkAspectDescriptorType', LinkAspectDescriptorType)


# Complex type {http://www.stibosystems.com/step}ListOfValuesGroupListType with content type ELEMENT_ONLY
class ListOfValuesGroupListType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element fro LOV groups.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ListOfValuesGroupListType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4703, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}ListOfValuesGroup uses Python identifier ListOfValuesGroup
    __ListOfValuesGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ListOfValuesGroup'), 'ListOfValuesGroup', '__httpwww_stibosystems_comstep_ListOfValuesGroupListType_httpwww_stibosystems_comstepListOfValuesGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4710, 12), )

    
    ListOfValuesGroup = property(__ListOfValuesGroup.value, __ListOfValuesGroup.set, None, None)

    _ElementMap.update({
        __ListOfValuesGroup.name() : __ListOfValuesGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ListOfValuesGroupListType = ListOfValuesGroupListType
Namespace.addCategoryObject('typeBinding', 'ListOfValuesGroupListType', ListOfValuesGroupListType)


# Complex type {http://www.stibosystems.com/step}ListsOfValuesType with content type ELEMENT_ONLY
class ListsOfValuesType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for LOVs.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ListsOfValuesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4818, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}ListOfValue uses Python identifier ListOfValue
    __ListOfValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ListOfValue'), 'ListOfValue', '__httpwww_stibosystems_comstep_ListsOfValuesType_httpwww_stibosystems_comstepListOfValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4825, 12), )

    
    ListOfValue = property(__ListOfValue.value, __ListOfValue.set, None, None)

    _ElementMap.update({
        __ListOfValue.name() : __ListOfValue
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ListsOfValuesType = ListsOfValuesType
Namespace.addCategoryObject('typeBinding', 'ListsOfValuesType', ListsOfValuesType)


# Complex type {http://www.stibosystems.com/step}MatchCodesType with content type ELEMENT_ONLY
class MatchCodesType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for match codes.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MatchCodesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4893, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}MatchCode uses Python identifier MatchCode
    __MatchCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MatchCode'), 'MatchCode', '__httpwww_stibosystems_comstep_MatchCodesType_httpwww_stibosystems_comstepMatchCode', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4900, 12), )

    
    MatchCode = property(__MatchCode.value, __MatchCode.set, None, None)

    _ElementMap.update({
        __MatchCode.name() : __MatchCode
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MatchCodesType = MatchCodesType
Namespace.addCategoryObject('typeBinding', 'MatchCodesType', MatchCodesType)


# Complex type {http://www.stibosystems.com/step}MatchCodeTemplateType with content type MIXED
class MatchCodeTemplateType (pyxb.binding.basis.complexTypeDefinition):
    """
                The encoded template associated with a match code
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MatchCodeTemplateType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4903, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MatchCodeTemplateType = MatchCodeTemplateType
Namespace.addCategoryObject('typeBinding', 'MatchCodeTemplateType', MatchCodeTemplateType)


# Complex type {http://www.stibosystems.com/step}MatchingAlgorithmConfigurationType with content type MIXED
class MatchingAlgorithmConfigurationType (pyxb.binding.basis.complexTypeDefinition):
    """
                The encoded configuration associated with a matching algorithm.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MatchingAlgorithmConfigurationType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4967, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MatchingAlgorithmConfigurationType = MatchingAlgorithmConfigurationType
Namespace.addCategoryObject('typeBinding', 'MatchingAlgorithmConfigurationType', MatchingAlgorithmConfigurationType)


# Complex type {http://www.stibosystems.com/step}MatchingAlgorithmsType with content type ELEMENT_ONLY
class MatchingAlgorithmsType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for matching algorithms.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MatchingAlgorithmsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4974, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}MatchingAlgorithm uses Python identifier MatchingAlgorithm
    __MatchingAlgorithm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MatchingAlgorithm'), 'MatchingAlgorithm', '__httpwww_stibosystems_comstep_MatchingAlgorithmsType_httpwww_stibosystems_comstepMatchingAlgorithm', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4981, 12), )

    
    MatchingAlgorithm = property(__MatchingAlgorithm.value, __MatchingAlgorithm.set, None, None)

    _ElementMap.update({
        __MatchingAlgorithm.name() : __MatchingAlgorithm
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MatchingAlgorithmsType = MatchingAlgorithmsType
Namespace.addCategoryObject('typeBinding', 'MatchingAlgorithmsType', MatchingAlgorithmsType)


# Complex type {http://www.stibosystems.com/step}MetaDataType with content type ELEMENT_ONLY
class MetaDataType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents metadata for its parent element.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MetaDataType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5035, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Value uses Python identifier Value
    __Value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Value'), 'Value', '__httpwww_stibosystems_comstep_MetaDataType_httpwww_stibosystems_comstepValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5042, 12), )

    
    Value = property(__Value.value, __Value.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MultiValue uses Python identifier MultiValue
    __MultiValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MultiValue'), 'MultiValue', '__httpwww_stibosystems_comstep_MetaDataType_httpwww_stibosystems_comstepMultiValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5043, 12), )

    
    MultiValue = property(__MultiValue.value, __MultiValue.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ValueGroup uses Python identifier ValueGroup
    __ValueGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValueGroup'), 'ValueGroup', '__httpwww_stibosystems_comstep_MetaDataType_httpwww_stibosystems_comstepValueGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5044, 12), )

    
    ValueGroup = property(__ValueGroup.value, __ValueGroup.set, None, None)

    _ElementMap.update({
        __Value.name() : __Value,
        __MultiValue.name() : __MultiValue,
        __ValueGroup.name() : __ValueGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MetaDataType = MetaDataType
Namespace.addCategoryObject('typeBinding', 'MetaDataType', MetaDataType)


# Complex type {http://www.stibosystems.com/step}MIMETypeType with content type MIXED
class MIMETypeType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}MIMETypeType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MIMETypeType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5047, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MIMETypeType = MIMETypeType
Namespace.addCategoryObject('typeBinding', 'MIMETypeType', MIMETypeType)


# Complex type {http://www.stibosystems.com/step}MissingObjectsType with content type ELEMENT_ONLY
class MissingObjectsType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}MissingObjectsType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MissingObjectsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5048, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Classifications uses Python identifier Classifications
    __Classifications = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Classifications'), 'Classifications', '__httpwww_stibosystems_comstep_MissingObjectsType_httpwww_stibosystems_comstepClassifications', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5050, 12), )

    
    Classifications = property(__Classifications.value, __Classifications.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Products uses Python identifier Products
    __Products = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Products'), 'Products', '__httpwww_stibosystems_comstep_MissingObjectsType_httpwww_stibosystems_comstepProducts', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5051, 12), )

    
    Products = property(__Products.value, __Products.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Assets uses Python identifier Assets
    __Assets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Assets'), 'Assets', '__httpwww_stibosystems_comstep_MissingObjectsType_httpwww_stibosystems_comstepAssets', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5052, 12), )

    
    Assets = property(__Assets.value, __Assets.set, None, None)

    
    # Element {http://www.stibosystems.com/step}PublicationGroups uses Python identifier PublicationGroups
    __PublicationGroups = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PublicationGroups'), 'PublicationGroups', '__httpwww_stibosystems_comstep_MissingObjectsType_httpwww_stibosystems_comstepPublicationGroups', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5053, 12), )

    
    PublicationGroups = property(__PublicationGroups.value, __PublicationGroups.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Publication uses Python identifier Publication
    __Publication = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Publication'), 'Publication', '__httpwww_stibosystems_comstep_MissingObjectsType_httpwww_stibosystems_comstepPublication', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5054, 12), )

    
    Publication = property(__Publication.value, __Publication.set, None, None)

    
    # Element {http://www.stibosystems.com/step}PlannedPage uses Python identifier PlannedPage
    __PlannedPage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PlannedPage'), 'PlannedPage', '__httpwww_stibosystems_comstep_MissingObjectsType_httpwww_stibosystems_comstepPlannedPage', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5055, 12), )

    
    PlannedPage = property(__PlannedPage.value, __PlannedPage.set, None, None)

    _ElementMap.update({
        __Classifications.name() : __Classifications,
        __Products.name() : __Products,
        __Assets.name() : __Assets,
        __PublicationGroups.name() : __PublicationGroups,
        __Publication.name() : __Publication,
        __PlannedPage.name() : __PlannedPage
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MissingObjectsType = MissingObjectsType
Namespace.addCategoryObject('typeBinding', 'MissingObjectsType', MissingObjectsType)


# Complex type {http://www.stibosystems.com/step}ModelType with content type ELEMENT_ONLY
class ModelType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a component model.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ModelType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5058, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}NodeAspectDescriptors uses Python identifier NodeAspectDescriptors
    __NodeAspectDescriptors = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NodeAspectDescriptors'), 'NodeAspectDescriptors', '__httpwww_stibosystems_comstep_ModelType_httpwww_stibosystems_comstepNodeAspectDescriptors', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5065, 12), )

    
    NodeAspectDescriptors = property(__NodeAspectDescriptors.value, __NodeAspectDescriptors.set, None, None)

    
    # Element {http://www.stibosystems.com/step}LinkAspectDescriptors uses Python identifier LinkAspectDescriptors
    __LinkAspectDescriptors = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LinkAspectDescriptors'), 'LinkAspectDescriptors', '__httpwww_stibosystems_comstep_ModelType_httpwww_stibosystems_comstepLinkAspectDescriptors', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5066, 12), )

    
    LinkAspectDescriptors = property(__LinkAspectDescriptors.value, __LinkAspectDescriptors.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ValueAspectDescriptors uses Python identifier ValueAspectDescriptors
    __ValueAspectDescriptors = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValueAspectDescriptors'), 'ValueAspectDescriptors', '__httpwww_stibosystems_comstep_ModelType_httpwww_stibosystems_comstepValueAspectDescriptors', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5067, 12), )

    
    ValueAspectDescriptors = property(__ValueAspectDescriptors.value, __ValueAspectDescriptors.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpwww_stibosystems_comstep_ModelType_id', pyxb.binding.datatypes.string, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5069, 8)
    __id._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5069, 8)
    
    id = property(__id.value, __id.set, None, '\n                    Component model ID.\n                ')

    _ElementMap.update({
        __NodeAspectDescriptors.name() : __NodeAspectDescriptors,
        __LinkAspectDescriptors.name() : __LinkAspectDescriptors,
        __ValueAspectDescriptors.name() : __ValueAspectDescriptors
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.ModelType = ModelType
Namespace.addCategoryObject('typeBinding', 'ModelType', ModelType)


# Complex type {http://www.stibosystems.com/step}NodeAspectDescriptorsType with content type ELEMENT_ONLY
class NodeAspectDescriptorsType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}NodeAspectDescriptorsType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NodeAspectDescriptorsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5140, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}NodeAspectDescriptor uses Python identifier NodeAspectDescriptor
    __NodeAspectDescriptor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NodeAspectDescriptor'), 'NodeAspectDescriptor', '__httpwww_stibosystems_comstep_NodeAspectDescriptorsType_httpwww_stibosystems_comstepNodeAspectDescriptor', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5142, 12), )

    
    NodeAspectDescriptor = property(__NodeAspectDescriptor.value, __NodeAspectDescriptor.set, None, None)

    _ElementMap.update({
        __NodeAspectDescriptor.name() : __NodeAspectDescriptor
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.NodeAspectDescriptorsType = NodeAspectDescriptorsType
Namespace.addCategoryObject('typeBinding', 'NodeAspectDescriptorsType', NodeAspectDescriptorsType)


# Complex type {http://www.stibosystems.com/step}NodeAspectDescriptorType with content type ELEMENT_ONLY
class NodeAspectDescriptorType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}NodeAspectDescriptorType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NodeAspectDescriptorType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5145, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpwww_stibosystems_comstep_NodeAspectDescriptorType_id', pyxb.binding.datatypes.string, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5149, 8)
    __id._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5149, 8)
    
    id = property(__id.value, __id.set, None, '\n                    ID of the NodeAspectDescriptor element.\n                ')

    _HasWildcardElement = True
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.NodeAspectDescriptorType = NodeAspectDescriptorType
Namespace.addCategoryObject('typeBinding', 'NodeAspectDescriptorType', NodeAspectDescriptorType)


# Complex type {http://www.stibosystems.com/step}NoteRecordType with content type MIXED
class NoteRecordType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}NoteRecordType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NoteRecordType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5178, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute Username uses Python identifier Username
    __Username = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Username'), 'Username', '__httpwww_stibosystems_comstep_NoteRecordType_Username', pyxb.binding.datatypes.string)
    __Username._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5179, 8)
    __Username._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5179, 8)
    
    Username = property(__Username.value, __Username.set, None, None)

    
    # Attribute Timestamp uses Python identifier Timestamp
    __Timestamp = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Timestamp'), 'Timestamp', '__httpwww_stibosystems_comstep_NoteRecordType_Timestamp', pyxb.binding.datatypes.string)
    __Timestamp._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5180, 8)
    __Timestamp._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5180, 8)
    
    Timestamp = property(__Timestamp.value, __Timestamp.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Username.name() : __Username,
        __Timestamp.name() : __Timestamp
    })
_module_typeBindings.NoteRecordType = NoteRecordType
Namespace.addCategoryObject('typeBinding', 'NoteRecordType', NoteRecordType)


# Complex type {http://www.stibosystems.com/step}PageContentsType with content type ELEMENT_ONLY
class PageContentsType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}PageContentsType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PageContentsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5539, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Frame uses Python identifier Frame
    __Frame = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Frame'), 'Frame', '__httpwww_stibosystems_comstep_PageContentsType_httpwww_stibosystems_comstepFrame', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5541, 12), )

    
    Frame = property(__Frame.value, __Frame.set, None, None)

    
    # Element {http://www.stibosystems.com/step}NoteFrame uses Python identifier NoteFrame
    __NoteFrame = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NoteFrame'), 'NoteFrame', '__httpwww_stibosystems_comstep_PageContentsType_httpwww_stibosystems_comstepNoteFrame', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5542, 12), )

    
    NoteFrame = property(__NoteFrame.value, __NoteFrame.set, None, None)

    
    # Element {http://www.stibosystems.com/step}GalleyFrame uses Python identifier GalleyFrame
    __GalleyFrame = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GalleyFrame'), 'GalleyFrame', '__httpwww_stibosystems_comstep_PageContentsType_httpwww_stibosystems_comstepGalleyFrame', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5543, 12), )

    
    GalleyFrame = property(__GalleyFrame.value, __GalleyFrame.set, None, None)

    _ElementMap.update({
        __Frame.name() : __Frame,
        __NoteFrame.name() : __NoteFrame,
        __GalleyFrame.name() : __GalleyFrame
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PageContentsType = PageContentsType
Namespace.addCategoryObject('typeBinding', 'PageContentsType', PageContentsType)


# Complex type {http://www.stibosystems.com/step}PagesType with content type ELEMENT_ONLY
class PagesType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}PagesType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PagesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5546, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Page uses Python identifier Page
    __Page = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Page'), 'Page', '__httpwww_stibosystems_comstep_PagesType_httpwww_stibosystems_comstepPage', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5548, 12), )

    
    Page = property(__Page.value, __Page.set, None, None)

    _ElementMap.update({
        __Page.name() : __Page
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PagesType = PagesType
Namespace.addCategoryObject('typeBinding', 'PagesType', PagesType)


# Complex type {http://www.stibosystems.com/step}PortalConfigurationsType with content type ELEMENT_ONLY
class PortalConfigurationsType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for portal / web UI configurations.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PortalConfigurationsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5588, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}PortalConfiguration uses Python identifier PortalConfiguration
    __PortalConfiguration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PortalConfiguration'), 'PortalConfiguration', '__httpwww_stibosystems_comstep_PortalConfigurationsType_httpwww_stibosystems_comstepPortalConfiguration', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5595, 12), )

    
    PortalConfiguration = property(__PortalConfiguration.value, __PortalConfiguration.set, None, None)

    _ElementMap.update({
        __PortalConfiguration.name() : __PortalConfiguration
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PortalConfigurationsType = PortalConfigurationsType
Namespace.addCategoryObject('typeBinding', 'PortalConfigurationsType', PortalConfigurationsType)


# Complex type {http://www.stibosystems.com/step}ProductTemplateType with content type ELEMENT_ONLY
class ProductTemplateType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}ProductTemplateType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProductTemplateType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6030, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Configuration uses Python identifier Configuration
    __Configuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), 'Configuration', '__httpwww_stibosystems_comstep_ProductTemplateType_httpwww_stibosystems_comstepConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6032, 12), )

    
    Configuration = property(__Configuration.value, __Configuration.set, None, None)

    _ElementMap.update({
        __Configuration.name() : __Configuration
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ProductTemplateType = ProductTemplateType
Namespace.addCategoryObject('typeBinding', 'ProductTemplateType', ProductTemplateType)


# Complex type {http://www.stibosystems.com/step}PublicationGroupsType with content type ELEMENT_ONLY
class PublicationGroupsType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}PublicationGroupsType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PublicationGroupsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6050, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}PublicationGroup uses Python identifier PublicationGroup
    __PublicationGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PublicationGroup'), 'PublicationGroup', '__httpwww_stibosystems_comstep_PublicationGroupsType_httpwww_stibosystems_comstepPublicationGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6052, 12), )

    
    PublicationGroup = property(__PublicationGroup.value, __PublicationGroup.set, None, None)

    
    # Attribute ClearExistingBasketContent uses Python identifier ClearExistingBasketContent
    __ClearExistingBasketContent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ClearExistingBasketContent'), 'ClearExistingBasketContent', '__httpwww_stibosystems_comstep_PublicationGroupsType_ClearExistingBasketContent', pyxb.binding.datatypes.boolean)
    __ClearExistingBasketContent._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6054, 8)
    __ClearExistingBasketContent._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6054, 8)
    
    ClearExistingBasketContent = property(__ClearExistingBasketContent.value, __ClearExistingBasketContent.set, None, '\n                    If set to true, the existing content of imported baskets will be cleared.\n                ')

    _ElementMap.update({
        __PublicationGroup.name() : __PublicationGroup
    })
    _AttributeMap.update({
        __ClearExistingBasketContent.name() : __ClearExistingBasketContent
    })
_module_typeBindings.PublicationGroupsType = PublicationGroupsType
Namespace.addCategoryObject('typeBinding', 'PublicationGroupsType', PublicationGroupsType)


# Complex type {http://www.stibosystems.com/step}PublicationTypeValidityType with content type ELEMENT_ONLY
class PublicationTypeValidityType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}PublicationTypeValidityType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PublicationTypeValidityType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6115, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}IncludedPublicationType uses Python identifier IncludedPublicationType
    __IncludedPublicationType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IncludedPublicationType'), 'IncludedPublicationType', '__httpwww_stibosystems_comstep_PublicationTypeValidityType_httpwww_stibosystems_comstepIncludedPublicationType', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6117, 12), )

    
    IncludedPublicationType = property(__IncludedPublicationType.value, __IncludedPublicationType.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ExcludedPublicationType uses Python identifier ExcludedPublicationType
    __ExcludedPublicationType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExcludedPublicationType'), 'ExcludedPublicationType', '__httpwww_stibosystems_comstep_PublicationTypeValidityType_httpwww_stibosystems_comstepExcludedPublicationType', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6118, 12), )

    
    ExcludedPublicationType = property(__ExcludedPublicationType.value, __ExcludedPublicationType.set, None, None)

    
    # Attribute IsInNewPublicationTypes uses Python identifier IsInNewPublicationTypes
    __IsInNewPublicationTypes = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsInNewPublicationTypes'), 'IsInNewPublicationTypes', '__httpwww_stibosystems_comstep_PublicationTypeValidityType_IsInNewPublicationTypes', pyxb.binding.datatypes.boolean)
    __IsInNewPublicationTypes._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6120, 8)
    __IsInNewPublicationTypes._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6120, 8)
    
    IsInNewPublicationTypes = property(__IsInNewPublicationTypes.value, __IsInNewPublicationTypes.set, None, None)

    _ElementMap.update({
        __IncludedPublicationType.name() : __IncludedPublicationType,
        __ExcludedPublicationType.name() : __ExcludedPublicationType
    })
    _AttributeMap.update({
        __IsInNewPublicationTypes.name() : __IsInNewPublicationTypes
    })
_module_typeBindings.PublicationTypeValidityType = PublicationTypeValidityType
Namespace.addCategoryObject('typeBinding', 'PublicationTypeValidityType', PublicationTypeValidityType)


# Complex type {http://www.stibosystems.com/step}QualifiersType with content type ELEMENT_ONLY
class QualifiersType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for qualifiers.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'QualifiersType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6141, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Qualifier uses Python identifier Qualifier
    __Qualifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Qualifier'), 'Qualifier', '__httpwww_stibosystems_comstep_QualifiersType_httpwww_stibosystems_comstepQualifier', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6148, 12), )

    
    Qualifier = property(__Qualifier.value, __Qualifier.set, None, None)

    _ElementMap.update({
        __Qualifier.name() : __Qualifier
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.QualifiersType = QualifiersType
Namespace.addCategoryObject('typeBinding', 'QualifiersType', QualifiersType)


# Complex type {http://www.stibosystems.com/step}ReplacementRulesType with content type ELEMENT_ONLY
class ReplacementRulesType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}ReplacementRulesType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReplacementRulesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6159, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Attributes uses Python identifier Attributes
    __Attributes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Attributes'), 'Attributes', '__httpwww_stibosystems_comstep_ReplacementRulesType_httpwww_stibosystems_comstepAttributes', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6161, 12), )

    
    Attributes = property(__Attributes.value, __Attributes.set, None, '\n                        Replacement rules for attribute definitions\n                    ')

    
    # Element {http://www.stibosystems.com/step}LinkTypes uses Python identifier LinkTypes
    __LinkTypes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LinkTypes'), 'LinkTypes', '__httpwww_stibosystems_comstep_ReplacementRulesType_httpwww_stibosystems_comstepLinkTypes', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6168, 12), )

    
    LinkTypes = property(__LinkTypes.value, __LinkTypes.set, None, '\n                        Replacement rules for link type definitions, i.e. reference type and classification product\n                        link type definitions.\n                    ')

    
    # Element {http://www.stibosystems.com/step}UserTypes uses Python identifier UserTypes
    __UserTypes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UserTypes'), 'UserTypes', '__httpwww_stibosystems_comstep_ReplacementRulesType_httpwww_stibosystems_comstepUserTypes', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6176, 12), )

    
    UserTypes = property(__UserTypes.value, __UserTypes.set, None, '\n                        Replacement rules for user type a.k.a. object type definitions.\n                    ')

    
    # Element {http://www.stibosystems.com/step}UserGroups uses Python identifier UserGroups
    __UserGroups = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UserGroups'), 'UserGroups', '__httpwww_stibosystems_comstep_ReplacementRulesType_httpwww_stibosystems_comstepUserGroups', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6183, 12), )

    
    UserGroups = property(__UserGroups.value, __UserGroups.set, None, '\n                        Replacement rules for user group definitions.\n                    ')

    
    # Element {http://www.stibosystems.com/step}Products uses Python identifier Products
    __Products = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Products'), 'Products', '__httpwww_stibosystems_comstep_ReplacementRulesType_httpwww_stibosystems_comstepProducts', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6190, 12), )

    
    Products = property(__Products.value, __Products.set, None, '\n                        Replacement rules for products.\n                    ')

    
    # Element {http://www.stibosystems.com/step}Classifications uses Python identifier Classifications
    __Classifications = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Classifications'), 'Classifications', '__httpwww_stibosystems_comstep_ReplacementRulesType_httpwww_stibosystems_comstepClassifications', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6197, 12), )

    
    Classifications = property(__Classifications.value, __Classifications.set, None, '\n                        Replacement rules for classifications.\n                    ')

    
    # Element {http://www.stibosystems.com/step}Entities uses Python identifier Entities
    __Entities = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Entities'), 'Entities', '__httpwww_stibosystems_comstep_ReplacementRulesType_httpwww_stibosystems_comstepEntities', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6204, 12), )

    
    Entities = property(__Entities.value, __Entities.set, None, '\n                        Replacement rules for entities.\n                    ')

    
    # Element {http://www.stibosystems.com/step}Assets uses Python identifier Assets
    __Assets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Assets'), 'Assets', '__httpwww_stibosystems_comstep_ReplacementRulesType_httpwww_stibosystems_comstepAssets', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6211, 12), )

    
    Assets = property(__Assets.value, __Assets.set, None, '\n                        Replacement rules for assets.\n                    ')

    
    # Element {http://www.stibosystems.com/step}ReplaceProductValuesForAttributeGroup uses Python identifier ReplaceProductValuesForAttributeGroup
    __ReplaceProductValuesForAttributeGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReplaceProductValuesForAttributeGroup'), 'ReplaceProductValuesForAttributeGroup', '__httpwww_stibosystems_comstep_ReplacementRulesType_httpwww_stibosystems_comstepReplaceProductValuesForAttributeGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6218, 12), )

    
    ReplaceProductValuesForAttributeGroup = property(__ReplaceProductValuesForAttributeGroup.value, __ReplaceProductValuesForAttributeGroup.set, None, '\n                        @Deprecated, use ReplacementRules/Products/ReplaceValues instead.\n                    ')

    
    # Element {http://www.stibosystems.com/step}ReplaceProductToProductCrossReference uses Python identifier ReplaceProductToProductCrossReference
    __ReplaceProductToProductCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReplaceProductToProductCrossReference'), 'ReplaceProductToProductCrossReference', '__httpwww_stibosystems_comstep_ReplacementRulesType_httpwww_stibosystems_comstepReplaceProductToProductCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6226, 12), )

    
    ReplaceProductToProductCrossReference = property(__ReplaceProductToProductCrossReference.value, __ReplaceProductToProductCrossReference.set, None, '\n                        @Deprecated, use ReplacementRules/Products/ReplaceCrossReferences instead.\n                    ')

    
    # Element {http://www.stibosystems.com/step}ReplaceProductToAssetCrossReference uses Python identifier ReplaceProductToAssetCrossReference
    __ReplaceProductToAssetCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReplaceProductToAssetCrossReference'), 'ReplaceProductToAssetCrossReference', '__httpwww_stibosystems_comstep_ReplacementRulesType_httpwww_stibosystems_comstepReplaceProductToAssetCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6234, 12), )

    
    ReplaceProductToAssetCrossReference = property(__ReplaceProductToAssetCrossReference.value, __ReplaceProductToAssetCrossReference.set, None, '\n                        @Deprecated, use ReplacementRules/Products/ReplaceCrossReferences instead.\n                    ')

    
    # Element {http://www.stibosystems.com/step}ReplaceClassificationReference uses Python identifier ReplaceClassificationReference
    __ReplaceClassificationReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReplaceClassificationReference'), 'ReplaceClassificationReference', '__httpwww_stibosystems_comstep_ReplacementRulesType_httpwww_stibosystems_comstepReplaceClassificationReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6242, 12), )

    
    ReplaceClassificationReference = property(__ReplaceClassificationReference.value, __ReplaceClassificationReference.set, None, '\n                        @Deprecated, use ReplacementRules/Products/ReplaceClassificationReferences instead.\n                    ')

    
    # Element {http://www.stibosystems.com/step}ReplaceCrossReference uses Python identifier ReplaceCrossReference
    __ReplaceCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReplaceCrossReference'), 'ReplaceCrossReference', '__httpwww_stibosystems_comstep_ReplacementRulesType_httpwww_stibosystems_comstepReplaceCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6250, 12), )

    
    ReplaceCrossReference = property(__ReplaceCrossReference.value, __ReplaceCrossReference.set, None, '\n                        @Deprecated, use ReplacementRules/Products/ReplaceCrossReferences,\n                        ReplacementRules/Classifications/ReplaceCrossReferences,\n                        ReplacementRules/Entities/ReplaceCrossReferences or\n                        ReplacementRules/Assets/ReplaceCrossReferences instead.\n                    ')

    
    # Element {http://www.stibosystems.com/step}ReplaceDataContainer uses Python identifier ReplaceDataContainer
    __ReplaceDataContainer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReplaceDataContainer'), 'ReplaceDataContainer', '__httpwww_stibosystems_comstep_ReplacementRulesType_httpwww_stibosystems_comstepReplaceDataContainer', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6261, 12), )

    
    ReplaceDataContainer = property(__ReplaceDataContainer.value, __ReplaceDataContainer.set, None, '\n                        @Deprecated, use ReplacementRules/Entities/ReplaceDataContainers or\n                        ReplacementRules/Products/ReplaceDataContainers instead.\n                    ')

    _ElementMap.update({
        __Attributes.name() : __Attributes,
        __LinkTypes.name() : __LinkTypes,
        __UserTypes.name() : __UserTypes,
        __UserGroups.name() : __UserGroups,
        __Products.name() : __Products,
        __Classifications.name() : __Classifications,
        __Entities.name() : __Entities,
        __Assets.name() : __Assets,
        __ReplaceProductValuesForAttributeGroup.name() : __ReplaceProductValuesForAttributeGroup,
        __ReplaceProductToProductCrossReference.name() : __ReplaceProductToProductCrossReference,
        __ReplaceProductToAssetCrossReference.name() : __ReplaceProductToAssetCrossReference,
        __ReplaceClassificationReference.name() : __ReplaceClassificationReference,
        __ReplaceCrossReference.name() : __ReplaceCrossReference,
        __ReplaceDataContainer.name() : __ReplaceDataContainer
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ReplacementRulesType = ReplacementRulesType
Namespace.addCategoryObject('typeBinding', 'ReplacementRulesType', ReplacementRulesType)


# Complex type {http://www.stibosystems.com/step}ReplaceAttributesType with content type ELEMENT_ONLY
class ReplaceAttributesType (pyxb.binding.basis.complexTypeDefinition):
    """
                Replacement instructions for attribute definitions.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReplaceAttributesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6272, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}ReplaceAttributeGroupLinks uses Python identifier ReplaceAttributeGroupLinks
    __ReplaceAttributeGroupLinks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReplaceAttributeGroupLinks'), 'ReplaceAttributeGroupLinks', '__httpwww_stibosystems_comstep_ReplaceAttributesType_httpwww_stibosystems_comstepReplaceAttributeGroupLinks', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6279, 12), )

    
    ReplaceAttributeGroupLinks = property(__ReplaceAttributeGroupLinks.value, __ReplaceAttributeGroupLinks.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ReplaceUserTypeLinks uses Python identifier ReplaceUserTypeLinks
    __ReplaceUserTypeLinks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReplaceUserTypeLinks'), 'ReplaceUserTypeLinks', '__httpwww_stibosystems_comstep_ReplaceAttributesType_httpwww_stibosystems_comstepReplaceUserTypeLinks', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6281, 12), )

    
    ReplaceUserTypeLinks = property(__ReplaceUserTypeLinks.value, __ReplaceUserTypeLinks.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ReplaceUnitLinks uses Python identifier ReplaceUnitLinks
    __ReplaceUnitLinks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReplaceUnitLinks'), 'ReplaceUnitLinks', '__httpwww_stibosystems_comstep_ReplaceAttributesType_httpwww_stibosystems_comstepReplaceUnitLinks', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6282, 12), )

    
    ReplaceUnitLinks = property(__ReplaceUnitLinks.value, __ReplaceUnitLinks.set, None, None)

    _ElementMap.update({
        __ReplaceAttributeGroupLinks.name() : __ReplaceAttributeGroupLinks,
        __ReplaceUserTypeLinks.name() : __ReplaceUserTypeLinks,
        __ReplaceUnitLinks.name() : __ReplaceUnitLinks
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ReplaceAttributesType = ReplaceAttributesType
Namespace.addCategoryObject('typeBinding', 'ReplaceAttributesType', ReplaceAttributesType)


# Complex type {http://www.stibosystems.com/step}ReplaceAttributeGroupLinksType with content type EMPTY
class ReplaceAttributeGroupLinksType (pyxb.binding.basis.complexTypeDefinition):
    """
                Specifies if existing attribute group links should be replaced with the ones present in the import file.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReplaceAttributeGroupLinksType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6285, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ReplaceAttributeGroupLinksType = ReplaceAttributeGroupLinksType
Namespace.addCategoryObject('typeBinding', 'ReplaceAttributeGroupLinksType', ReplaceAttributeGroupLinksType)


# Complex type {http://www.stibosystems.com/step}ReplaceUserTypeLinksType with content type EMPTY
class ReplaceUserTypeLinksType (pyxb.binding.basis.complexTypeDefinition):
    """
                Specifies if existing user type links (links that express which other user types, i.e. object types,
                a user type/object type is valid below) should be replaced with the ones present in the import file.
                Notice that user type links that are in use in present revisions in any context/workspace cannot be
                replaced.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReplaceUserTypeLinksType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6293, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ReplaceUserTypeLinksType = ReplaceUserTypeLinksType
Namespace.addCategoryObject('typeBinding', 'ReplaceUserTypeLinksType', ReplaceUserTypeLinksType)


# Complex type {http://www.stibosystems.com/step}ReplaceUnitLinksType with content type EMPTY
class ReplaceUnitLinksType (pyxb.binding.basis.complexTypeDefinition):
    """
                Specifies if existing unit links (units valid for an attribute) should be replaced with the ones present
                in the import file.
                Notice that a unit link cannot be replaced if there are present values in any context/workspace using
                the unit.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReplaceUnitLinksType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6304, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ReplaceUnitLinksType = ReplaceUnitLinksType
Namespace.addCategoryObject('typeBinding', 'ReplaceUnitLinksType', ReplaceUnitLinksType)


# Complex type {http://www.stibosystems.com/step}ReplaceLinkTypeAttributeLinksType with content type EMPTY
class ReplaceLinkTypeAttributeLinksType (pyxb.binding.basis.complexTypeDefinition):
    """
                Specifies that only the attributes present in the import file should should be valid for the link
                type. Note that - despite the name - this has nothing to do with (hierarchy) attribute links.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReplaceLinkTypeAttributeLinksType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6315, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ReplaceLinkTypeAttributeLinksType = ReplaceLinkTypeAttributeLinksType
Namespace.addCategoryObject('typeBinding', 'ReplaceLinkTypeAttributeLinksType', ReplaceLinkTypeAttributeLinksType)


# Complex type {http://www.stibosystems.com/step}ReplaceLinkTypesType with content type ELEMENT_ONLY
class ReplaceLinkTypesType (pyxb.binding.basis.complexTypeDefinition):
    """
                Replacement instructions for links type definitions (reference types and classification product link
                types).
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReplaceLinkTypesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6324, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}ReplaceAttributeGroupLinks uses Python identifier ReplaceAttributeGroupLinks
    __ReplaceAttributeGroupLinks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReplaceAttributeGroupLinks'), 'ReplaceAttributeGroupLinks', '__httpwww_stibosystems_comstep_ReplaceLinkTypesType_httpwww_stibosystems_comstepReplaceAttributeGroupLinks', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6332, 12), )

    
    ReplaceAttributeGroupLinks = property(__ReplaceAttributeGroupLinks.value, __ReplaceAttributeGroupLinks.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ReplaceUserTypeLinks uses Python identifier ReplaceUserTypeLinks
    __ReplaceUserTypeLinks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReplaceUserTypeLinks'), 'ReplaceUserTypeLinks', '__httpwww_stibosystems_comstep_ReplaceLinkTypesType_httpwww_stibosystems_comstepReplaceUserTypeLinks', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6334, 12), )

    
    ReplaceUserTypeLinks = property(__ReplaceUserTypeLinks.value, __ReplaceUserTypeLinks.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ReplaceTargetUserTypeLinks uses Python identifier ReplaceTargetUserTypeLinks
    __ReplaceTargetUserTypeLinks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReplaceTargetUserTypeLinks'), 'ReplaceTargetUserTypeLinks', '__httpwww_stibosystems_comstep_ReplaceLinkTypesType_httpwww_stibosystems_comstepReplaceTargetUserTypeLinks', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6335, 12), )

    
    ReplaceTargetUserTypeLinks = property(__ReplaceTargetUserTypeLinks.value, __ReplaceTargetUserTypeLinks.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ReplaceAttributeLinks uses Python identifier ReplaceAttributeLinks
    __ReplaceAttributeLinks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReplaceAttributeLinks'), 'ReplaceAttributeLinks', '__httpwww_stibosystems_comstep_ReplaceLinkTypesType_httpwww_stibosystems_comstepReplaceAttributeLinks', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6337, 12), )

    
    ReplaceAttributeLinks = property(__ReplaceAttributeLinks.value, __ReplaceAttributeLinks.set, None, None)

    _ElementMap.update({
        __ReplaceAttributeGroupLinks.name() : __ReplaceAttributeGroupLinks,
        __ReplaceUserTypeLinks.name() : __ReplaceUserTypeLinks,
        __ReplaceTargetUserTypeLinks.name() : __ReplaceTargetUserTypeLinks,
        __ReplaceAttributeLinks.name() : __ReplaceAttributeLinks
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ReplaceLinkTypesType = ReplaceLinkTypesType
Namespace.addCategoryObject('typeBinding', 'ReplaceLinkTypesType', ReplaceLinkTypesType)


# Complex type {http://www.stibosystems.com/step}ReplaceSourceUserTypeLinksType with content type EMPTY
class ReplaceSourceUserTypeLinksType (pyxb.binding.basis.complexTypeDefinition):
    """
                Specifies if existing user types links (i.e. valid source object types) should be replaced with the ones
                present in the import file.
                Notice that for classification product link type definitions, this instruction will cause valid product
                object types to be replaced regardless of whether links of the type are owned by the product or the
                classification side. Further notice that it is not possible to replace user type links if these are used
                by present references/links in any context/workspace.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReplaceSourceUserTypeLinksType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6341, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ReplaceSourceUserTypeLinksType = ReplaceSourceUserTypeLinksType
Namespace.addCategoryObject('typeBinding', 'ReplaceSourceUserTypeLinksType', ReplaceSourceUserTypeLinksType)


# Complex type {http://www.stibosystems.com/step}ReplaceTargetUserTypeLinksType with content type EMPTY
class ReplaceTargetUserTypeLinksType (pyxb.binding.basis.complexTypeDefinition):
    """
                Specifies if existing target user types links (i.e. valid target object types) should be replaced with
                the ones present in the import file.
                Notice that for classification product link type definitions, this instruction will cause valid
                classification object types to be replaced regardless of whether links of the type are owned by the
                product or the classification side. Further notice that it is not possible to replace target user type
                links if these are used by present references/links in any context/workspace.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReplaceTargetUserTypeLinksType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6354, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ReplaceTargetUserTypeLinksType = ReplaceTargetUserTypeLinksType
Namespace.addCategoryObject('typeBinding', 'ReplaceTargetUserTypeLinksType', ReplaceTargetUserTypeLinksType)


# Complex type {http://www.stibosystems.com/step}ReplaceUserTypesType with content type ELEMENT_ONLY
class ReplaceUserTypesType (pyxb.binding.basis.complexTypeDefinition):
    """
                Replacement instructions for user types, i.e. object type definitions.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReplaceUserTypesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6367, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}ReplaceUserTypeLinks uses Python identifier ReplaceUserTypeLinks
    __ReplaceUserTypeLinks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReplaceUserTypeLinks'), 'ReplaceUserTypeLinks', '__httpwww_stibosystems_comstep_ReplaceUserTypesType_httpwww_stibosystems_comstepReplaceUserTypeLinks', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6374, 12), )

    
    ReplaceUserTypeLinks = property(__ReplaceUserTypeLinks.value, __ReplaceUserTypeLinks.set, None, None)

    _ElementMap.update({
        __ReplaceUserTypeLinks.name() : __ReplaceUserTypeLinks
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ReplaceUserTypesType = ReplaceUserTypesType
Namespace.addCategoryObject('typeBinding', 'ReplaceUserTypesType', ReplaceUserTypesType)


# Complex type {http://www.stibosystems.com/step}ReplaceUserGroupsType with content type ELEMENT_ONLY
class ReplaceUserGroupsType (pyxb.binding.basis.complexTypeDefinition):
    """
                Replacement instructions for user group definitions.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReplaceUserGroupsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6377, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}ReplacePrivilegeRules uses Python identifier ReplacePrivilegeRules
    __ReplacePrivilegeRules = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReplacePrivilegeRules'), 'ReplacePrivilegeRules', '__httpwww_stibosystems_comstep_ReplaceUserGroupsType_httpwww_stibosystems_comstepReplacePrivilegeRules', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6384, 12), )

    
    ReplacePrivilegeRules = property(__ReplacePrivilegeRules.value, __ReplacePrivilegeRules.set, None, None)

    _ElementMap.update({
        __ReplacePrivilegeRules.name() : __ReplacePrivilegeRules
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ReplaceUserGroupsType = ReplaceUserGroupsType
Namespace.addCategoryObject('typeBinding', 'ReplaceUserGroupsType', ReplaceUserGroupsType)


# Complex type {http://www.stibosystems.com/step}ReplacePrivilegeRulesType with content type EMPTY
class ReplacePrivilegeRulesType (pyxb.binding.basis.complexTypeDefinition):
    """
                Specifies if existing privilege rules should be replaced with the ones present in the import file.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReplacePrivilegeRulesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6387, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ReplacePrivilegeRulesType = ReplacePrivilegeRulesType
Namespace.addCategoryObject('typeBinding', 'ReplacePrivilegeRulesType', ReplacePrivilegeRulesType)


# Complex type {http://www.stibosystems.com/step}ReplaceProductsType with content type ELEMENT_ONLY
class ReplaceProductsType (pyxb.binding.basis.complexTypeDefinition):
    """
                Replacement instructions for products.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReplaceProductsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6395, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}ReplaceValues uses Python identifier ReplaceValues
    __ReplaceValues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReplaceValues'), 'ReplaceValues', '__httpwww_stibosystems_comstep_ReplaceProductsType_httpwww_stibosystems_comstepReplaceValues', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6402, 12), )

    
    ReplaceValues = property(__ReplaceValues.value, __ReplaceValues.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ReplaceCrossReferences uses Python identifier ReplaceCrossReferences
    __ReplaceCrossReferences = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReplaceCrossReferences'), 'ReplaceCrossReferences', '__httpwww_stibosystems_comstep_ReplaceProductsType_httpwww_stibosystems_comstepReplaceCrossReferences', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6403, 12), )

    
    ReplaceCrossReferences = property(__ReplaceCrossReferences.value, __ReplaceCrossReferences.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ReplaceAttributeLinks uses Python identifier ReplaceAttributeLinks
    __ReplaceAttributeLinks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReplaceAttributeLinks'), 'ReplaceAttributeLinks', '__httpwww_stibosystems_comstep_ReplaceProductsType_httpwww_stibosystems_comstepReplaceAttributeLinks', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6405, 12), )

    
    ReplaceAttributeLinks = property(__ReplaceAttributeLinks.value, __ReplaceAttributeLinks.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ReplaceOverrideSubProducts uses Python identifier ReplaceOverrideSubProducts
    __ReplaceOverrideSubProducts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReplaceOverrideSubProducts'), 'ReplaceOverrideSubProducts', '__httpwww_stibosystems_comstep_ReplaceProductsType_httpwww_stibosystems_comstepReplaceOverrideSubProducts', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6407, 12), )

    
    ReplaceOverrideSubProducts = property(__ReplaceOverrideSubProducts.value, __ReplaceOverrideSubProducts.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ReplaceClassificationReferences uses Python identifier ReplaceClassificationReferences
    __ReplaceClassificationReferences = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReplaceClassificationReferences'), 'ReplaceClassificationReferences', '__httpwww_stibosystems_comstep_ReplaceProductsType_httpwww_stibosystems_comstepReplaceClassificationReferences', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6409, 12), )

    
    ReplaceClassificationReferences = property(__ReplaceClassificationReferences.value, __ReplaceClassificationReferences.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ReplaceDataContainers uses Python identifier ReplaceDataContainers
    __ReplaceDataContainers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReplaceDataContainers'), 'ReplaceDataContainers', '__httpwww_stibosystems_comstep_ReplaceProductsType_httpwww_stibosystems_comstepReplaceDataContainers', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6411, 12), )

    
    ReplaceDataContainers = property(__ReplaceDataContainers.value, __ReplaceDataContainers.set, None, None)

    _ElementMap.update({
        __ReplaceValues.name() : __ReplaceValues,
        __ReplaceCrossReferences.name() : __ReplaceCrossReferences,
        __ReplaceAttributeLinks.name() : __ReplaceAttributeLinks,
        __ReplaceOverrideSubProducts.name() : __ReplaceOverrideSubProducts,
        __ReplaceClassificationReferences.name() : __ReplaceClassificationReferences,
        __ReplaceDataContainers.name() : __ReplaceDataContainers
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ReplaceProductsType = ReplaceProductsType
Namespace.addCategoryObject('typeBinding', 'ReplaceProductsType', ReplaceProductsType)


# Complex type {http://www.stibosystems.com/step}ReplaceClassificationsType with content type ELEMENT_ONLY
class ReplaceClassificationsType (pyxb.binding.basis.complexTypeDefinition):
    """
                Replacement instructions for classifications.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReplaceClassificationsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6415, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}ReplaceValues uses Python identifier ReplaceValues
    __ReplaceValues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReplaceValues'), 'ReplaceValues', '__httpwww_stibosystems_comstep_ReplaceClassificationsType_httpwww_stibosystems_comstepReplaceValues', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6422, 12), )

    
    ReplaceValues = property(__ReplaceValues.value, __ReplaceValues.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ReplaceCrossReferences uses Python identifier ReplaceCrossReferences
    __ReplaceCrossReferences = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReplaceCrossReferences'), 'ReplaceCrossReferences', '__httpwww_stibosystems_comstep_ReplaceClassificationsType_httpwww_stibosystems_comstepReplaceCrossReferences', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6423, 12), )

    
    ReplaceCrossReferences = property(__ReplaceCrossReferences.value, __ReplaceCrossReferences.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ReplaceAttributeLinks uses Python identifier ReplaceAttributeLinks
    __ReplaceAttributeLinks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReplaceAttributeLinks'), 'ReplaceAttributeLinks', '__httpwww_stibosystems_comstep_ReplaceClassificationsType_httpwww_stibosystems_comstepReplaceAttributeLinks', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6425, 12), )

    
    ReplaceAttributeLinks = property(__ReplaceAttributeLinks.value, __ReplaceAttributeLinks.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ReplaceProductReferences uses Python identifier ReplaceProductReferences
    __ReplaceProductReferences = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReplaceProductReferences'), 'ReplaceProductReferences', '__httpwww_stibosystems_comstep_ReplaceClassificationsType_httpwww_stibosystems_comstepReplaceProductReferences', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6427, 12), )

    
    ReplaceProductReferences = property(__ReplaceProductReferences.value, __ReplaceProductReferences.set, None, None)

    _ElementMap.update({
        __ReplaceValues.name() : __ReplaceValues,
        __ReplaceCrossReferences.name() : __ReplaceCrossReferences,
        __ReplaceAttributeLinks.name() : __ReplaceAttributeLinks,
        __ReplaceProductReferences.name() : __ReplaceProductReferences
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ReplaceClassificationsType = ReplaceClassificationsType
Namespace.addCategoryObject('typeBinding', 'ReplaceClassificationsType', ReplaceClassificationsType)


# Complex type {http://www.stibosystems.com/step}ReplaceEntitiesType with content type ELEMENT_ONLY
class ReplaceEntitiesType (pyxb.binding.basis.complexTypeDefinition):
    """
                Replacement instructions for entities.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReplaceEntitiesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6431, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}ReplaceValues uses Python identifier ReplaceValues
    __ReplaceValues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReplaceValues'), 'ReplaceValues', '__httpwww_stibosystems_comstep_ReplaceEntitiesType_httpwww_stibosystems_comstepReplaceValues', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6438, 12), )

    
    ReplaceValues = property(__ReplaceValues.value, __ReplaceValues.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ReplaceCrossReferences uses Python identifier ReplaceCrossReferences
    __ReplaceCrossReferences = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReplaceCrossReferences'), 'ReplaceCrossReferences', '__httpwww_stibosystems_comstep_ReplaceEntitiesType_httpwww_stibosystems_comstepReplaceCrossReferences', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6439, 12), )

    
    ReplaceCrossReferences = property(__ReplaceCrossReferences.value, __ReplaceCrossReferences.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ReplaceDataContainers uses Python identifier ReplaceDataContainers
    __ReplaceDataContainers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReplaceDataContainers'), 'ReplaceDataContainers', '__httpwww_stibosystems_comstep_ReplaceEntitiesType_httpwww_stibosystems_comstepReplaceDataContainers', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6441, 12), )

    
    ReplaceDataContainers = property(__ReplaceDataContainers.value, __ReplaceDataContainers.set, None, None)

    _ElementMap.update({
        __ReplaceValues.name() : __ReplaceValues,
        __ReplaceCrossReferences.name() : __ReplaceCrossReferences,
        __ReplaceDataContainers.name() : __ReplaceDataContainers
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ReplaceEntitiesType = ReplaceEntitiesType
Namespace.addCategoryObject('typeBinding', 'ReplaceEntitiesType', ReplaceEntitiesType)


# Complex type {http://www.stibosystems.com/step}ReplaceAssetsType with content type ELEMENT_ONLY
class ReplaceAssetsType (pyxb.binding.basis.complexTypeDefinition):
    """
                Replacement instructions for assets.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReplaceAssetsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6445, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}ReplaceValues uses Python identifier ReplaceValues
    __ReplaceValues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReplaceValues'), 'ReplaceValues', '__httpwww_stibosystems_comstep_ReplaceAssetsType_httpwww_stibosystems_comstepReplaceValues', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6452, 12), )

    
    ReplaceValues = property(__ReplaceValues.value, __ReplaceValues.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ReplaceCrossReferences uses Python identifier ReplaceCrossReferences
    __ReplaceCrossReferences = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReplaceCrossReferences'), 'ReplaceCrossReferences', '__httpwww_stibosystems_comstep_ReplaceAssetsType_httpwww_stibosystems_comstepReplaceCrossReferences', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6453, 12), )

    
    ReplaceCrossReferences = property(__ReplaceCrossReferences.value, __ReplaceCrossReferences.set, None, None)

    _ElementMap.update({
        __ReplaceValues.name() : __ReplaceValues,
        __ReplaceCrossReferences.name() : __ReplaceCrossReferences
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ReplaceAssetsType = ReplaceAssetsType
Namespace.addCategoryObject('typeBinding', 'ReplaceAssetsType', ReplaceAssetsType)


# Complex type {http://www.stibosystems.com/step}ReplaceOverrideSubProductsType with content type EMPTY
class ReplaceOverrideSubProductsType (pyxb.binding.basis.complexTypeDefinition):
    """
                Specifies if existing products "adopted" for a product override should be replaced with the ones present
                in the import file.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReplaceOverrideSubProductsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6553, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ReplaceOverrideSubProductsType = ReplaceOverrideSubProductsType
Namespace.addCategoryObject('typeBinding', 'ReplaceOverrideSubProductsType', ReplaceOverrideSubProductsType)


# Complex type {http://www.stibosystems.com/step}ReplaceDataContainersType with content type EMPTY
class ReplaceDataContainersType (pyxb.binding.basis.complexTypeDefinition):
    """
                Specifies if existing data container objects should be replaced with the ones present in the import
                file. The instruction can either match all data container types or a specific type (DataContainerTypeID
                attribute). If a data container type is matched by multiple rules, the most specific rule will be used.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReplaceDataContainersType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6634, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute DataContainerTypeID uses Python identifier DataContainerTypeID
    __DataContainerTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DataContainerTypeID'), 'DataContainerTypeID', '__httpwww_stibosystems_comstep_ReplaceDataContainersType_DataContainerTypeID', pyxb.binding.datatypes.string)
    __DataContainerTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6642, 8)
    __DataContainerTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6642, 8)
    
    DataContainerTypeID = property(__DataContainerTypeID.value, __DataContainerTypeID.set, None, '\n                    Makes the instruction apply only for a specific data container type.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __DataContainerTypeID.name() : __DataContainerTypeID
    })
_module_typeBindings.ReplaceDataContainersType = ReplaceDataContainersType
Namespace.addCategoryObject('typeBinding', 'ReplaceDataContainersType', ReplaceDataContainersType)


# Complex type {http://www.stibosystems.com/step}RowColumnTableGroupListType with content type ELEMENT_ONLY
class RowColumnTableGroupListType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}RowColumnTableGroupListType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RowColumnTableGroupListType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6694, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}RowColumnTableGroup uses Python identifier RowColumnTableGroup
    __RowColumnTableGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RowColumnTableGroup'), 'RowColumnTableGroup', '__httpwww_stibosystems_comstep_RowColumnTableGroupListType_httpwww_stibosystems_comstepRowColumnTableGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6696, 12), )

    
    RowColumnTableGroup = property(__RowColumnTableGroup.value, __RowColumnTableGroup.set, None, None)

    _ElementMap.update({
        __RowColumnTableGroup.name() : __RowColumnTableGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.RowColumnTableGroupListType = RowColumnTableGroupListType
Namespace.addCategoryObject('typeBinding', 'RowColumnTableGroupListType', RowColumnTableGroupListType)


# Complex type {http://www.stibosystems.com/step}RowTypesType with content type ELEMENT_ONLY
class RowTypesType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}RowTypesType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RowTypesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6764, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}RowType uses Python identifier RowType
    __RowType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RowType'), 'RowType', '__httpwww_stibosystems_comstep_RowTypesType_httpwww_stibosystems_comstepRowType', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6766, 12), )

    
    RowType = property(__RowType.value, __RowType.set, None, None)

    _ElementMap.update({
        __RowType.name() : __RowType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.RowTypesType = RowTypesType
Namespace.addCategoryObject('typeBinding', 'RowTypesType', RowTypesType)


# Complex type {http://www.stibosystems.com/step}SetupEntitiesType with content type ELEMENT_ONLY
class SetupEntitiesType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for setup entities.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SetupEntitiesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6791, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}SetupEntity uses Python identifier SetupEntity
    __SetupEntity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SetupEntity'), 'SetupEntity', '__httpwww_stibosystems_comstep_SetupEntitiesType_httpwww_stibosystems_comstepSetupEntity', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6798, 12), )

    
    SetupEntity = property(__SetupEntity.value, __SetupEntity.set, None, None)

    _ElementMap.update({
        __SetupEntity.name() : __SetupEntity
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SetupEntitiesType = SetupEntitiesType
Namespace.addCategoryObject('typeBinding', 'SetupEntitiesType', SetupEntitiesType)


# Complex type {http://www.stibosystems.com/step}SetupGroupsType with content type ELEMENT_ONLY
class SetupGroupsType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for setup groups.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SetupGroupsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6851, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}SetupGroup uses Python identifier SetupGroup
    __SetupGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SetupGroup'), 'SetupGroup', '__httpwww_stibosystems_comstep_SetupGroupsType_httpwww_stibosystems_comstepSetupGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6858, 12), )

    
    SetupGroup = property(__SetupGroup.value, __SetupGroup.set, None, None)

    _ElementMap.update({
        __SetupGroup.name() : __SetupGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SetupGroupsType = SetupGroupsType
Namespace.addCategoryObject('typeBinding', 'SetupGroupsType', SetupGroupsType)


# Complex type {http://www.stibosystems.com/step}StatusFlagsType with content type ELEMENT_ONLY
class StatusFlagsType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for status flags.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StatusFlagsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7006, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}StatusFlag uses Python identifier StatusFlag
    __StatusFlag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StatusFlag'), 'StatusFlag', '__httpwww_stibosystems_comstep_StatusFlagsType_httpwww_stibosystems_comstepStatusFlag', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7013, 12), )

    
    StatusFlag = property(__StatusFlag.value, __StatusFlag.set, None, None)

    _ElementMap.update({
        __StatusFlag.name() : __StatusFlag
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.StatusFlagsType = StatusFlagsType
Namespace.addCategoryObject('typeBinding', 'StatusFlagsType', StatusFlagsType)


# Complex type {http://www.stibosystems.com/step}STEPWorkflowsType with content type ELEMENT_ONLY
class STEPWorkflowsType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for workflow definitions.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'STEPWorkflowsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7048, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Stateflow uses Python identifier Stateflow
    __Stateflow = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Stateflow'), 'Stateflow', '__httpwww_stibosystems_comstep_STEPWorkflowsType_httpwww_stibosystems_comstepStateflow', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7055, 12), )

    
    Stateflow = property(__Stateflow.value, __Stateflow.set, None, '\n                        @Deprecated, replaced by STEPWorkflow.\n                    ')

    
    # Element {http://www.stibosystems.com/step}STEPWorkflow uses Python identifier STEPWorkflow
    __STEPWorkflow = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'STEPWorkflow'), 'STEPWorkflow', '__httpwww_stibosystems_comstep_STEPWorkflowsType_httpwww_stibosystems_comstepSTEPWorkflow', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7062, 12), )

    
    STEPWorkflow = property(__STEPWorkflow.value, __STEPWorkflow.set, None, None)

    _ElementMap.update({
        __Stateflow.name() : __Stateflow,
        __STEPWorkflow.name() : __STEPWorkflow
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.STEPWorkflowsType = STEPWorkflowsType
Namespace.addCategoryObject('typeBinding', 'STEPWorkflowsType', STEPWorkflowsType)


# Complex type {http://www.stibosystems.com/step}STEPWorkflowProfilesType with content type ELEMENT_ONLY
class STEPWorkflowProfilesType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for workflow profile definitions.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'STEPWorkflowProfilesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7098, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}STEPWorkflowProfile uses Python identifier STEPWorkflowProfile
    __STEPWorkflowProfile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'STEPWorkflowProfile'), 'STEPWorkflowProfile', '__httpwww_stibosystems_comstep_STEPWorkflowProfilesType_httpwww_stibosystems_comstepSTEPWorkflowProfile', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7105, 12), )

    
    STEPWorkflowProfile = property(__STEPWorkflowProfile.value, __STEPWorkflowProfile.set, None, None)

    _ElementMap.update({
        __STEPWorkflowProfile.name() : __STEPWorkflowProfile
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.STEPWorkflowProfilesType = STEPWorkflowProfilesType
Namespace.addCategoryObject('typeBinding', 'STEPWorkflowProfilesType', STEPWorkflowProfilesType)


# Complex type {http://www.stibosystems.com/step}SystemSetupType with content type ELEMENT_ONLY
class SystemSetupType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}SystemSetupType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SystemSetupType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7399, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}SystemSetupValue uses Python identifier SystemSetupValue
    __SystemSetupValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SystemSetupValue'), 'SystemSetupValue', '__httpwww_stibosystems_comstep_SystemSetupType_httpwww_stibosystems_comstepSystemSetupValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7401, 12), )

    
    SystemSetupValue = property(__SystemSetupValue.value, __SystemSetupValue.set, None, None)

    _ElementMap.update({
        __SystemSetupValue.name() : __SystemSetupValue
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SystemSetupType = SystemSetupType
Namespace.addCategoryObject('typeBinding', 'SystemSetupType', SystemSetupType)


# Complex type {http://www.stibosystems.com/step}TableColorsType with content type ELEMENT_ONLY
class TableColorsType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}TableColorsType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TableColorsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7433, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}TableColor uses Python identifier TableColor
    __TableColor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TableColor'), 'TableColor', '__httpwww_stibosystems_comstep_TableColorsType_httpwww_stibosystems_comstepTableColor', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7435, 12), )

    
    TableColor = property(__TableColor.value, __TableColor.set, None, None)

    _ElementMap.update({
        __TableColor.name() : __TableColor
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.TableColorsType = TableColorsType
Namespace.addCategoryObject('typeBinding', 'TableColorsType', TableColorsType)


# Complex type {http://www.stibosystems.com/step}TableColorType with content type EMPTY
class TableColorType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}TableColorType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TableColorType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7438, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute Name uses Python identifier Name
    __Name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Name'), 'Name', '__httpwww_stibosystems_comstep_TableColorType_Name', pyxb.binding.datatypes.string, required=True)
    __Name._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7439, 8)
    __Name._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7439, 8)
    
    Name = property(__Name.value, __Name.set, None, '\n                    The name of the color.\n                ')

    
    # Attribute Color uses Python identifier Color
    __Color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Color'), 'Color', '__httpwww_stibosystems_comstep_TableColorType_Color', pyxb.binding.datatypes.integer, required=True)
    __Color._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7446, 8)
    __Color._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7446, 8)
    
    Color = property(__Color.value, __Color.set, None, '\n                    The RGB value of the color in integer form. (Bits 24-31 are alpha, 16-23 are red, 8-15 are green,\n                    0-7 are blue).\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Name.name() : __Name,
        __Color.name() : __Color
    })
_module_typeBindings.TableColorType = TableColorType
Namespace.addCategoryObject('typeBinding', 'TableColorType', TableColorType)


# Complex type {http://www.stibosystems.com/step}TableConfigurationType with content type ELEMENT_ONLY
class TableConfigurationType (pyxb.binding.basis.complexTypeDefinition):
    """
                The configuration of a table definition or table plugin. e.g. table transformations or header repeating pagination plugin settings.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TableConfigurationType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7455, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Configuration uses Python identifier Configuration
    __Configuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), 'Configuration', '__httpwww_stibosystems_comstep_TableConfigurationType_httpwww_stibosystems_comstepConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7462, 12), )

    
    Configuration = property(__Configuration.value, __Configuration.set, None, '\n                        The configuration is an internal format.\n                    ')

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_TableConfigurationType_ID', pyxb.binding.datatypes.string, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7470, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7470, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    The ID (table ID or table plugin name) that this configuration is for.\n                ')

    _ElementMap.update({
        __Configuration.name() : __Configuration
    })
    _AttributeMap.update({
        __ID.name() : __ID
    })
_module_typeBindings.TableConfigurationType = TableConfigurationType
Namespace.addCategoryObject('typeBinding', 'TableConfigurationType', TableConfigurationType)


# Complex type {http://www.stibosystems.com/step}TableRulesType with content type ELEMENT_ONLY
class TableRulesType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}TableRulesType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TableRulesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7485, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}TableRule uses Python identifier TableRule
    __TableRule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TableRule'), 'TableRule', '__httpwww_stibosystems_comstep_TableRulesType_httpwww_stibosystems_comstepTableRule', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7487, 12), )

    
    TableRule = property(__TableRule.value, __TableRule.set, None, None)

    _ElementMap.update({
        __TableRule.name() : __TableRule
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.TableRulesType = TableRulesType
Namespace.addCategoryObject('typeBinding', 'TableRulesType', TableRulesType)


# Complex type {http://www.stibosystems.com/step}TableRuleType with content type EMPTY
class TableRuleType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}TableRuleType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TableRuleType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7490, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute Name uses Python identifier Name
    __Name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Name'), 'Name', '__httpwww_stibosystems_comstep_TableRuleType_Name', pyxb.binding.datatypes.string, required=True)
    __Name._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7491, 8)
    __Name._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7491, 8)
    
    Name = property(__Name.value, __Name.set, None, '\n                    The name of the rule\n                ')

    
    # Attribute Width uses Python identifier Width
    __Width = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Width'), 'Width', '__httpwww_stibosystems_comstep_TableRuleType_Width', pyxb.binding.datatypes.integer, required=True)
    __Width._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7498, 8)
    __Width._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7498, 8)
    
    Width = property(__Width.value, __Width.set, None, '\n                    The width of the rule\n                ')

    
    # Attribute Color uses Python identifier Color
    __Color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Color'), 'Color', '__httpwww_stibosystems_comstep_TableRuleType_Color', pyxb.binding.datatypes.string, required=True)
    __Color._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7505, 8)
    __Color._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7505, 8)
    
    Color = property(__Color.value, __Color.set, None, '\n                    The name of the color to use for the rule.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Name.name() : __Name,
        __Width.name() : __Width,
        __Color.name() : __Color
    })
_module_typeBindings.TableRuleType = TableRuleType
Namespace.addCategoryObject('typeBinding', 'TableRuleType', TableRuleType)


# Complex type {http://www.stibosystems.com/step}TableTextType with content type MIXED
class TableTextType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}TableTextType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TableTextType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7520, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Text uses Python identifier Text
    __Text = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Text'), 'Text', '__httpwww_stibosystems_comstep_TableTextType_httpwww_stibosystems_comstepText', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7522, 12), )

    
    Text = property(__Text.value, __Text.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_TableTextType_ID', pyxb.binding.datatypes.string, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7524, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7524, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    _ElementMap.update({
        __Text.name() : __Text
    })
    _AttributeMap.update({
        __ID.name() : __ID
    })
_module_typeBindings.TableTextType = TableTextType
Namespace.addCategoryObject('typeBinding', 'TableTextType', TableTextType)


# Complex type {http://www.stibosystems.com/step}TablesType with content type ELEMENT_ONLY
class TablesType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}TablesType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TablesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7526, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}TableDefinition uses Python identifier TableDefinition
    __TableDefinition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TableDefinition'), 'TableDefinition', '__httpwww_stibosystems_comstep_TablesType_httpwww_stibosystems_comstepTableDefinition', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7528, 12), )

    
    TableDefinition = property(__TableDefinition.value, __TableDefinition.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Table uses Python identifier Table
    __Table = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Table'), 'Table', '__httpwww_stibosystems_comstep_TablesType_httpwww_stibosystems_comstepTable', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7529, 12), )

    
    Table = property(__Table.value, __Table.set, None, None)

    _ElementMap.update({
        __TableDefinition.name() : __TableDefinition,
        __Table.name() : __Table
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.TablesType = TablesType
Namespace.addCategoryObject('typeBinding', 'TablesType', TablesType)


# Complex type {http://www.stibosystems.com/step}TableTypesType with content type ELEMENT_ONLY
class TableTypesType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}TableTypesType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TableTypesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7545, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}TableType uses Python identifier TableType
    __TableType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TableType'), 'TableType', '__httpwww_stibosystems_comstep_TableTypesType_httpwww_stibosystems_comstepTableType', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7547, 12), )

    
    TableType = property(__TableType.value, __TableType.set, None, None)

    _ElementMap.update({
        __TableType.name() : __TableType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.TableTypesType = TableTypesType
Namespace.addCategoryObject('typeBinding', 'TableTypesType', TableTypesType)


# Complex type {http://www.stibosystems.com/step}TagFormatType with content type ELEMENT_ONLY
class TagFormatType (pyxb.binding.basis.complexTypeDefinition):
    """
                Tag output conversions. Describes how tag is outputted to a given format.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TagFormatType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7584, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}FormattingStart uses Python identifier FormattingStart
    __FormattingStart = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FormattingStart'), 'FormattingStart', '__httpwww_stibosystems_comstep_TagFormatType_httpwww_stibosystems_comstepFormattingStart', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7591, 12), )

    
    FormattingStart = property(__FormattingStart.value, __FormattingStart.set, None, '\n                        How tag should be converted to given output format.\n                    ')

    
    # Element {http://www.stibosystems.com/step}FormattingStop uses Python identifier FormattingStop
    __FormattingStop = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FormattingStop'), 'FormattingStop', '__httpwww_stibosystems_comstep_TagFormatType_httpwww_stibosystems_comstepFormattingStop', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7598, 12), )

    
    FormattingStop = property(__FormattingStop.value, __FormattingStop.set, None, '\n                        How end tag should be converted to given output format. Not relevant for character and special\n                        character tags.\n                    ')

    
    # Attribute Format uses Python identifier Format
    __Format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Format'), 'Format', '__httpwww_stibosystems_comstep_TagFormatType_Format', pyxb.binding.datatypes.string, required=True)
    __Format._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7607, 8)
    __Format._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7607, 8)
    
    Format = property(__Format.value, __Format.set, None, '\n                    Output format.\n                ')

    _ElementMap.update({
        __FormattingStart.name() : __FormattingStart,
        __FormattingStop.name() : __FormattingStop
    })
    _AttributeMap.update({
        __Format.name() : __Format
    })
_module_typeBindings.TagFormatType = TagFormatType
Namespace.addCategoryObject('typeBinding', 'TagFormatType', TagFormatType)


# Complex type {http://www.stibosystems.com/step}TagGroupListType with content type ELEMENT_ONLY
class TagGroupListType (pyxb.binding.basis.complexTypeDefinition):
    """
                The list of all tag groups.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TagGroupListType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7615, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}StyleTagGroup uses Python identifier StyleTagGroup
    __StyleTagGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StyleTagGroup'), 'StyleTagGroup', '__httpwww_stibosystems_comstep_TagGroupListType_httpwww_stibosystems_comstepStyleTagGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7622, 12), )

    
    StyleTagGroup = property(__StyleTagGroup.value, __StyleTagGroup.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SpecialCharacterTagGroup uses Python identifier SpecialCharacterTagGroup
    __SpecialCharacterTagGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SpecialCharacterTagGroup'), 'SpecialCharacterTagGroup', '__httpwww_stibosystems_comstep_TagGroupListType_httpwww_stibosystems_comstepSpecialCharacterTagGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7623, 12), )

    
    SpecialCharacterTagGroup = property(__SpecialCharacterTagGroup.value, __SpecialCharacterTagGroup.set, None, None)

    
    # Element {http://www.stibosystems.com/step}CharacterTagGroup uses Python identifier CharacterTagGroup
    __CharacterTagGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CharacterTagGroup'), 'CharacterTagGroup', '__httpwww_stibosystems_comstep_TagGroupListType_httpwww_stibosystems_comstepCharacterTagGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7625, 12), )

    
    CharacterTagGroup = property(__CharacterTagGroup.value, __CharacterTagGroup.set, None, None)

    
    # Element {http://www.stibosystems.com/step}FootnoteTagGroup uses Python identifier FootnoteTagGroup
    __FootnoteTagGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FootnoteTagGroup'), 'FootnoteTagGroup', '__httpwww_stibosystems_comstep_TagGroupListType_httpwww_stibosystems_comstepFootnoteTagGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7626, 12), )

    
    FootnoteTagGroup = property(__FootnoteTagGroup.value, __FootnoteTagGroup.set, None, None)

    
    # Element {http://www.stibosystems.com/step}HyperlinkTagGroup uses Python identifier HyperlinkTagGroup
    __HyperlinkTagGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HyperlinkTagGroup'), 'HyperlinkTagGroup', '__httpwww_stibosystems_comstep_TagGroupListType_httpwww_stibosystems_comstepHyperlinkTagGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7627, 12), )

    
    HyperlinkTagGroup = property(__HyperlinkTagGroup.value, __HyperlinkTagGroup.set, None, None)

    _ElementMap.update({
        __StyleTagGroup.name() : __StyleTagGroup,
        __SpecialCharacterTagGroup.name() : __SpecialCharacterTagGroup,
        __CharacterTagGroup.name() : __CharacterTagGroup,
        __FootnoteTagGroup.name() : __FootnoteTagGroup,
        __HyperlinkTagGroup.name() : __HyperlinkTagGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.TagGroupListType = TagGroupListType
Namespace.addCategoryObject('typeBinding', 'TagGroupListType', TagGroupListType)


# Complex type {http://www.stibosystems.com/step}TagListType with content type ELEMENT_ONLY
class TagListType (pyxb.binding.basis.complexTypeDefinition):
    """
                List of all tags in the system.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TagListType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7630, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Tag uses Python identifier Tag
    __Tag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Tag'), 'Tag', '__httpwww_stibosystems_comstep_TagListType_httpwww_stibosystems_comstepTag', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7637, 12), )

    
    Tag = property(__Tag.value, __Tag.set, None, '\n                        @Deprecated, for backward compatibility. Contains all the step tags only.\n                    ')

    
    # Element {http://www.stibosystems.com/step}StyleTag uses Python identifier StyleTag
    __StyleTag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StyleTag'), 'StyleTag', '__httpwww_stibosystems_comstep_TagListType_httpwww_stibosystems_comstepStyleTag', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7644, 12), )

    
    StyleTag = property(__StyleTag.value, __StyleTag.set, None, '\n                        A style tag.\n                    ')

    
    # Element {http://www.stibosystems.com/step}SpecialCharacterTag uses Python identifier SpecialCharacterTag
    __SpecialCharacterTag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SpecialCharacterTag'), 'SpecialCharacterTag', '__httpwww_stibosystems_comstep_TagListType_httpwww_stibosystems_comstepSpecialCharacterTag', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7651, 12), )

    
    SpecialCharacterTag = property(__SpecialCharacterTag.value, __SpecialCharacterTag.set, None, '\n                        A special character tag.\n                    ')

    
    # Element {http://www.stibosystems.com/step}CharacterTag uses Python identifier CharacterTag
    __CharacterTag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CharacterTag'), 'CharacterTag', '__httpwww_stibosystems_comstep_TagListType_httpwww_stibosystems_comstepCharacterTag', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7658, 12), )

    
    CharacterTag = property(__CharacterTag.value, __CharacterTag.set, None, '\n                        A character tag.\n                    ')

    
    # Element {http://www.stibosystems.com/step}FootnoteTag uses Python identifier FootnoteTag
    __FootnoteTag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FootnoteTag'), 'FootnoteTag', '__httpwww_stibosystems_comstep_TagListType_httpwww_stibosystems_comstepFootnoteTag', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7665, 12), )

    
    FootnoteTag = property(__FootnoteTag.value, __FootnoteTag.set, None, '\n                        A footnote tag.\n                    ')

    
    # Element {http://www.stibosystems.com/step}HyperlinkTag uses Python identifier HyperlinkTag
    __HyperlinkTag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HyperlinkTag'), 'HyperlinkTag', '__httpwww_stibosystems_comstep_TagListType_httpwww_stibosystems_comstepHyperlinkTag', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7672, 12), )

    
    HyperlinkTag = property(__HyperlinkTag.value, __HyperlinkTag.set, None, '\n                        A hyperlink tag.\n                    ')

    _ElementMap.update({
        __Tag.name() : __Tag,
        __StyleTag.name() : __StyleTag,
        __SpecialCharacterTag.name() : __SpecialCharacterTag,
        __CharacterTag.name() : __CharacterTag,
        __FootnoteTag.name() : __FootnoteTag,
        __HyperlinkTag.name() : __HyperlinkTag
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.TagListType = TagListType
Namespace.addCategoryObject('typeBinding', 'TagListType', TagListType)


# Complex type {http://www.stibosystems.com/step}TagType with content type EMPTY
class TagType (pyxb.binding.basis.complexTypeDefinition):
    """
                @Deprecated, for backward compatibility. Contains all the step tags only.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TagType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7681, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute Start uses Python identifier Start
    __Start = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Start'), 'Start', '__httpwww_stibosystems_comstep_TagType_Start', pyxb.binding.datatypes.string, required=True)
    __Start._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7687, 8)
    __Start._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7687, 8)
    
    Start = property(__Start.value, __Start.set, None, None)

    
    # Attribute Stop uses Python identifier Stop
    __Stop = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Stop'), 'Stop', '__httpwww_stibosystems_comstep_TagType_Stop', pyxb.binding.datatypes.string)
    __Stop._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7688, 8)
    __Stop._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7688, 8)
    
    Stop = property(__Stop.value, __Stop.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Start.name() : __Start,
        __Stop.name() : __Stop
    })
_module_typeBindings.TagType = TagType
Namespace.addCategoryObject('typeBinding', 'TagType', TagType)


# Complex type {http://www.stibosystems.com/step}TermsType with content type ELEMENT_ONLY
class TermsType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}TermsType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TermsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7770, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Term uses Python identifier Term
    __Term = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Term'), 'Term', '__httpwww_stibosystems_comstep_TermsType_httpwww_stibosystems_comstepTerm', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7772, 12), )

    
    Term = property(__Term.value, __Term.set, None, None)

    _ElementMap.update({
        __Term.name() : __Term
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.TermsType = TermsType
Namespace.addCategoryObject('typeBinding', 'TermsType', TermsType)


# Complex type {http://www.stibosystems.com/step}TextType with content type MIXED
class TextType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}TextType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TextType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7793, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Image uses Python identifier Image
    __Image = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Image'), 'Image', '__httpwww_stibosystems_comstep_TextType_httpwww_stibosystems_comstepImage', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7795, 12), )

    
    Image = property(__Image.value, __Image.set, None, None)

    _ElementMap.update({
        __Image.name() : __Image
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.TextType = TextType
Namespace.addCategoryObject('typeBinding', 'TextType', TextType)


# Complex type {http://www.stibosystems.com/step}TransformationLookupTableConfigurationsType with content type ELEMENT_ONLY
class TransformationLookupTableConfigurationsType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for transformation lookup tables.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TransformationLookupTableConfigurationsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7798, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}TransformationLookupTableConfiguration uses Python identifier TransformationLookupTableConfiguration
    __TransformationLookupTableConfiguration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TransformationLookupTableConfiguration'), 'TransformationLookupTableConfiguration', '__httpwww_stibosystems_comstep_TransformationLookupTableConfigurationsType_httpwww_stibosystems_comstepTransformationLookupTableConfiguration', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7805, 12), )

    
    TransformationLookupTableConfiguration = property(__TransformationLookupTableConfiguration.value, __TransformationLookupTableConfiguration.set, None, None)

    _ElementMap.update({
        __TransformationLookupTableConfiguration.name() : __TransformationLookupTableConfiguration
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.TransformationLookupTableConfigurationsType = TransformationLookupTableConfigurationsType
Namespace.addCategoryObject('typeBinding', 'TransformationLookupTableConfigurationsType', TransformationLookupTableConfigurationsType)


# Complex type {http://www.stibosystems.com/step}UnitListType with content type ELEMENT_ONLY
class UnitListType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for units and unit families / groups.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UnitListType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7901, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}UnitFamily uses Python identifier UnitFamily
    __UnitFamily = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UnitFamily'), 'UnitFamily', '__httpwww_stibosystems_comstep_UnitListType_httpwww_stibosystems_comstepUnitFamily', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7909, 16), )

    
    UnitFamily = property(__UnitFamily.value, __UnitFamily.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Unit uses Python identifier Unit
    __Unit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Unit'), 'Unit', '__httpwww_stibosystems_comstep_UnitListType_httpwww_stibosystems_comstepUnit', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7910, 16), )

    
    Unit = property(__Unit.value, __Unit.set, None, None)

    _ElementMap.update({
        __UnitFamily.name() : __UnitFamily,
        __Unit.name() : __Unit
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.UnitListType = UnitListType
Namespace.addCategoryObject('typeBinding', 'UnitListType', UnitListType)


# Complex type {http://www.stibosystems.com/step}UserGroupListType with content type ELEMENT_ONLY
class UserGroupListType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for user groups.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UserGroupListType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8041, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}UserGroup uses Python identifier UserGroup
    __UserGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UserGroup'), 'UserGroup', '__httpwww_stibosystems_comstep_UserGroupListType_httpwww_stibosystems_comstepUserGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8048, 12), )

    
    UserGroup = property(__UserGroup.value, __UserGroup.set, None, None)

    _ElementMap.update({
        __UserGroup.name() : __UserGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.UserGroupListType = UserGroupListType
Namespace.addCategoryObject('typeBinding', 'UserGroupListType', UserGroupListType)


# Complex type {http://www.stibosystems.com/step}UserListType with content type ELEMENT_ONLY
class UserListType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for user objects.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UserListType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8051, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}User uses Python identifier User
    __User = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'User'), 'User', '__httpwww_stibosystems_comstep_UserListType_httpwww_stibosystems_comstepUser', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8058, 12), )

    
    User = property(__User.value, __User.set, None, None)

    _ElementMap.update({
        __User.name() : __User
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.UserListType = UserListType
Namespace.addCategoryObject('typeBinding', 'UserListType', UserListType)


# Complex type {http://www.stibosystems.com/step}DataContainerKeyDefinitionType with content type ELEMENT_ONLY
class DataContainerKeyDefinitionType (pyxb.binding.basis.complexTypeDefinition):
    """
                The key definition type element provides the information of the keys configured for a data container
                type.
                This provides the information about IDs of Attributes and Reference Types which are configured in the
                key definition.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DataContainerKeyDefinitionType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8131, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Attribute uses Python identifier Attribute
    __Attribute = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Attribute'), 'Attribute', '__httpwww_stibosystems_comstep_DataContainerKeyDefinitionType_httpwww_stibosystems_comstepAttribute', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8141, 12), )

    
    Attribute = property(__Attribute.value, __Attribute.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ReferenceType uses Python identifier ReferenceType
    __ReferenceType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReferenceType'), 'ReferenceType', '__httpwww_stibosystems_comstep_DataContainerKeyDefinitionType_httpwww_stibosystems_comstepReferenceType', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8142, 12), )

    
    ReferenceType = property(__ReferenceType.value, __ReferenceType.set, None, None)

    _ElementMap.update({
        __Attribute.name() : __Attribute,
        __ReferenceType.name() : __ReferenceType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DataContainerKeyDefinitionType = DataContainerKeyDefinitionType
Namespace.addCategoryObject('typeBinding', 'DataContainerKeyDefinitionType', DataContainerKeyDefinitionType)


# Complex type {http://www.stibosystems.com/step}UserTypesType with content type ELEMENT_ONLY
class UserTypesType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for user types, i.e. object types.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UserTypesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8145, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}UserType uses Python identifier UserType
    __UserType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UserType'), 'UserType', '__httpwww_stibosystems_comstep_UserTypesType_httpwww_stibosystems_comstepUserType', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8152, 12), )

    
    UserType = property(__UserType.value, __UserType.set, None, None)

    _ElementMap.update({
        __UserType.name() : __UserType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.UserTypesType = UserTypesType
Namespace.addCategoryObject('typeBinding', 'UserTypesType', UserTypesType)


# Complex type {http://www.stibosystems.com/step}ValidationType with content type ELEMENT_ONLY
class ValidationType (pyxb.binding.basis.complexTypeDefinition):
    """
                The validation element provides information about how values in attributes or LOVs should be validated.
                The list of unit links defined allowed units to values in this attribute or LOV.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ValidationType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8155, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}UnitLink uses Python identifier UnitLink
    __UnitLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UnitLink'), 'UnitLink', '__httpwww_stibosystems_comstep_ValidationType_httpwww_stibosystems_comstepUnitLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8163, 12), )

    
    UnitLink = property(__UnitLink.value, __UnitLink.set, None, None)

    
    # Attribute MaxLength uses Python identifier MaxLength
    __MaxLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MaxLength'), 'MaxLength', '__httpwww_stibosystems_comstep_ValidationType_MaxLength', pyxb.binding.datatypes.string)
    __MaxLength._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8165, 8)
    __MaxLength._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8165, 8)
    
    MaxLength = property(__MaxLength.value, __MaxLength.set, None, '\n                    Maximum value length in bytes.\n                ')

    
    # Attribute InputMask uses Python identifier InputMask
    __InputMask = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'InputMask'), 'InputMask', '__httpwww_stibosystems_comstep_ValidationType_InputMask', pyxb.binding.datatypes.string)
    __InputMask._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8172, 8)
    __InputMask._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8172, 8)
    
    InputMask = property(__InputMask.value, __InputMask.set, None, "\n                    A mask for restricting values to a certain syntax: '9' matches a digit; '#' matches a digit, space,\n                    minus or plus; '?' matches a letter; 'a' matches a letter or a digit.\n                ")

    
    # Attribute MinValue uses Python identifier MinValue
    __MinValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MinValue'), 'MinValue', '__httpwww_stibosystems_comstep_ValidationType_MinValue', pyxb.binding.datatypes.string)
    __MinValue._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8180, 8)
    __MinValue._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8180, 8)
    
    MinValue = property(__MinValue.value, __MinValue.set, None, '\n                    The minimum value allowed for numerically validated attributes.\n                ')

    
    # Attribute BaseType uses Python identifier BaseType
    __BaseType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'BaseType'), 'BaseType', '__httpwww_stibosystems_comstep_ValidationType_BaseType', pyxb.binding.datatypes.string, unicode_default='text')
    __BaseType._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8187, 8)
    __BaseType._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8187, 8)
    
    BaseType = property(__BaseType.value, __BaseType.set, None, '\n                    The base type of values in this attribute or LOV. Legal values for standard\n                    systems are (however customizations can be made): text, number, integer,\n                    numeric_text, embedded_number, fraction, novalidation, boolean, date,\n                    isodate and isodatetime.\n                ')

    
    # Attribute MaxValue uses Python identifier MaxValue
    __MaxValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MaxValue'), 'MaxValue', '__httpwww_stibosystems_comstep_ValidationType_MaxValue', pyxb.binding.datatypes.string)
    __MaxValue._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8197, 8)
    __MaxValue._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8197, 8)
    
    MaxValue = property(__MaxValue.value, __MaxValue.set, None, '\n                    The maximum value allowed for numerically validated attributes.\n                ')

    _ElementMap.update({
        __UnitLink.name() : __UnitLink
    })
    _AttributeMap.update({
        __MaxLength.name() : __MaxLength,
        __InputMask.name() : __InputMask,
        __MinValue.name() : __MinValue,
        __BaseType.name() : __BaseType,
        __MaxValue.name() : __MaxValue
    })
_module_typeBindings.ValidationType = ValidationType
Namespace.addCategoryObject('typeBinding', 'ValidationType', ValidationType)


# Complex type {http://www.stibosystems.com/step}ValidObjectTypesType with content type ELEMENT_ONLY
class ValidObjectTypesType (pyxb.binding.basis.complexTypeDefinition):
    """
                Business rule object type validity.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ValidObjectTypesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8219, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}ValidObjectType uses Python identifier ValidObjectType
    __ValidObjectType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValidObjectType'), 'ValidObjectType', '__httpwww_stibosystems_comstep_ValidObjectTypesType_httpwww_stibosystems_comstepValidObjectType', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8226, 12), )

    
    ValidObjectType = property(__ValidObjectType.value, __ValidObjectType.set, None, None)

    
    # Attribute AllObjectTypesValid uses Python identifier AllObjectTypesValid
    __AllObjectTypesValid = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AllObjectTypesValid'), 'AllObjectTypesValid', '__httpwww_stibosystems_comstep_ValidObjectTypesType_AllObjectTypesValid', pyxb.binding.datatypes.boolean, required=True)
    __AllObjectTypesValid._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8228, 8)
    __AllObjectTypesValid._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8228, 8)
    
    AllObjectTypesValid = property(__AllObjectTypesValid.value, __AllObjectTypesValid.set, None, '\n                    Indicator whether all object types a valid for a business rule or not.\n                ')

    _ElementMap.update({
        __ValidObjectType.name() : __ValidObjectType
    })
    _AttributeMap.update({
        __AllObjectTypesValid.name() : __AllObjectTypesValid
    })
_module_typeBindings.ValidObjectTypesType = ValidObjectTypesType
Namespace.addCategoryObject('typeBinding', 'ValidObjectTypesType', ValidObjectTypesType)


# Complex type {http://www.stibosystems.com/step}ValueAspectDescriptorsType with content type ELEMENT_ONLY
class ValueAspectDescriptorsType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}ValueAspectDescriptorsType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ValueAspectDescriptorsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8236, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}ValueAspectDescriptor uses Python identifier ValueAspectDescriptor
    __ValueAspectDescriptor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValueAspectDescriptor'), 'ValueAspectDescriptor', '__httpwww_stibosystems_comstep_ValueAspectDescriptorsType_httpwww_stibosystems_comstepValueAspectDescriptor', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8238, 12), )

    
    ValueAspectDescriptor = property(__ValueAspectDescriptor.value, __ValueAspectDescriptor.set, None, None)

    _ElementMap.update({
        __ValueAspectDescriptor.name() : __ValueAspectDescriptor
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ValueAspectDescriptorsType = ValueAspectDescriptorsType
Namespace.addCategoryObject('typeBinding', 'ValueAspectDescriptorsType', ValueAspectDescriptorsType)


# Complex type {http://www.stibosystems.com/step}ValueAspectDescriptorType with content type ELEMENT_ONLY
class ValueAspectDescriptorType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}ValueAspectDescriptorType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ValueAspectDescriptorType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8241, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpwww_stibosystems_comstep_ValueAspectDescriptorType_id', pyxb.binding.datatypes.string, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8245, 8)
    __id._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8245, 8)
    
    id = property(__id.value, __id.set, None, '\n                    ID of the ValueAspectDescriptor element.\n                ')

    _HasWildcardElement = True
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.ValueAspectDescriptorType = ValueAspectDescriptorType
Namespace.addCategoryObject('typeBinding', 'ValueAspectDescriptorType', ValueAspectDescriptorType)


# Complex type {http://www.stibosystems.com/step}ValueFilterType with content type ELEMENT_ONLY
class ValueFilterType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}ValueFilterType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ValueFilterType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8321, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Value uses Python identifier Value
    __Value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Value'), 'Value', '__httpwww_stibosystems_comstep_ValueFilterType_httpwww_stibosystems_comstepValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8323, 12), )

    
    Value = property(__Value.value, __Value.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ValueGroup uses Python identifier ValueGroup
    __ValueGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValueGroup'), 'ValueGroup', '__httpwww_stibosystems_comstep_ValueFilterType_httpwww_stibosystems_comstepValueGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8324, 12), )

    
    ValueGroup = property(__ValueGroup.value, __ValueGroup.set, None, None)

    _ElementMap.update({
        __Value.name() : __Value,
        __ValueGroup.name() : __ValueGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ValueFilterType = ValueFilterType
Namespace.addCategoryObject('typeBinding', 'ValueFilterType', ValueFilterType)


# Complex type {http://www.stibosystems.com/step}ValuesType with content type ELEMENT_ONLY
class ValuesType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for values.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ValuesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8341, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Value uses Python identifier Value
    __Value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Value'), 'Value', '__httpwww_stibosystems_comstep_ValuesType_httpwww_stibosystems_comstepValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8348, 12), )

    
    Value = property(__Value.value, __Value.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MultiValue uses Python identifier MultiValue
    __MultiValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MultiValue'), 'MultiValue', '__httpwww_stibosystems_comstep_ValuesType_httpwww_stibosystems_comstepMultiValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8349, 12), )

    
    MultiValue = property(__MultiValue.value, __MultiValue.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ValueGroup uses Python identifier ValueGroup
    __ValueGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValueGroup'), 'ValueGroup', '__httpwww_stibosystems_comstep_ValuesType_httpwww_stibosystems_comstepValueGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8350, 12), )

    
    ValueGroup = property(__ValueGroup.value, __ValueGroup.set, None, None)

    _ElementMap.update({
        __Value.name() : __Value,
        __MultiValue.name() : __MultiValue,
        __ValueGroup.name() : __ValueGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ValuesType = ValuesType
Namespace.addCategoryObject('typeBinding', 'ValuesType', ValuesType)


# Complex type {http://www.stibosystems.com/step}VisibleTermFieldsType with content type ELEMENT_ONLY
class VisibleTermFieldsType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}VisibleTermFieldsType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VisibleTermFieldsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8390, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}VisibleTermField uses Python identifier VisibleTermField
    __VisibleTermField = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VisibleTermField'), 'VisibleTermField', '__httpwww_stibosystems_comstep_VisibleTermFieldsType_httpwww_stibosystems_comstepVisibleTermField', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8392, 12), )

    
    VisibleTermField = property(__VisibleTermField.value, __VisibleTermField.set, None, None)

    _ElementMap.update({
        __VisibleTermField.name() : __VisibleTermField
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.VisibleTermFieldsType = VisibleTermFieldsType
Namespace.addCategoryObject('typeBinding', 'VisibleTermFieldsType', VisibleTermFieldsType)


# Complex type {http://www.stibosystems.com/step}ScheduledProcessesType with content type ELEMENT_ONLY
class ScheduledProcessesType (pyxb.binding.basis.complexTypeDefinition):
    """
                A List of scheduled processed
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ScheduledProcessesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8467, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}ScheduledProcess uses Python identifier ScheduledProcess
    __ScheduledProcess = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScheduledProcess'), 'ScheduledProcess', '__httpwww_stibosystems_comstep_ScheduledProcessesType_httpwww_stibosystems_comstepScheduledProcess', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8474, 12), )

    
    ScheduledProcess = property(__ScheduledProcess.value, __ScheduledProcess.set, None, None)

    _ElementMap.update({
        __ScheduledProcess.name() : __ScheduledProcess
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ScheduledProcessesType = ScheduledProcessesType
Namespace.addCategoryObject('typeBinding', 'ScheduledProcessesType', ScheduledProcessesType)


# Complex type {http://www.stibosystems.com/step}AssetMarkerElementType with content type EMPTY
class AssetMarkerElementType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}AssetMarkerElementType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AssetMarkerElementType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 722, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ExtendToFrameID uses Python identifier ExtendToFrameID
    __ExtendToFrameID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ExtendToFrameID'), 'ExtendToFrameID', '__httpwww_stibosystems_comstep_AssetMarkerElementType_ExtendToFrameID', _module_typeBindings.StepID)
    __ExtendToFrameID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 723, 8)
    __ExtendToFrameID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 723, 8)
    
    ExtendToFrameID = property(__ExtendToFrameID.value, __ExtendToFrameID.set, None, None)

    
    # Attribute FrameID uses Python identifier FrameID
    __FrameID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'FrameID'), 'FrameID', '__httpwww_stibosystems_comstep_AssetMarkerElementType_FrameID', _module_typeBindings.StepID)
    __FrameID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 724, 8)
    __FrameID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 724, 8)
    
    FrameID = property(__FrameID.value, __FrameID.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ExtendToFrameID.name() : __ExtendToFrameID,
        __FrameID.name() : __FrameID
    })
_module_typeBindings.AssetMarkerElementType = AssetMarkerElementType
Namespace.addCategoryObject('typeBinding', 'AssetMarkerElementType', AssetMarkerElementType)


# Complex type {http://www.stibosystems.com/step}BulkUpdateConfigurationType with content type ELEMENT_ONLY
class BulkUpdateConfigurationType (pyxb.binding.basis.complexTypeDefinition):
    """
                A bulk update configuration.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BulkUpdateConfigurationType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1369, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_BulkUpdateConfigurationType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1376, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_BulkUpdateConfigurationType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1377, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ClassificationReference uses Python identifier ClassificationReference
    __ClassificationReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClassificationReference'), 'ClassificationReference', '__httpwww_stibosystems_comstep_BulkUpdateConfigurationType_httpwww_stibosystems_comstepClassificationReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1378, 12), )

    
    ClassificationReference = property(__ClassificationReference.value, __ClassificationReference.set, None, '\n                        The classification(s) that the configuration is present in.\n                    ')

    
    # Element {http://www.stibosystems.com/step}Configuration uses Python identifier Configuration
    __Configuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), 'Configuration', '__httpwww_stibosystems_comstep_BulkUpdateConfigurationType_httpwww_stibosystems_comstepConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1386, 12), )

    
    Configuration = property(__Configuration.value, __Configuration.set, None, '\n                        The configuration in encoded form.\n                    ')

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_BulkUpdateConfigurationType_ID', _module_typeBindings.StepID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1394, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1394, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    Global identification of the object. Not required for creation if auto IDs are configured for the\n                    object type.\n                ')

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __ClassificationReference.name() : __ClassificationReference,
        __Configuration.name() : __Configuration
    })
    _AttributeMap.update({
        __ID.name() : __ID
    })
_module_typeBindings.BulkUpdateConfigurationType = BulkUpdateConfigurationType
Namespace.addCategoryObject('typeBinding', 'BulkUpdateConfigurationType', BulkUpdateConfigurationType)


# Complex type {http://www.stibosystems.com/step}ChangePackageType with content type ELEMENT_ONLY
class ChangePackageType (pyxb.binding.basis.complexTypeDefinition):
    """
                A change package.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ChangePackageType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1616, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}SetupGroupLink uses Python identifier SetupGroupLink
    __SetupGroupLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink'), 'SetupGroupLink', '__httpwww_stibosystems_comstep_ChangePackageType_httpwww_stibosystems_comstepSetupGroupLink', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1623, 12), )

    
    SetupGroupLink = property(__SetupGroupLink.value, __SetupGroupLink.set, None, '\n                        The setup group the package is located in.\n                    ')

    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_ChangePackageType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1630, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_ChangePackageType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1631, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Configuration uses Python identifier Configuration
    __Configuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), 'Configuration', '__httpwww_stibosystems_comstep_ChangePackageType_httpwww_stibosystems_comstepConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1632, 12), )

    
    Configuration = property(__Configuration.value, __Configuration.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_ChangePackageType_ID', _module_typeBindings.StepID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1634, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1634, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_ChangePackageType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1635, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1635, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_ChangePackageType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1636, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1636, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_ChangePackageType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1637, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1637, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __SetupGroupLink.name() : __SetupGroupLink,
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __Configuration.name() : __Configuration
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed
    })
_module_typeBindings.ChangePackageType = ChangePackageType
Namespace.addCategoryObject('typeBinding', 'ChangePackageType', ChangePackageType)


# Complex type {http://www.stibosystems.com/step}CharacterTagGroupType with content type ELEMENT_ONLY
class CharacterTagGroupType (pyxb.binding.basis.complexTypeDefinition):
    """
                A tag group holding a number of tags and tag groups.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CharacterTagGroupType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1639, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_CharacterTagGroupType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1646, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_CharacterTagGroupType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1647, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeGroupLink uses Python identifier AttributeGroupLink
    __AttributeGroupLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), 'AttributeGroupLink', '__httpwww_stibosystems_comstep_CharacterTagGroupType_httpwww_stibosystems_comstepAttributeGroupLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1648, 12), )

    
    AttributeGroupLink = property(__AttributeGroupLink.value, __AttributeGroupLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}CharacterTagGroup uses Python identifier CharacterTagGroup
    __CharacterTagGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CharacterTagGroup'), 'CharacterTagGroup', '__httpwww_stibosystems_comstep_CharacterTagGroupType_httpwww_stibosystems_comstepCharacterTagGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1649, 12), )

    
    CharacterTagGroup = property(__CharacterTagGroup.value, __CharacterTagGroup.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_CharacterTagGroupType_ID', _module_typeBindings.StepID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1651, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1651, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    Global identification of the object.\n                ')

    
    # Attribute ParentID uses Python identifier ParentID
    __ParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ParentID'), 'ParentID', '__httpwww_stibosystems_comstep_CharacterTagGroupType_ParentID', _module_typeBindings.StepID)
    __ParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1658, 8)
    __ParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1658, 8)
    
    ParentID = property(__ParentID.value, __ParentID.set, None, '\n                    ID of the parent tag group. When creating new group during import either ParentID or parent node is\n                    required.\n                ')

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_CharacterTagGroupType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1666, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1666, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_CharacterTagGroupType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1667, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1667, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_CharacterTagGroupType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1668, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1668, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __AttributeGroupLink.name() : __AttributeGroupLink,
        __CharacterTagGroup.name() : __CharacterTagGroup
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __ParentID.name() : __ParentID,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed
    })
_module_typeBindings.CharacterTagGroupType = CharacterTagGroupType
Namespace.addCategoryObject('typeBinding', 'CharacterTagGroupType', CharacterTagGroupType)


# Complex type {http://www.stibosystems.com/step}DataContainerType with content type ELEMENT_ONLY
class DataContainerType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a data container object for a multi valued data container type.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DataContainerType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2582, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Values uses Python identifier Values
    __Values = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Values'), 'Values', '__httpwww_stibosystems_comstep_DataContainerType_httpwww_stibosystems_comstepValues', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2589, 12), )

    
    Values = property(__Values.value, __Values.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AssetCrossReference uses Python identifier AssetCrossReference
    __AssetCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssetCrossReference'), 'AssetCrossReference', '__httpwww_stibosystems_comstep_DataContainerType_httpwww_stibosystems_comstepAssetCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2590, 12), )

    
    AssetCrossReference = property(__AssetCrossReference.value, __AssetCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteAssetCrossReference uses Python identifier DeleteAssetCrossReference
    __DeleteAssetCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteAssetCrossReference'), 'DeleteAssetCrossReference', '__httpwww_stibosystems_comstep_DataContainerType_httpwww_stibosystems_comstepDeleteAssetCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2591, 12), )

    
    DeleteAssetCrossReference = property(__DeleteAssetCrossReference.value, __DeleteAssetCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ClassificationCrossReference uses Python identifier ClassificationCrossReference
    __ClassificationCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClassificationCrossReference'), 'ClassificationCrossReference', '__httpwww_stibosystems_comstep_DataContainerType_httpwww_stibosystems_comstepClassificationCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2592, 12), )

    
    ClassificationCrossReference = property(__ClassificationCrossReference.value, __ClassificationCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteClassificationReference uses Python identifier DeleteClassificationReference
    __DeleteClassificationReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteClassificationReference'), 'DeleteClassificationReference', '__httpwww_stibosystems_comstep_DataContainerType_httpwww_stibosystems_comstepDeleteClassificationReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2593, 12), )

    
    DeleteClassificationReference = property(__DeleteClassificationReference.value, __DeleteClassificationReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}EntityCrossReference uses Python identifier EntityCrossReference
    __EntityCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EntityCrossReference'), 'EntityCrossReference', '__httpwww_stibosystems_comstep_DataContainerType_httpwww_stibosystems_comstepEntityCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2594, 12), )

    
    EntityCrossReference = property(__EntityCrossReference.value, __EntityCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteEntityCrossReference uses Python identifier DeleteEntityCrossReference
    __DeleteEntityCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteEntityCrossReference'), 'DeleteEntityCrossReference', '__httpwww_stibosystems_comstep_DataContainerType_httpwww_stibosystems_comstepDeleteEntityCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2595, 12), )

    
    DeleteEntityCrossReference = property(__DeleteEntityCrossReference.value, __DeleteEntityCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ProductCrossReference uses Python identifier ProductCrossReference
    __ProductCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ProductCrossReference'), 'ProductCrossReference', '__httpwww_stibosystems_comstep_DataContainerType_httpwww_stibosystems_comstepProductCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2596, 12), )

    
    ProductCrossReference = property(__ProductCrossReference.value, __ProductCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteProductCrossReference uses Python identifier DeleteProductCrossReference
    __DeleteProductCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteProductCrossReference'), 'DeleteProductCrossReference', '__httpwww_stibosystems_comstep_DataContainerType_httpwww_stibosystems_comstepDeleteProductCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2597, 12), )

    
    DeleteProductCrossReference = property(__DeleteProductCrossReference.value, __DeleteProductCrossReference.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_DataContainerType_ID', _module_typeBindings.StepID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2599, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2599, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    ID of the data container object. Must be supplied.\n                ')

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_DataContainerType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2606, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2606, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __Values.name() : __Values,
        __AssetCrossReference.name() : __AssetCrossReference,
        __DeleteAssetCrossReference.name() : __DeleteAssetCrossReference,
        __ClassificationCrossReference.name() : __ClassificationCrossReference,
        __DeleteClassificationReference.name() : __DeleteClassificationReference,
        __EntityCrossReference.name() : __EntityCrossReference,
        __DeleteEntityCrossReference.name() : __DeleteEntityCrossReference,
        __ProductCrossReference.name() : __ProductCrossReference,
        __DeleteProductCrossReference.name() : __DeleteProductCrossReference
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __Changed.name() : __Changed
    })
_module_typeBindings.DataContainerType = DataContainerType
Namespace.addCategoryObject('typeBinding', 'DataContainerType', DataContainerType)


# Complex type {http://www.stibosystems.com/step}DeleteDataContainerType with content type ELEMENT_ONLY
class DeleteDataContainerType (pyxb.binding.basis.complexTypeDefinition):
    """
                Import instruction that can be used to delete a data container object for a multi-valued data
                container, either by data container object ID, by data container type or by data container type key.
                Never exported.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteDataContainerType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2927, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Values uses Python identifier Values
    __Values = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Values'), 'Values', '__httpwww_stibosystems_comstep_DeleteDataContainerType_httpwww_stibosystems_comstepValues', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2936, 12), )

    
    Values = property(__Values.value, __Values.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AssetCrossReference uses Python identifier AssetCrossReference
    __AssetCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssetCrossReference'), 'AssetCrossReference', '__httpwww_stibosystems_comstep_DeleteDataContainerType_httpwww_stibosystems_comstepAssetCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2937, 12), )

    
    AssetCrossReference = property(__AssetCrossReference.value, __AssetCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ClassificationCrossReference uses Python identifier ClassificationCrossReference
    __ClassificationCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClassificationCrossReference'), 'ClassificationCrossReference', '__httpwww_stibosystems_comstep_DeleteDataContainerType_httpwww_stibosystems_comstepClassificationCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2938, 12), )

    
    ClassificationCrossReference = property(__ClassificationCrossReference.value, __ClassificationCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}EntityCrossReference uses Python identifier EntityCrossReference
    __EntityCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EntityCrossReference'), 'EntityCrossReference', '__httpwww_stibosystems_comstep_DeleteDataContainerType_httpwww_stibosystems_comstepEntityCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2939, 12), )

    
    EntityCrossReference = property(__EntityCrossReference.value, __EntityCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ProductCrossReference uses Python identifier ProductCrossReference
    __ProductCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ProductCrossReference'), 'ProductCrossReference', '__httpwww_stibosystems_comstep_DeleteDataContainerType_httpwww_stibosystems_comstepProductCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2940, 12), )

    
    ProductCrossReference = property(__ProductCrossReference.value, __ProductCrossReference.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_DeleteDataContainerType_ID', _module_typeBindings.StepID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2942, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2942, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    ID of the data container object to delete.\n                ')

    _ElementMap.update({
        __Values.name() : __Values,
        __AssetCrossReference.name() : __AssetCrossReference,
        __ClassificationCrossReference.name() : __ClassificationCrossReference,
        __EntityCrossReference.name() : __EntityCrossReference,
        __ProductCrossReference.name() : __ProductCrossReference
    })
    _AttributeMap.update({
        __ID.name() : __ID
    })
_module_typeBindings.DeleteDataContainerType = DeleteDataContainerType
Namespace.addCategoryObject('typeBinding', 'DeleteDataContainerType', DeleteDataContainerType)


# Complex type {http://www.stibosystems.com/step}DeleteUnitOrFamilyType with content type EMPTY
class DeleteUnitOrFamilyType (pyxb.binding.basis.complexTypeDefinition):
    """
                For exports this element informs downstream systems that a unit or unit family has been deleted. Only
                present when the STEPXML has been produced by an event based outbound integration endpoint that uses the
                "Advanced STEPXML" format plugin with the '' instruction in the output template.
                Ignored on import.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteUnitOrFamilyType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3244, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_DeleteUnitOrFamilyType_ID', _module_typeBindings.StepID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3253, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3253, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ID.name() : __ID
    })
_module_typeBindings.DeleteUnitOrFamilyType = DeleteUnitOrFamilyType
Namespace.addCategoryObject('typeBinding', 'DeleteUnitOrFamilyType', DeleteUnitOrFamilyType)


# Complex type {http://www.stibosystems.com/step}DeleteValueType with content type MIXED
class DeleteValueType (pyxb.binding.basis.complexTypeDefinition):
    """
                Import instruction for deleting a specific value from an LOV.
                Only available for LOVs using value IDs.
                If the containing LOV is using replace-value mode, this instruction is ignored and will yield a warning
                instead.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteValueType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3265, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute Force uses Python identifier Force
    __Force = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Force'), 'Force', '__httpwww_stibosystems_comstep_DeleteValueType_Force', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Force._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3274, 8)
    __Force._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3274, 8)
    
    Force = property(__Force.value, __Force.set, None, '\n                    Set to true if the value should be deleted despite being in use somewhere.\n                    Default is false, so deletion will be prevented if values are currently visible in any workspace.\n                ')

    
    # Attribute GenerateEvents uses Python identifier GenerateEvents
    __GenerateEvents = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'GenerateEvents'), 'GenerateEvents', '__httpwww_stibosystems_comstep_DeleteValueType_GenerateEvents', pyxb.binding.datatypes.boolean, unicode_default='false')
    __GenerateEvents._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3282, 8)
    __GenerateEvents._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3282, 8)
    
    GenerateEvents = property(__GenerateEvents.value, __GenerateEvents.set, None, '\n                    Set to true if events for affected objects should be generated during deletion of values actually\n                    in use.\n                    Default is false, so deletion will appear silently, not affecting downstream systems.\n                ')

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_DeleteValueType_ID', _module_typeBindings.LOVValueID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3291, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3291, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    ID of the LOV value to delete.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Force.name() : __Force,
        __GenerateEvents.name() : __GenerateEvents,
        __ID.name() : __ID
    })
_module_typeBindings.DeleteValueType = DeleteValueType
Namespace.addCategoryObject('typeBinding', 'DeleteValueType', DeleteValueType)


# Complex type {http://www.stibosystems.com/step}EdgeTypeType with content type ELEMENT_ONLY
class EdgeTypeType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents an edge / link type that comes with the system and cannot be deleted.
                Only "CA" (classification to attribute link type) and "PA" (product to attribute link type) can have
                valid metadata attributes. The attribute validity for these types can be expressed from both the edge /
                link type and from the attribute.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EdgeTypeType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3464, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}DimensionLink uses Python identifier DimensionLink
    __DimensionLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink'), 'DimensionLink', '__httpwww_stibosystems_comstep_EdgeTypeType_httpwww_stibosystems_comstepDimensionLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3474, 12), )

    
    DimensionLink = property(__DimensionLink.value, __DimensionLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeLink uses Python identifier AttributeLink
    __AttributeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink'), 'AttributeLink', '__httpwww_stibosystems_comstep_EdgeTypeType_httpwww_stibosystems_comstepAttributeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3475, 12), )

    
    AttributeLink = property(__AttributeLink.value, __AttributeLink.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_EdgeTypeType_ID', _module_typeBindings.STD_ANON_8, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3477, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3477, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    _ElementMap.update({
        __DimensionLink.name() : __DimensionLink,
        __AttributeLink.name() : __AttributeLink
    })
    _AttributeMap.update({
        __ID.name() : __ID
    })
_module_typeBindings.EdgeTypeType = EdgeTypeType
Namespace.addCategoryObject('typeBinding', 'EdgeTypeType', EdgeTypeType)


# Complex type {http://www.stibosystems.com/step}FootnoteTagGroupType with content type ELEMENT_ONLY
class FootnoteTagGroupType (pyxb.binding.basis.complexTypeDefinition):
    """
                An tag group holding a number of tags and tag groups.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FootnoteTagGroupType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4007, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_FootnoteTagGroupType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4014, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_FootnoteTagGroupType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4015, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeGroupLink uses Python identifier AttributeGroupLink
    __AttributeGroupLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), 'AttributeGroupLink', '__httpwww_stibosystems_comstep_FootnoteTagGroupType_httpwww_stibosystems_comstepAttributeGroupLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4016, 12), )

    
    AttributeGroupLink = property(__AttributeGroupLink.value, __AttributeGroupLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}FootnoteTagGroup uses Python identifier FootnoteTagGroup
    __FootnoteTagGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FootnoteTagGroup'), 'FootnoteTagGroup', '__httpwww_stibosystems_comstep_FootnoteTagGroupType_httpwww_stibosystems_comstepFootnoteTagGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4017, 12), )

    
    FootnoteTagGroup = property(__FootnoteTagGroup.value, __FootnoteTagGroup.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_FootnoteTagGroupType_ID', _module_typeBindings.StepID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4019, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4019, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    Global identification of the object.\n                ')

    
    # Attribute ParentID uses Python identifier ParentID
    __ParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ParentID'), 'ParentID', '__httpwww_stibosystems_comstep_FootnoteTagGroupType_ParentID', _module_typeBindings.StepID)
    __ParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4026, 8)
    __ParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4026, 8)
    
    ParentID = property(__ParentID.value, __ParentID.set, None, '\n                    ID of the parent tag group. When creating new group during import either ParentID or parent node is required.\n                ')

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_FootnoteTagGroupType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4033, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4033, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_FootnoteTagGroupType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4034, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4034, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_FootnoteTagGroupType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4035, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4035, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __AttributeGroupLink.name() : __AttributeGroupLink,
        __FootnoteTagGroup.name() : __FootnoteTagGroup
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __ParentID.name() : __ParentID,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed
    })
_module_typeBindings.FootnoteTagGroupType = FootnoteTagGroupType
Namespace.addCategoryObject('typeBinding', 'FootnoteTagGroupType', FootnoteTagGroupType)


# Complex type {http://www.stibosystems.com/step}GDSNReceiverUnitType with content type EMPTY
class GDSNReceiverUnitType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}GDSNReceiverUnitType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GDSNReceiverUnitType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4163, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_GDSNReceiverUnitType_ID', _module_typeBindings.StepID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4164, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4164, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ID.name() : __ID
    })
_module_typeBindings.GDSNReceiverUnitType = GDSNReceiverUnitType
Namespace.addCategoryObject('typeBinding', 'GDSNReceiverUnitType', GDSNReceiverUnitType)


# Complex type {http://www.stibosystems.com/step}HyperlinkTagGroupType with content type ELEMENT_ONLY
class HyperlinkTagGroupType (pyxb.binding.basis.complexTypeDefinition):
    """
                An tag group holding a number of tags and tag groups.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HyperlinkTagGroupType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4192, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_HyperlinkTagGroupType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4199, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_HyperlinkTagGroupType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4200, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeGroupLink uses Python identifier AttributeGroupLink
    __AttributeGroupLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), 'AttributeGroupLink', '__httpwww_stibosystems_comstep_HyperlinkTagGroupType_httpwww_stibosystems_comstepAttributeGroupLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4201, 12), )

    
    AttributeGroupLink = property(__AttributeGroupLink.value, __AttributeGroupLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}HyperlinkTagGroup uses Python identifier HyperlinkTagGroup
    __HyperlinkTagGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HyperlinkTagGroup'), 'HyperlinkTagGroup', '__httpwww_stibosystems_comstep_HyperlinkTagGroupType_httpwww_stibosystems_comstepHyperlinkTagGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4202, 12), )

    
    HyperlinkTagGroup = property(__HyperlinkTagGroup.value, __HyperlinkTagGroup.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_HyperlinkTagGroupType_ID', _module_typeBindings.StepID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4204, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4204, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    Global identification of the object.\n                ')

    
    # Attribute ParentID uses Python identifier ParentID
    __ParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ParentID'), 'ParentID', '__httpwww_stibosystems_comstep_HyperlinkTagGroupType_ParentID', _module_typeBindings.StepID)
    __ParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4211, 8)
    __ParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4211, 8)
    
    ParentID = property(__ParentID.value, __ParentID.set, None, '\n                    ID of the parent tag group. When creating new group during import either ParentID or parent node is\n                    required.\n                ')

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_HyperlinkTagGroupType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4219, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4219, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_HyperlinkTagGroupType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4220, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4220, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_HyperlinkTagGroupType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4221, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4221, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __AttributeGroupLink.name() : __AttributeGroupLink,
        __HyperlinkTagGroup.name() : __HyperlinkTagGroup
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __ParentID.name() : __ParentID,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed
    })
_module_typeBindings.HyperlinkTagGroupType = HyperlinkTagGroupType
Namespace.addCategoryObject('typeBinding', 'HyperlinkTagGroupType', HyperlinkTagGroupType)


# Complex type {http://www.stibosystems.com/step}LinkTypeType with content type EMPTY
class LinkTypeType (pyxb.binding.basis.complexTypeDefinition):
    """
                A link from an attribute to an edge / link type.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LinkTypeType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4652, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute LinkTypeID uses Python identifier LinkTypeID
    __LinkTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LinkTypeID'), 'LinkTypeID', '__httpwww_stibosystems_comstep_LinkTypeType_LinkTypeID', _module_typeBindings.STD_ANON_11, required=True)
    __LinkTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4658, 8)
    __LinkTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4658, 8)
    
    LinkTypeID = property(__LinkTypeID.value, __LinkTypeID.set, None, '\n                    Either "CA" (classification to attribute link type) or "PA" (product to attribute link type).\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __LinkTypeID.name() : __LinkTypeID
    })
_module_typeBindings.LinkTypeType = LinkTypeType
Namespace.addCategoryObject('typeBinding', 'LinkTypeType', LinkTypeType)


# Complex type {http://www.stibosystems.com/step}MatchCodeObjectSubsetLink with content type EMPTY
class MatchCodeObjectSubsetLink (pyxb.binding.basis.complexTypeDefinition):
    """
                A link indicating the hierarchy where the match code is valid. The type is given by the element this
                type is used with, i.e. an element with name "ValidForProductHierarchy" indicates the ID is a product
                ID.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MatchCodeObjectSubsetLink')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4883, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_MatchCodeObjectSubsetLink_ID', _module_typeBindings.StepID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4891, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4891, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ID.name() : __ID
    })
_module_typeBindings.MatchCodeObjectSubsetLink = MatchCodeObjectSubsetLink
Namespace.addCategoryObject('typeBinding', 'MatchCodeObjectSubsetLink', MatchCodeObjectSubsetLink)


# Complex type {http://www.stibosystems.com/step}NoteElementType with content type ELEMENT_ONLY
class NoteElementType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}NoteElementType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NoteElementType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5157, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}NoteRecord uses Python identifier NoteRecord
    __NoteRecord = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NoteRecord'), 'NoteRecord', '__httpwww_stibosystems_comstep_NoteElementType_httpwww_stibosystems_comstepNoteRecord', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5159, 12), )

    
    NoteRecord = property(__NoteRecord.value, __NoteRecord.set, None, None)

    
    # Attribute Status uses Python identifier Status
    __Status = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Status'), 'Status', '__httpwww_stibosystems_comstep_NoteElementType_Status', pyxb.binding.datatypes.string, required=True)
    __Status._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5161, 8)
    __Status._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5161, 8)
    
    Status = property(__Status.value, __Status.set, None, None)

    
    # Attribute ExtendToFrameID uses Python identifier ExtendToFrameID
    __ExtendToFrameID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ExtendToFrameID'), 'ExtendToFrameID', '__httpwww_stibosystems_comstep_NoteElementType_ExtendToFrameID', _module_typeBindings.StepID)
    __ExtendToFrameID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5162, 8)
    __ExtendToFrameID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5162, 8)
    
    ExtendToFrameID = property(__ExtendToFrameID.value, __ExtendToFrameID.set, None, None)

    
    # Attribute FrameID uses Python identifier FrameID
    __FrameID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'FrameID'), 'FrameID', '__httpwww_stibosystems_comstep_NoteElementType_FrameID', _module_typeBindings.StepID)
    __FrameID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5163, 8)
    __FrameID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5163, 8)
    
    FrameID = property(__FrameID.value, __FrameID.set, None, None)

    _ElementMap.update({
        __NoteRecord.name() : __NoteRecord
    })
    _AttributeMap.update({
        __Status.name() : __Status,
        __ExtendToFrameID.name() : __ExtendToFrameID,
        __FrameID.name() : __FrameID
    })
_module_typeBindings.NoteElementType = NoteElementType
Namespace.addCategoryObject('typeBinding', 'NoteElementType', NoteElementType)


# Complex type {http://www.stibosystems.com/step}OnApproveType with content type ELEMENT_ONLY
class OnApproveType (pyxb.binding.basis.complexTypeDefinition):
    """
                Rules for evaluation of conditions / execution of actions on approval.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OnApproveType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5182, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}LocalBusinessRule uses Python identifier LocalBusinessRule
    __LocalBusinessRule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LocalBusinessRule'), 'LocalBusinessRule', '__httpwww_stibosystems_comstep_OnApproveType_httpwww_stibosystems_comstepLocalBusinessRule', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5189, 12), )

    
    LocalBusinessRule = property(__LocalBusinessRule.value, __LocalBusinessRule.set, None, '\n                        @Deprecated, may be removed in a future release.\n                    ')

    
    # Attribute ApproveSetup uses Python identifier ApproveSetup
    __ApproveSetup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ApproveSetup'), 'ApproveSetup', '__httpwww_stibosystems_comstep_OnApproveType_ApproveSetup', _module_typeBindings.STD_ANON_14, required=True)
    __ApproveSetup._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5197, 8)
    __ApproveSetup._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5197, 8)
    
    ApproveSetup = property(__ApproveSetup.value, __ApproveSetup.set, None, '\n                    The setting for evaluation / execution on approval. "Never" applies for both actions and conditions\n                    while "Trigger" only applies for actions and the remaining options only for conditions.\n                ')

    
    # Attribute Condition uses Python identifier Condition
    __Condition = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Condition'), 'Condition', '__httpwww_stibosystems_comstep_OnApproveType_Condition', _module_typeBindings.StepID)
    __Condition._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5214, 8)
    __Condition._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5214, 8)
    
    Condition = property(__Condition.value, __Condition.set, None, '\n                    @Deprecated, may be removed in a future release.\n                ')

    _ElementMap.update({
        __LocalBusinessRule.name() : __LocalBusinessRule
    })
    _AttributeMap.update({
        __ApproveSetup.name() : __ApproveSetup,
        __Condition.name() : __Condition
    })
_module_typeBindings.OnApproveType = OnApproveType
Namespace.addCategoryObject('typeBinding', 'OnApproveType', OnApproveType)


# Complex type {http://www.stibosystems.com/step}PageType with content type ELEMENT_ONLY
class PageType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}PageType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PageType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5519, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_PageType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5521, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SuppressedClassificationReference uses Python identifier SuppressedClassificationReference
    __SuppressedClassificationReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SuppressedClassificationReference'), 'SuppressedClassificationReference', '__httpwww_stibosystems_comstep_PageType_httpwww_stibosystems_comstepSuppressedClassificationReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5522, 12), )

    
    SuppressedClassificationReference = property(__SuppressedClassificationReference.value, __SuppressedClassificationReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ClassificationReference uses Python identifier ClassificationReference
    __ClassificationReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClassificationReference'), 'ClassificationReference', '__httpwww_stibosystems_comstep_PageType_httpwww_stibosystems_comstepClassificationReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5524, 12), )

    
    ClassificationReference = property(__ClassificationReference.value, __ClassificationReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SuppressedProductCrossReference uses Python identifier SuppressedProductCrossReference
    __SuppressedProductCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SuppressedProductCrossReference'), 'SuppressedProductCrossReference', '__httpwww_stibosystems_comstep_PageType_httpwww_stibosystems_comstepSuppressedProductCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5526, 12), )

    
    SuppressedProductCrossReference = property(__SuppressedProductCrossReference.value, __SuppressedProductCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ProductCrossReference uses Python identifier ProductCrossReference
    __ProductCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ProductCrossReference'), 'ProductCrossReference', '__httpwww_stibosystems_comstep_PageType_httpwww_stibosystems_comstepProductCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5528, 12), )

    
    ProductCrossReference = property(__ProductCrossReference.value, __ProductCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SuppressedAssetCrossReference uses Python identifier SuppressedAssetCrossReference
    __SuppressedAssetCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SuppressedAssetCrossReference'), 'SuppressedAssetCrossReference', '__httpwww_stibosystems_comstep_PageType_httpwww_stibosystems_comstepSuppressedAssetCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5530, 12), )

    
    SuppressedAssetCrossReference = property(__SuppressedAssetCrossReference.value, __SuppressedAssetCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AssetCrossReference uses Python identifier AssetCrossReference
    __AssetCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssetCrossReference'), 'AssetCrossReference', '__httpwww_stibosystems_comstep_PageType_httpwww_stibosystems_comstepAssetCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5532, 12), )

    
    AssetCrossReference = property(__AssetCrossReference.value, __AssetCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Values uses Python identifier Values
    __Values = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Values'), 'Values', '__httpwww_stibosystems_comstep_PageType_httpwww_stibosystems_comstepValues', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5533, 12), )

    
    Values = property(__Values.value, __Values.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_PageType_ID', _module_typeBindings.StepID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5535, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5535, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute VersionID uses Python identifier VersionID
    __VersionID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'VersionID'), 'VersionID', '__httpwww_stibosystems_comstep_PageType_VersionID', _module_typeBindings.StepID, required=True)
    __VersionID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5536, 8)
    __VersionID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5536, 8)
    
    VersionID = property(__VersionID.value, __VersionID.set, None, None)

    
    # Attribute PageNumber uses Python identifier PageNumber
    __PageNumber = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PageNumber'), 'PageNumber', '__httpwww_stibosystems_comstep_PageType_PageNumber', pyxb.binding.datatypes.string)
    __PageNumber._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5537, 8)
    __PageNumber._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5537, 8)
    
    PageNumber = property(__PageNumber.value, __PageNumber.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __SuppressedClassificationReference.name() : __SuppressedClassificationReference,
        __ClassificationReference.name() : __ClassificationReference,
        __SuppressedProductCrossReference.name() : __SuppressedProductCrossReference,
        __ProductCrossReference.name() : __ProductCrossReference,
        __SuppressedAssetCrossReference.name() : __SuppressedAssetCrossReference,
        __AssetCrossReference.name() : __AssetCrossReference,
        __Values.name() : __Values
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __VersionID.name() : __VersionID,
        __PageNumber.name() : __PageNumber
    })
_module_typeBindings.PageType = PageType
Namespace.addCategoryObject('typeBinding', 'PageType', PageType)


# Complex type {http://www.stibosystems.com/step}PageTemplateLinkType with content type EMPTY
class PageTemplateLinkType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}PageTemplateLinkType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PageTemplateLinkType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5551, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute PageTemplateID uses Python identifier PageTemplateID
    __PageTemplateID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PageTemplateID'), 'PageTemplateID', '__httpwww_stibosystems_comstep_PageTemplateLinkType_PageTemplateID', _module_typeBindings.StepID, required=True)
    __PageTemplateID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5552, 8)
    __PageTemplateID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5552, 8)
    
    PageTemplateID = property(__PageTemplateID.value, __PageTemplateID.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __PageTemplateID.name() : __PageTemplateID
    })
_module_typeBindings.PageTemplateLinkType = PageTemplateLinkType
Namespace.addCategoryObject('typeBinding', 'PageTemplateLinkType', PageTemplateLinkType)


# Complex type {http://www.stibosystems.com/step}PickupLayoutType with content type EMPTY
class PickupLayoutType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}PickupLayoutType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PickupLayoutType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5565, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ActualPageID uses Python identifier ActualPageID
    __ActualPageID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ActualPageID'), 'ActualPageID', '__httpwww_stibosystems_comstep_PickupLayoutType_ActualPageID', _module_typeBindings.StepID, required=True)
    __ActualPageID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5566, 8)
    __ActualPageID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5566, 8)
    
    ActualPageID = property(__ActualPageID.value, __ActualPageID.set, None, None)

    
    # Attribute KeepLayout uses Python identifier KeepLayout
    __KeepLayout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'KeepLayout'), 'KeepLayout', '__httpwww_stibosystems_comstep_PickupLayoutType_KeepLayout', pyxb.binding.datatypes.boolean)
    __KeepLayout._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5567, 8)
    __KeepLayout._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5567, 8)
    
    KeepLayout = property(__KeepLayout.value, __KeepLayout.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ActualPageID.name() : __ActualPageID,
        __KeepLayout.name() : __KeepLayout
    })
_module_typeBindings.PickupLayoutType = PickupLayoutType
Namespace.addCategoryObject('typeBinding', 'PickupLayoutType', PickupLayoutType)


# Complex type {http://www.stibosystems.com/step}PickupPageType with content type EMPTY
class PickupPageType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}PickupPageType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PickupPageType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5569, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ActualPageID uses Python identifier ActualPageID
    __ActualPageID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ActualPageID'), 'ActualPageID', '__httpwww_stibosystems_comstep_PickupPageType_ActualPageID', _module_typeBindings.StepID, required=True)
    __ActualPageID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5570, 8)
    __ActualPageID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5570, 8)
    
    ActualPageID = property(__ActualPageID.value, __ActualPageID.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ActualPageID.name() : __ActualPageID
    })
_module_typeBindings.PickupPageType = PickupPageType
Namespace.addCategoryObject('typeBinding', 'PickupPageType', PickupPageType)


# Complex type {http://www.stibosystems.com/step}PlannedPageType with content type ELEMENT_ONLY
class PlannedPageType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}PlannedPageType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PlannedPageType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5572, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_PlannedPageType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5574, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_PlannedPageType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5575, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Basket uses Python identifier Basket
    __Basket = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Basket'), 'Basket', '__httpwww_stibosystems_comstep_PlannedPageType_httpwww_stibosystems_comstepBasket', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5576, 12), )

    
    Basket = property(__Basket.value, __Basket.set, None, None)

    
    # Element {http://www.stibosystems.com/step}VersionLink uses Python identifier VersionLink
    __VersionLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VersionLink'), 'VersionLink', '__httpwww_stibosystems_comstep_PlannedPageType_httpwww_stibosystems_comstepVersionLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5577, 12), )

    
    VersionLink = property(__VersionLink.value, __VersionLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}TemplateLayout uses Python identifier TemplateLayout
    __TemplateLayout = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TemplateLayout'), 'TemplateLayout', '__httpwww_stibosystems_comstep_PlannedPageType_httpwww_stibosystems_comstepTemplateLayout', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5579, 16), )

    
    TemplateLayout = property(__TemplateLayout.value, __TemplateLayout.set, None, None)

    
    # Element {http://www.stibosystems.com/step}PickupPage uses Python identifier PickupPage
    __PickupPage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PickupPage'), 'PickupPage', '__httpwww_stibosystems_comstep_PlannedPageType_httpwww_stibosystems_comstepPickupPage', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5580, 16), )

    
    PickupPage = property(__PickupPage.value, __PickupPage.set, None, None)

    
    # Element {http://www.stibosystems.com/step}PageContents uses Python identifier PageContents
    __PageContents = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PageContents'), 'PageContents', '__httpwww_stibosystems_comstep_PlannedPageType_httpwww_stibosystems_comstepPageContents', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5582, 12), )

    
    PageContents = property(__PageContents.value, __PageContents.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_PlannedPageType_ID', _module_typeBindings.StepID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5584, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5584, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute User uses Python identifier User
    __User = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'User'), 'User', '__httpwww_stibosystems_comstep_PlannedPageType_User', pyxb.binding.datatypes.string)
    __User._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5585, 8)
    __User._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5585, 8)
    
    User = property(__User.value, __User.set, None, None)

    
    # Attribute PageNumber uses Python identifier PageNumber
    __PageNumber = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PageNumber'), 'PageNumber', '__httpwww_stibosystems_comstep_PlannedPageType_PageNumber', pyxb.binding.datatypes.string)
    __PageNumber._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5586, 8)
    __PageNumber._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5586, 8)
    
    PageNumber = property(__PageNumber.value, __PageNumber.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __Basket.name() : __Basket,
        __VersionLink.name() : __VersionLink,
        __TemplateLayout.name() : __TemplateLayout,
        __PickupPage.name() : __PickupPage,
        __PageContents.name() : __PageContents
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __User.name() : __User,
        __PageNumber.name() : __PageNumber
    })
_module_typeBindings.PlannedPageType = PlannedPageType
Namespace.addCategoryObject('typeBinding', 'PlannedPageType', PlannedPageType)


# Complex type {http://www.stibosystems.com/step}ProductMarkerElementType with content type EMPTY
class ProductMarkerElementType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}ProductMarkerElementType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProductMarkerElementType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5974, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ExtendToFrameID uses Python identifier ExtendToFrameID
    __ExtendToFrameID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ExtendToFrameID'), 'ExtendToFrameID', '__httpwww_stibosystems_comstep_ProductMarkerElementType_ExtendToFrameID', _module_typeBindings.StepID)
    __ExtendToFrameID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5975, 8)
    __ExtendToFrameID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5975, 8)
    
    ExtendToFrameID = property(__ExtendToFrameID.value, __ExtendToFrameID.set, None, None)

    
    # Attribute FrameID uses Python identifier FrameID
    __FrameID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'FrameID'), 'FrameID', '__httpwww_stibosystems_comstep_ProductMarkerElementType_FrameID', _module_typeBindings.StepID, required=True)
    __FrameID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5976, 8)
    __FrameID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5976, 8)
    
    FrameID = property(__FrameID.value, __FrameID.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ExtendToFrameID.name() : __ExtendToFrameID,
        __FrameID.name() : __FrameID
    })
_module_typeBindings.ProductMarkerElementType = ProductMarkerElementType
Namespace.addCategoryObject('typeBinding', 'ProductMarkerElementType', ProductMarkerElementType)


# Complex type {http://www.stibosystems.com/step}ProductTemplateLinkType with content type EMPTY
class ProductTemplateLinkType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}ProductTemplateLinkType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProductTemplateLinkType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6035, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ProductTemplateID uses Python identifier ProductTemplateID
    __ProductTemplateID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ProductTemplateID'), 'ProductTemplateID', '__httpwww_stibosystems_comstep_ProductTemplateLinkType_ProductTemplateID', _module_typeBindings.StepID, required=True)
    __ProductTemplateID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6036, 8)
    __ProductTemplateID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6036, 8)
    
    ProductTemplateID = property(__ProductTemplateID.value, __ProductTemplateID.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ProductTemplateID.name() : __ProductTemplateID
    })
_module_typeBindings.ProductTemplateLinkType = ProductTemplateLinkType
Namespace.addCategoryObject('typeBinding', 'ProductTemplateLinkType', ProductTemplateLinkType)


# Complex type {http://www.stibosystems.com/step}PublicationTypeLinkType with content type EMPTY
class PublicationTypeLinkType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}PublicationTypeLinkType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PublicationTypeLinkType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6112, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute PublicationTypeID uses Python identifier PublicationTypeID
    __PublicationTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PublicationTypeID'), 'PublicationTypeID', '__httpwww_stibosystems_comstep_PublicationTypeLinkType_PublicationTypeID', _module_typeBindings.StepID, required=True)
    __PublicationTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6113, 8)
    __PublicationTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6113, 8)
    
    PublicationTypeID = property(__PublicationTypeID.value, __PublicationTypeID.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __PublicationTypeID.name() : __PublicationTypeID
    })
_module_typeBindings.PublicationTypeLinkType = PublicationTypeLinkType
Namespace.addCategoryObject('typeBinding', 'PublicationTypeLinkType', PublicationTypeLinkType)


# Complex type {http://www.stibosystems.com/step}ReplaceValuesType with content type EMPTY
class ReplaceValuesType (pyxb.binding.basis.complexTypeDefinition):
    """
                Specifies if existing values should be replaced with the ones present in the import file. The
                instruction can either match all attributes, attributes in a specific group (AttributeGroupID attribute)
                or a specific attribute (AttributeID attribute). Only one of AttributeGroupID and AttributeID may be
                specified. If an attribute is matched by multiple rules, the most specific rule will be used.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReplaceValuesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6457, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute AttributeID uses Python identifier AttributeID
    __AttributeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AttributeID'), 'AttributeID', '__httpwww_stibosystems_comstep_ReplaceValuesType_AttributeID', pyxb.binding.datatypes.string)
    __AttributeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6466, 8)
    __AttributeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6466, 8)
    
    AttributeID = property(__AttributeID.value, __AttributeID.set, None, '\n                    Makes the instruction apply only for a specific attribute.\n                ')

    
    # Attribute AttributeGroupID uses Python identifier AttributeGroupID
    __AttributeGroupID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AttributeGroupID'), 'AttributeGroupID', '__httpwww_stibosystems_comstep_ReplaceValuesType_AttributeGroupID', pyxb.binding.datatypes.string)
    __AttributeGroupID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6473, 8)
    __AttributeGroupID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6473, 8)
    
    AttributeGroupID = property(__AttributeGroupID.value, __AttributeGroupID.set, None, '\n                    Makes the instruction apply only for attributes in a specific attribute group.\n                ')

    
    # Attribute ContextID uses Python identifier ContextID
    __ContextID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ContextID'), 'ContextID', '__httpwww_stibosystems_comstep_ReplaceValuesType_ContextID', pyxb.binding.datatypes.string)
    __ContextID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6480, 8)
    __ContextID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6480, 8)
    
    ContextID = property(__ContextID.value, __ContextID.set, None, '\n                    Specifies the Context in which the replacement should take place using the contexts ID.\n                    Specifying a context on the replacement rule will ensure it only deletes the existing values\n                    in that specific context. If the user wants to replace in multiple specific contexts he needs to add more rules.\n                ')

    
    # Attribute CrossContext uses Python identifier CrossContext
    __CrossContext = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'CrossContext'), 'CrossContext', '__httpwww_stibosystems_comstep_ReplaceValuesType_CrossContext', _module_typeBindings.YesNoType)
    __CrossContext._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6489, 8)
    __CrossContext._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6489, 8)
    
    CrossContext = property(__CrossContext.value, __CrossContext.set, None, '\n                    Specifies if the replacement should be performed across all contexts (defaults to "N"). If an\n                    attribute is in multiple groups for which replacement instructions have been specified and these\n                    have diverting "CrossContext" values (both "Y" and none/"N"), cross context replacement will not be\n                    performed for the attribute. The same rule applies if multiple instructions with diverting settings\n                    have been defined for the specific attribute. If the attribute is not included or the value is "N",\n                    the replacement will only be performed in the import context.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __AttributeID.name() : __AttributeID,
        __AttributeGroupID.name() : __AttributeGroupID,
        __ContextID.name() : __ContextID,
        __CrossContext.name() : __CrossContext
    })
_module_typeBindings.ReplaceValuesType = ReplaceValuesType
Namespace.addCategoryObject('typeBinding', 'ReplaceValuesType', ReplaceValuesType)


# Complex type {http://www.stibosystems.com/step}ReplaceCrossReferencesType with content type EMPTY
class ReplaceCrossReferencesType (pyxb.binding.basis.complexTypeDefinition):
    """
                Specifies if existing references (not including classification product links) should be replaced with
                the ones present in the import file. The instruction can either match all reference types or a specific
                reference type (ReferenceTypeID attribute).
                If a reference type is matched by multiple rules, the most specific rule will be used.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReplaceCrossReferencesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6502, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ReferenceTypeID uses Python identifier ReferenceTypeID
    __ReferenceTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ReferenceTypeID'), 'ReferenceTypeID', '__httpwww_stibosystems_comstep_ReplaceCrossReferencesType_ReferenceTypeID', pyxb.binding.datatypes.string)
    __ReferenceTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6511, 8)
    __ReferenceTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6511, 8)
    
    ReferenceTypeID = property(__ReferenceTypeID.value, __ReferenceTypeID.set, None, '\n                    Makes the instruction apply only for a specific reference type.\n                ')

    
    # Attribute CrossContext uses Python identifier CrossContext
    __CrossContext = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'CrossContext'), 'CrossContext', '__httpwww_stibosystems_comstep_ReplaceCrossReferencesType_CrossContext', _module_typeBindings.YesNoType)
    __CrossContext._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6518, 8)
    __CrossContext._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6518, 8)
    
    CrossContext = property(__CrossContext.value, __CrossContext.set, None, '\n                    Specifies if the replacement should be performed across all contexts (defaults to "N"). If a\n                    reference type is matched by multiple reference type specific instructions with diverting\n                    "CrossContext" values (both "Y" and none/"N"), cross context replacement will not be performed. If\n                    the attribute is not included or the value is "N", the replacement will only be performed in the\n                    import context.\n                ')

    
    # Attribute ContextID uses Python identifier ContextID
    __ContextID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ContextID'), 'ContextID', '__httpwww_stibosystems_comstep_ReplaceCrossReferencesType_ContextID', pyxb.binding.datatypes.string)
    __ContextID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6529, 8)
    __ContextID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6529, 8)
    
    ContextID = property(__ContextID.value, __ContextID.set, None, '\n                    Specifies the Context in which the replacement should take place using the contexts ID.\n                    Specifying a context on the replacement rule will ensure it only deletes the existing references\n                    in that specific context. If the user wants to replace in multiple specific contexts he needs to add more rules.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ReferenceTypeID.name() : __ReferenceTypeID,
        __CrossContext.name() : __CrossContext,
        __ContextID.name() : __ContextID
    })
_module_typeBindings.ReplaceCrossReferencesType = ReplaceCrossReferencesType
Namespace.addCategoryObject('typeBinding', 'ReplaceCrossReferencesType', ReplaceCrossReferencesType)


# Complex type {http://www.stibosystems.com/step}ReplaceAttributeLinksType with content type EMPTY
class ReplaceAttributeLinksType (pyxb.binding.basis.complexTypeDefinition):
    """
                Specifies if existing attribute links should be replaced with the ones present in the import file.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReplaceAttributeLinksType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6539, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute CrossContext uses Python identifier CrossContext
    __CrossContext = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'CrossContext'), 'CrossContext', '__httpwww_stibosystems_comstep_ReplaceAttributeLinksType_CrossContext', _module_typeBindings.YesNoType)
    __CrossContext._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6545, 8)
    __CrossContext._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6545, 8)
    
    CrossContext = property(__CrossContext.value, __CrossContext.set, None, '\n                    Please do not use CrossContext optional attribute.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __CrossContext.name() : __CrossContext
    })
_module_typeBindings.ReplaceAttributeLinksType = ReplaceAttributeLinksType
Namespace.addCategoryObject('typeBinding', 'ReplaceAttributeLinksType', ReplaceAttributeLinksType)


# Complex type {http://www.stibosystems.com/step}ReplaceClassificationReferencesType with content type EMPTY
class ReplaceClassificationReferencesType (pyxb.binding.basis.complexTypeDefinition):
    """
                Specifies if existing classification product links owned by the product side should be replaced with the
                ones present in the import file. The instruction can either match all classification product link types
                owned by the product side or a specific type (TypeID attribute). If a link type is matched by
                multiple rules, the most specific rule will be used.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReplaceClassificationReferencesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6562, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute TypeID uses Python identifier TypeID
    __TypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TypeID'), 'TypeID', '__httpwww_stibosystems_comstep_ReplaceClassificationReferencesType_TypeID', pyxb.binding.datatypes.string)
    __TypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6571, 8)
    __TypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6571, 8)
    
    TypeID = property(__TypeID.value, __TypeID.set, None, '\n                    Makes the instruction apply only for a specific classification product link type.\n                ')

    
    # Attribute CrossContext uses Python identifier CrossContext
    __CrossContext = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'CrossContext'), 'CrossContext', '__httpwww_stibosystems_comstep_ReplaceClassificationReferencesType_CrossContext', _module_typeBindings.YesNoType)
    __CrossContext._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6578, 8)
    __CrossContext._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6578, 8)
    
    CrossContext = property(__CrossContext.value, __CrossContext.set, None, '\n                    Specifies if the replacement should be performed across all contexts (defaults to "N"). If a link\n                    type is matched by multiple type specific instructions with diverting "CrossContext" values (both\n                    "Y" and none/"N"), cross context replacement will not be performed. If the attribute is not included\n                    or the value is "N", the replacement will only be performed in the import context.\n                ')

    
    # Attribute ContextID uses Python identifier ContextID
    __ContextID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ContextID'), 'ContextID', '__httpwww_stibosystems_comstep_ReplaceClassificationReferencesType_ContextID', pyxb.binding.datatypes.string)
    __ContextID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6588, 8)
    __ContextID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6588, 8)
    
    ContextID = property(__ContextID.value, __ContextID.set, None, '\n                    Specifies the Context in which the replacement should take place using the contexts ID.\n                    Specifying a context on the replacement rule will ensure it only deletes the existing references\n                    in that specific context. If the user wants to replace in multiple specific contexts he needs to add more rules.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __TypeID.name() : __TypeID,
        __CrossContext.name() : __CrossContext,
        __ContextID.name() : __ContextID
    })
_module_typeBindings.ReplaceClassificationReferencesType = ReplaceClassificationReferencesType
Namespace.addCategoryObject('typeBinding', 'ReplaceClassificationReferencesType', ReplaceClassificationReferencesType)


# Complex type {http://www.stibosystems.com/step}ReplaceProductReferencesType with content type EMPTY
class ReplaceProductReferencesType (pyxb.binding.basis.complexTypeDefinition):
    """
                Specifies if existing classification product links owned by the classification side should be replaced
                with the ones present in the import file. The instruction can either match all classification product
                link types owned by the classification side or a specific type (TypeID attribute). If a link type is
                matched by multiple rules, the most specific rule will be used.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReplaceProductReferencesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6598, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute TypeID uses Python identifier TypeID
    __TypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TypeID'), 'TypeID', '__httpwww_stibosystems_comstep_ReplaceProductReferencesType_TypeID', pyxb.binding.datatypes.string)
    __TypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6607, 8)
    __TypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6607, 8)
    
    TypeID = property(__TypeID.value, __TypeID.set, None, '\n                    Makes the instruction apply only for a specific classification product link type.\n                ')

    
    # Attribute CrossContext uses Python identifier CrossContext
    __CrossContext = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'CrossContext'), 'CrossContext', '__httpwww_stibosystems_comstep_ReplaceProductReferencesType_CrossContext', _module_typeBindings.YesNoType)
    __CrossContext._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6614, 8)
    __CrossContext._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6614, 8)
    
    CrossContext = property(__CrossContext.value, __CrossContext.set, None, '\n                    Specifies if the replacement should be performed across all contexts (defaults to "N"). If a link\n                    type is matched by multiple type specific instructions with diverting "CrossContext" values (both\n                    "Y" and none/"N"), cross context replacement will not be performed. If the attribute is not included\n                    or the value is "N", the replacement will only be performed in the import context.\n                ')

    
    # Attribute ContextID uses Python identifier ContextID
    __ContextID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ContextID'), 'ContextID', '__httpwww_stibosystems_comstep_ReplaceProductReferencesType_ContextID', pyxb.binding.datatypes.string)
    __ContextID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6624, 8)
    __ContextID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6624, 8)
    
    ContextID = property(__ContextID.value, __ContextID.set, None, '\n                    Specifies the Context in which the replacement should take place using the contexts ID.\n                    Specifying a context on the replacement rule will ensure it only deletes the existing references\n                    in that specific context. If the user wants to replace in multiple specific contexts he needs to add more rules.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __TypeID.name() : __TypeID,
        __CrossContext.name() : __CrossContext,
        __ContextID.name() : __ContextID
    })
_module_typeBindings.ReplaceProductReferencesType = ReplaceProductReferencesType
Namespace.addCategoryObject('typeBinding', 'ReplaceProductReferencesType', ReplaceProductReferencesType)


# Complex type {http://www.stibosystems.com/step}SampleFileType with content type ELEMENT_ONLY
class SampleFileType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}SampleFileType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SampleFileType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6769, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}SampleFileContents uses Python identifier SampleFileContents
    __SampleFileContents = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SampleFileContents'), 'SampleFileContents', '__httpwww_stibosystems_comstep_SampleFileType_httpwww_stibosystems_comstepSampleFileContents', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6771, 12), )

    
    SampleFileContents = property(__SampleFileContents.value, __SampleFileContents.set, None, None)

    
    # Attribute SampleFileName uses Python identifier SampleFileName
    __SampleFileName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SampleFileName'), 'SampleFileName', '__httpwww_stibosystems_comstep_SampleFileType_SampleFileName', _module_typeBindings.NonEmptyStringType, required=True)
    __SampleFileName._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6773, 8)
    __SampleFileName._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6773, 8)
    
    SampleFileName = property(__SampleFileName.value, __SampleFileName.set, None, None)

    _ElementMap.update({
        __SampleFileContents.name() : __SampleFileContents
    })
    _AttributeMap.update({
        __SampleFileName.name() : __SampleFileName
    })
_module_typeBindings.SampleFileType = SampleFileType
Namespace.addCategoryObject('typeBinding', 'SampleFileType', SampleFileType)


# Complex type {http://www.stibosystems.com/step}SpecialCharacterTagGroupType with content type ELEMENT_ONLY
class SpecialCharacterTagGroupType (pyxb.binding.basis.complexTypeDefinition):
    """
                An tag group holding a number of tags and tag groups.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SpecialCharacterTagGroupType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6939, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_SpecialCharacterTagGroupType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6946, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_SpecialCharacterTagGroupType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6947, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeGroupLink uses Python identifier AttributeGroupLink
    __AttributeGroupLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), 'AttributeGroupLink', '__httpwww_stibosystems_comstep_SpecialCharacterTagGroupType_httpwww_stibosystems_comstepAttributeGroupLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6948, 12), )

    
    AttributeGroupLink = property(__AttributeGroupLink.value, __AttributeGroupLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SpecialCharacterTagGroup uses Python identifier SpecialCharacterTagGroup
    __SpecialCharacterTagGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SpecialCharacterTagGroup'), 'SpecialCharacterTagGroup', '__httpwww_stibosystems_comstep_SpecialCharacterTagGroupType_httpwww_stibosystems_comstepSpecialCharacterTagGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6949, 12), )

    
    SpecialCharacterTagGroup = property(__SpecialCharacterTagGroup.value, __SpecialCharacterTagGroup.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_SpecialCharacterTagGroupType_ID', _module_typeBindings.StepID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6952, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6952, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    Global identification of the object.\n                ')

    
    # Attribute ParentID uses Python identifier ParentID
    __ParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ParentID'), 'ParentID', '__httpwww_stibosystems_comstep_SpecialCharacterTagGroupType_ParentID', _module_typeBindings.StepID)
    __ParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6959, 8)
    __ParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6959, 8)
    
    ParentID = property(__ParentID.value, __ParentID.set, None, '\n                    ID of the parent tag group. When creating new group during import either ParentID or parent node is\n                    required.\n                ')

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_SpecialCharacterTagGroupType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6967, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6967, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_SpecialCharacterTagGroupType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6968, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6968, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_SpecialCharacterTagGroupType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6969, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6969, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __AttributeGroupLink.name() : __AttributeGroupLink,
        __SpecialCharacterTagGroup.name() : __SpecialCharacterTagGroup
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __ParentID.name() : __ParentID,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed
    })
_module_typeBindings.SpecialCharacterTagGroupType = SpecialCharacterTagGroupType
Namespace.addCategoryObject('typeBinding', 'SpecialCharacterTagGroupType', SpecialCharacterTagGroupType)


# Complex type {http://www.stibosystems.com/step}StatusFlagType with content type ELEMENT_ONLY
class StatusFlagType (pyxb.binding.basis.complexTypeDefinition):
    """
                A status flag.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StatusFlagType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7016, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}SetupGroupLink uses Python identifier SetupGroupLink
    __SetupGroupLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink'), 'SetupGroupLink', '__httpwww_stibosystems_comstep_StatusFlagType_httpwww_stibosystems_comstepSetupGroupLink', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7023, 12), )

    
    SetupGroupLink = property(__SetupGroupLink.value, __SetupGroupLink.set, None, '\n                        Setup groups the status flag is located in.\n                    ')

    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_StatusFlagType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7030, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_StatusFlagType_ID', _module_typeBindings.StepID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7032, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7032, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_StatusFlagType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7033, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7033, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_StatusFlagType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7034, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7034, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_StatusFlagType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7035, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7035, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __SetupGroupLink.name() : __SetupGroupLink,
        __Name.name() : __Name
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed
    })
_module_typeBindings.StatusFlagType = StatusFlagType
Namespace.addCategoryObject('typeBinding', 'StatusFlagType', StatusFlagType)


# Complex type {http://www.stibosystems.com/step}TemplateLayoutType with content type EMPTY
class TemplateLayoutType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}TemplateLayoutType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TemplateLayoutType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7767, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute TemplateID uses Python identifier TemplateID
    __TemplateID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TemplateID'), 'TemplateID', '__httpwww_stibosystems_comstep_TemplateLayoutType_TemplateID', _module_typeBindings.StepID, required=True)
    __TemplateID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7768, 8)
    __TemplateID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7768, 8)
    
    TemplateID = property(__TemplateID.value, __TemplateID.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __TemplateID.name() : __TemplateID
    })
_module_typeBindings.TemplateLayoutType = TemplateLayoutType
Namespace.addCategoryObject('typeBinding', 'TemplateLayoutType', TemplateLayoutType)


# Complex type {http://www.stibosystems.com/step}TextElementType with content type MIXED
class TextElementType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}TextElementType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TextElementType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7788, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ExtendToFrameID uses Python identifier ExtendToFrameID
    __ExtendToFrameID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ExtendToFrameID'), 'ExtendToFrameID', '__httpwww_stibosystems_comstep_TextElementType_ExtendToFrameID', _module_typeBindings.StepID)
    __ExtendToFrameID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7789, 8)
    __ExtendToFrameID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7789, 8)
    
    ExtendToFrameID = property(__ExtendToFrameID.value, __ExtendToFrameID.set, None, None)

    
    # Attribute Text uses Python identifier Text
    __Text = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Text'), 'Text', '__httpwww_stibosystems_comstep_TextElementType_Text', pyxb.binding.datatypes.string)
    __Text._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7790, 8)
    __Text._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7790, 8)
    
    Text = property(__Text.value, __Text.set, None, None)

    
    # Attribute FrameID uses Python identifier FrameID
    __FrameID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'FrameID'), 'FrameID', '__httpwww_stibosystems_comstep_TextElementType_FrameID', _module_typeBindings.StepID)
    __FrameID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7791, 8)
    __FrameID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7791, 8)
    
    FrameID = property(__FrameID.value, __FrameID.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ExtendToFrameID.name() : __ExtendToFrameID,
        __Text.name() : __Text,
        __FrameID.name() : __FrameID
    })
_module_typeBindings.TextElementType = TextElementType
Namespace.addCategoryObject('typeBinding', 'TextElementType', TextElementType)


# Complex type {http://www.stibosystems.com/step}VersionLinkType with content type EMPTY
class VersionLinkType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}VersionLinkType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VersionLinkType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8367, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute VersionID uses Python identifier VersionID
    __VersionID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'VersionID'), 'VersionID', '__httpwww_stibosystems_comstep_VersionLinkType_VersionID', _module_typeBindings.StepID, required=True)
    __VersionID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8368, 8)
    __VersionID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8368, 8)
    
    VersionID = property(__VersionID.value, __VersionID.set, None, None)

    
    # Attribute PageNumber uses Python identifier PageNumber
    __PageNumber = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PageNumber'), 'PageNumber', '__httpwww_stibosystems_comstep_VersionLinkType_PageNumber', pyxb.binding.datatypes.string)
    __PageNumber._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8369, 8)
    __PageNumber._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8369, 8)
    
    PageNumber = property(__PageNumber.value, __PageNumber.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __VersionID.name() : __VersionID,
        __PageNumber.name() : __PageNumber
    })
_module_typeBindings.VersionLinkType = VersionLinkType
Namespace.addCategoryObject('typeBinding', 'VersionLinkType', VersionLinkType)


# Complex type {http://www.stibosystems.com/step}VisibleTermFieldType with content type EMPTY
class VisibleTermFieldType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}VisibleTermFieldType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VisibleTermFieldType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8395, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute Field uses Python identifier Field
    __Field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Field'), 'Field', '__httpwww_stibosystems_comstep_VisibleTermFieldType_Field', _module_typeBindings.STD_ANON_16, required=True)
    __Field._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8396, 8)
    __Field._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8396, 8)
    
    Field = property(__Field.value, __Field.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Field.name() : __Field
    })
_module_typeBindings.VisibleTermFieldType = VisibleTermFieldType
Namespace.addCategoryObject('typeBinding', 'VisibleTermFieldType', VisibleTermFieldType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}ReplacementRules uses Python identifier ReplacementRules
    __ReplacementRules = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReplacementRules'), 'ReplacementRules', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepReplacementRules', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 9, 16), )

    
    ReplacementRules = property(__ReplacementRules.value, __ReplacementRules.set, None, None)

    
    # Element {http://www.stibosystems.com/step}TagGroupList uses Python identifier TagGroupList
    __TagGroupList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TagGroupList'), 'TagGroupList', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepTagGroupList', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 10, 16), )

    
    TagGroupList = property(__TagGroupList.value, __TagGroupList.set, None, None)

    
    # Element {http://www.stibosystems.com/step}TagList uses Python identifier TagList
    __TagList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TagList'), 'TagList', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepTagList', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 11, 16), )

    
    TagList = property(__TagList.value, __TagList.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DimensionList uses Python identifier DimensionList
    __DimensionList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DimensionList'), 'DimensionList', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepDimensionList', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 12, 16), )

    
    DimensionList = property(__DimensionList.value, __DimensionList.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Qualifiers uses Python identifier Qualifiers
    __Qualifiers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Qualifiers'), 'Qualifiers', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepQualifiers', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 13, 16), )

    
    Qualifiers = property(__Qualifiers.value, __Qualifiers.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ContextList uses Python identifier ContextList
    __ContextList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ContextList'), 'ContextList', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepContextList', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 14, 16), )

    
    ContextList = property(__ContextList.value, __ContextList.set, None, None)

    
    # Element {http://www.stibosystems.com/step}CrossContexts uses Python identifier CrossContexts
    __CrossContexts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CrossContexts'), 'CrossContexts', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepCrossContexts', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 15, 16), )

    
    CrossContexts = property(__CrossContexts.value, __CrossContexts.set, None, None)

    
    # Element {http://www.stibosystems.com/step}GlobalSettings uses Python identifier GlobalSettings
    __GlobalSettings = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GlobalSettings'), 'GlobalSettings', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepGlobalSettings', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 16, 16), )

    
    GlobalSettings = property(__GlobalSettings.value, __GlobalSettings.set, None, None)

    
    # Element {http://www.stibosystems.com/step}UserTypes uses Python identifier UserTypes
    __UserTypes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UserTypes'), 'UserTypes', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepUserTypes', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 17, 16), )

    
    UserTypes = property(__UserTypes.value, __UserTypes.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Keys uses Python identifier Keys
    __Keys = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Keys'), 'Keys', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepKeys', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 18, 16), )

    
    Keys = property(__Keys.value, __Keys.set, None, None)

    
    # Element {http://www.stibosystems.com/step}EdgeTypes uses Python identifier EdgeTypes
    __EdgeTypes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EdgeTypes'), 'EdgeTypes', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepEdgeTypes', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 19, 16), )

    
    EdgeTypes = property(__EdgeTypes.value, __EdgeTypes.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DerivedEventTypes uses Python identifier DerivedEventTypes
    __DerivedEventTypes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DerivedEventTypes'), 'DerivedEventTypes', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepDerivedEventTypes', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 20, 16), )

    
    DerivedEventTypes = property(__DerivedEventTypes.value, __DerivedEventTypes.set, None, None)

    
    # Element {http://www.stibosystems.com/step}CrossReferenceTypes uses Python identifier CrossReferenceTypes
    __CrossReferenceTypes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CrossReferenceTypes'), 'CrossReferenceTypes', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepCrossReferenceTypes', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 21, 16), )

    
    CrossReferenceTypes = property(__CrossReferenceTypes.value, __CrossReferenceTypes.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteAssets uses Python identifier DeleteAssets
    __DeleteAssets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteAssets'), 'DeleteAssets', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepDeleteAssets', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 22, 16), )

    
    DeleteAssets = property(__DeleteAssets.value, __DeleteAssets.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteProducts uses Python identifier DeleteProducts
    __DeleteProducts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteProducts'), 'DeleteProducts', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepDeleteProducts', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 23, 16), )

    
    DeleteProducts = property(__DeleteProducts.value, __DeleteProducts.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteEntities uses Python identifier DeleteEntities
    __DeleteEntities = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteEntities'), 'DeleteEntities', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepDeleteEntities', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 24, 16), )

    
    DeleteEntities = property(__DeleteEntities.value, __DeleteEntities.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteClassifications uses Python identifier DeleteClassifications
    __DeleteClassifications = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteClassifications'), 'DeleteClassifications', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepDeleteClassifications', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 25, 16), )

    
    DeleteClassifications = property(__DeleteClassifications.value, __DeleteClassifications.set, None, None)

    
    # Element {http://www.stibosystems.com/step}UnitList uses Python identifier UnitList
    __UnitList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UnitList'), 'UnitList', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepUnitList', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 26, 16), )

    
    UnitList = property(__UnitList.value, __UnitList.set, None, None)

    
    # Element {http://www.stibosystems.com/step}CollectionList uses Python identifier CollectionList
    __CollectionList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CollectionList'), 'CollectionList', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepCollectionList', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 27, 16), )

    
    CollectionList = property(__CollectionList.value, __CollectionList.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ListOfValuesGroupList uses Python identifier ListOfValuesGroupList
    __ListOfValuesGroupList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ListOfValuesGroupList'), 'ListOfValuesGroupList', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepListOfValuesGroupList', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 28, 16), )

    
    ListOfValuesGroupList = property(__ListOfValuesGroupList.value, __ListOfValuesGroupList.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ListsOfValues uses Python identifier ListsOfValues
    __ListsOfValues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ListsOfValues'), 'ListsOfValues', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepListsOfValues', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 29, 16), )

    
    ListsOfValues = property(__ListsOfValues.value, __ListsOfValues.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeGroupList uses Python identifier AttributeGroupList
    __AttributeGroupList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupList'), 'AttributeGroupList', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepAttributeGroupList', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 30, 16), )

    
    AttributeGroupList = property(__AttributeGroupList.value, __AttributeGroupList.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeList uses Python identifier AttributeList
    __AttributeList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeList'), 'AttributeList', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepAttributeList', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 31, 16), )

    
    AttributeList = property(__AttributeList.value, __AttributeList.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeTransformationGroups uses Python identifier AttributeTransformationGroups
    __AttributeTransformationGroups = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeTransformationGroups'), 'AttributeTransformationGroups', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepAttributeTransformationGroups', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 32, 16), )

    
    AttributeTransformationGroups = property(__AttributeTransformationGroups.value, __AttributeTransformationGroups.set, None, None)

    
    # Element {http://www.stibosystems.com/step}TableColors uses Python identifier TableColors
    __TableColors = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TableColors'), 'TableColors', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepTableColors', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 34, 16), )

    
    TableColors = property(__TableColors.value, __TableColors.set, None, None)

    
    # Element {http://www.stibosystems.com/step}TableRules uses Python identifier TableRules
    __TableRules = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TableRules'), 'TableRules', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepTableRules', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 35, 16), )

    
    TableRules = property(__TableRules.value, __TableRules.set, None, None)

    
    # Element {http://www.stibosystems.com/step}TableTypeGroupList uses Python identifier TableTypeGroupList
    __TableTypeGroupList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TableTypeGroupList'), 'TableTypeGroupList', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepTableTypeGroupList', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 36, 16), )

    
    TableTypeGroupList = property(__TableTypeGroupList.value, __TableTypeGroupList.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ColumnTypeGroupList uses Python identifier ColumnTypeGroupList
    __ColumnTypeGroupList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ColumnTypeGroupList'), 'ColumnTypeGroupList', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepColumnTypeGroupList', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 37, 16), )

    
    ColumnTypeGroupList = property(__ColumnTypeGroupList.value, __ColumnTypeGroupList.set, None, None)

    
    # Element {http://www.stibosystems.com/step}RowTypeGroupList uses Python identifier RowTypeGroupList
    __RowTypeGroupList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RowTypeGroupList'), 'RowTypeGroupList', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepRowTypeGroupList', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 38, 16), )

    
    RowTypeGroupList = property(__RowTypeGroupList.value, __RowTypeGroupList.set, None, None)

    
    # Element {http://www.stibosystems.com/step}TableTypes uses Python identifier TableTypes
    __TableTypes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TableTypes'), 'TableTypes', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepTableTypes', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 39, 16), )

    
    TableTypes = property(__TableTypes.value, __TableTypes.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ColumnTypes uses Python identifier ColumnTypes
    __ColumnTypes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ColumnTypes'), 'ColumnTypes', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepColumnTypes', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 40, 16), )

    
    ColumnTypes = property(__ColumnTypes.value, __ColumnTypes.set, None, None)

    
    # Element {http://www.stibosystems.com/step}RowTypes uses Python identifier RowTypes
    __RowTypes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RowTypes'), 'RowTypes', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepRowTypes', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 41, 16), )

    
    RowTypes = property(__RowTypes.value, __RowTypes.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DataContainerTypes uses Python identifier DataContainerTypes
    __DataContainerTypes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DataContainerTypes'), 'DataContainerTypes', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepDataContainerTypes', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 42, 16), )

    
    DataContainerTypes = property(__DataContainerTypes.value, __DataContainerTypes.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SetupGroups uses Python identifier SetupGroups
    __SetupGroups = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SetupGroups'), 'SetupGroups', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepSetupGroups', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 43, 16), )

    
    SetupGroups = property(__SetupGroups.value, __SetupGroups.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SetupEntities uses Python identifier SetupEntities
    __SetupEntities = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SetupEntities'), 'SetupEntities', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepSetupEntities', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 44, 16), )

    
    SetupEntities = property(__SetupEntities.value, __SetupEntities.set, None, None)

    
    # Element {http://www.stibosystems.com/step}BusinessLibraries uses Python identifier BusinessLibraries
    __BusinessLibraries = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BusinessLibraries'), 'BusinessLibraries', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepBusinessLibraries', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 45, 16), )

    
    BusinessLibraries = property(__BusinessLibraries.value, __BusinessLibraries.set, None, None)

    
    # Element {http://www.stibosystems.com/step}BusinessRules uses Python identifier BusinessRules
    __BusinessRules = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BusinessRules'), 'BusinessRules', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepBusinessRules', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 46, 16), )

    
    BusinessRules = property(__BusinessRules.value, __BusinessRules.set, None, None)

    
    # Element {http://www.stibosystems.com/step}STEPWorkflows uses Python identifier STEPWorkflows
    __STEPWorkflows = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'STEPWorkflows'), 'STEPWorkflows', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepSTEPWorkflows', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 47, 16), )

    
    STEPWorkflows = property(__STEPWorkflows.value, __STEPWorkflows.set, None, None)

    
    # Element {http://www.stibosystems.com/step}StatusFlags uses Python identifier StatusFlags
    __StatusFlags = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StatusFlags'), 'StatusFlags', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepStatusFlags', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 48, 16), )

    
    StatusFlags = property(__StatusFlags.value, __StatusFlags.set, None, None)

    
    # Element {http://www.stibosystems.com/step}STEPWorkflowProfiles uses Python identifier STEPWorkflowProfiles
    __STEPWorkflowProfiles = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'STEPWorkflowProfiles'), 'STEPWorkflowProfiles', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepSTEPWorkflowProfiles', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 49, 16), )

    
    STEPWorkflowProfiles = property(__STEPWorkflowProfiles.value, __STEPWorkflowProfiles.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MatchCodes uses Python identifier MatchCodes
    __MatchCodes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MatchCodes'), 'MatchCodes', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepMatchCodes', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 50, 16), )

    
    MatchCodes = property(__MatchCodes.value, __MatchCodes.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MatchingAlgorithms uses Python identifier MatchingAlgorithms
    __MatchingAlgorithms = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MatchingAlgorithms'), 'MatchingAlgorithms', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepMatchingAlgorithms', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 51, 16), )

    
    MatchingAlgorithms = property(__MatchingAlgorithms.value, __MatchingAlgorithms.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Classifications uses Python identifier Classifications
    __Classifications = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Classifications'), 'Classifications', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepClassifications', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 52, 16), )

    
    Classifications = property(__Classifications.value, __Classifications.set, None, None)

    
    # Element {http://www.stibosystems.com/step}PublicationGroups uses Python identifier PublicationGroups
    __PublicationGroups = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PublicationGroups'), 'PublicationGroups', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepPublicationGroups', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 53, 16), )

    
    PublicationGroups = property(__PublicationGroups.value, __PublicationGroups.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Assets uses Python identifier Assets
    __Assets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Assets'), 'Assets', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepAssets', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 54, 16), )

    
    Assets = property(__Assets.value, __Assets.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Entities uses Python identifier Entities
    __Entities = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Entities'), 'Entities', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepEntities', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 55, 16), )

    
    Entities = property(__Entities.value, __Entities.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Products uses Python identifier Products
    __Products = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Products'), 'Products', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepProducts', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 56, 16), )

    
    Products = property(__Products.value, __Products.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ActionSetList uses Python identifier ActionSetList
    __ActionSetList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ActionSetList'), 'ActionSetList', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepActionSetList', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 57, 16), )

    
    ActionSetList = property(__ActionSetList.value, __ActionSetList.set, None, None)

    
    # Element {http://www.stibosystems.com/step}UserGroupList uses Python identifier UserGroupList
    __UserGroupList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UserGroupList'), 'UserGroupList', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepUserGroupList', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 58, 16), )

    
    UserGroupList = property(__UserGroupList.value, __UserGroupList.set, None, None)

    
    # Element {http://www.stibosystems.com/step}UserList uses Python identifier UserList
    __UserList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UserList'), 'UserList', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepUserList', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 59, 16), )

    
    UserList = property(__UserList.value, __UserList.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SystemSetup uses Python identifier SystemSetup
    __SystemSetup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SystemSetup'), 'SystemSetup', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepSystemSetup', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 60, 16), )

    
    SystemSetup = property(__SystemSetup.value, __SystemSetup.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ImportConfigurations uses Python identifier ImportConfigurations
    __ImportConfigurations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ImportConfigurations'), 'ImportConfigurations', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepImportConfigurations', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 61, 16), )

    
    ImportConfigurations = property(__ImportConfigurations.value, __ImportConfigurations.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ExportConfigurations uses Python identifier ExportConfigurations
    __ExportConfigurations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExportConfigurations'), 'ExportConfigurations', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepExportConfigurations', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 62, 16), )

    
    ExportConfigurations = property(__ExportConfigurations.value, __ExportConfigurations.set, None, None)

    
    # Element {http://www.stibosystems.com/step}TranslationConfigurations uses Python identifier TranslationConfigurations
    __TranslationConfigurations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TranslationConfigurations'), 'TranslationConfigurations', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepTranslationConfigurations', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 63, 16), )

    
    TranslationConfigurations = property(__TranslationConfigurations.value, __TranslationConfigurations.set, None, None)

    
    # Element {http://www.stibosystems.com/step}BulkUpdateConfigurations uses Python identifier BulkUpdateConfigurations
    __BulkUpdateConfigurations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BulkUpdateConfigurations'), 'BulkUpdateConfigurations', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepBulkUpdateConfigurations', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 64, 16), )

    
    BulkUpdateConfigurations = property(__BulkUpdateConfigurations.value, __BulkUpdateConfigurations.set, None, None)

    
    # Element {http://www.stibosystems.com/step}TransformationLookupTableConfigurations uses Python identifier TransformationLookupTableConfigurations
    __TransformationLookupTableConfigurations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TransformationLookupTableConfigurations'), 'TransformationLookupTableConfigurations', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepTransformationLookupTableConfigurations', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 65, 16), )

    
    TransformationLookupTableConfigurations = property(__TransformationLookupTableConfigurations.value, __TransformationLookupTableConfigurations.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ImageConversionConfigurations uses Python identifier ImageConversionConfigurations
    __ImageConversionConfigurations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ImageConversionConfigurations'), 'ImageConversionConfigurations', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepImageConversionConfigurations', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 66, 16), )

    
    ImageConversionConfigurations = property(__ImageConversionConfigurations.value, __ImageConversionConfigurations.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AssetPushEventQueues uses Python identifier AssetPushEventQueues
    __AssetPushEventQueues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssetPushEventQueues'), 'AssetPushEventQueues', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepAssetPushEventQueues', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 67, 16), )

    
    AssetPushEventQueues = property(__AssetPushEventQueues.value, __AssetPushEventQueues.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AssetPushConfigurations uses Python identifier AssetPushConfigurations
    __AssetPushConfigurations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssetPushConfigurations'), 'AssetPushConfigurations', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepAssetPushConfigurations', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 68, 16), )

    
    AssetPushConfigurations = property(__AssetPushConfigurations.value, __AssetPushConfigurations.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ECatalogs uses Python identifier ECatalogs
    __ECatalogs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ECatalogs'), 'ECatalogs', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepECatalogs', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 69, 16), )

    
    ECatalogs = property(__ECatalogs.value, __ECatalogs.set, None, None)

    
    # Element {http://www.stibosystems.com/step}PortalConfigurations uses Python identifier PortalConfigurations
    __PortalConfigurations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PortalConfigurations'), 'PortalConfigurations', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepPortalConfigurations', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 70, 16), )

    
    PortalConfigurations = property(__PortalConfigurations.value, __PortalConfigurations.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteUnits uses Python identifier DeleteUnits
    __DeleteUnits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteUnits'), 'DeleteUnits', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepDeleteUnits', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 71, 16), )

    
    DeleteUnits = property(__DeleteUnits.value, __DeleteUnits.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteAttributes uses Python identifier DeleteAttributes
    __DeleteAttributes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteAttributes'), 'DeleteAttributes', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepDeleteAttributes', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 72, 16), )

    
    DeleteAttributes = property(__DeleteAttributes.value, __DeleteAttributes.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteListOfValues uses Python identifier DeleteListOfValues
    __DeleteListOfValues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteListOfValues'), 'DeleteListOfValues', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepDeleteListOfValues', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 73, 16), )

    
    DeleteListOfValues = property(__DeleteListOfValues.value, __DeleteListOfValues.set, None, None)

    
    # Element {http://www.stibosystems.com/step}EventQueues uses Python identifier EventQueues
    __EventQueues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EventQueues'), 'EventQueues', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepEventQueues', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 74, 16), )

    
    EventQueues = property(__EventQueues.value, __EventQueues.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MissingObjects uses Python identifier MissingObjects
    __MissingObjects = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MissingObjects'), 'MissingObjects', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepMissingObjects', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 75, 16), )

    
    MissingObjects = property(__MissingObjects.value, __MissingObjects.set, None, None)

    
    # Element {http://www.stibosystems.com/step}IntegrationEndpoints uses Python identifier IntegrationEndpoints
    __IntegrationEndpoints = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IntegrationEndpoints'), 'IntegrationEndpoints', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepIntegrationEndpoints', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 76, 16), )

    
    IntegrationEndpoints = property(__IntegrationEndpoints.value, __IntegrationEndpoints.set, None, None)

    
    # Element {http://www.stibosystems.com/step}EventProcessors uses Python identifier EventProcessors
    __EventProcessors = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EventProcessors'), 'EventProcessors', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepEventProcessors', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 77, 16), )

    
    EventProcessors = property(__EventProcessors.value, __EventProcessors.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ChangePackages uses Python identifier ChangePackages
    __ChangePackages = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ChangePackages'), 'ChangePackages', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepChangePackages', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 78, 16), )

    
    ChangePackages = property(__ChangePackages.value, __ChangePackages.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ComponentModels uses Python identifier ComponentModels
    __ComponentModels = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ComponentModels'), 'ComponentModels', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepComponentModels', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 79, 16), )

    
    ComponentModels = property(__ComponentModels.value, __ComponentModels.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ScheduledProcesses uses Python identifier ScheduledProcesses
    __ScheduledProcesses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScheduledProcesses'), 'ScheduledProcesses', '__httpwww_stibosystems_comstep_CTD_ANON_httpwww_stibosystems_comstepScheduledProcesses', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 80, 16), )

    
    ScheduledProcesses = property(__ScheduledProcesses.value, __ScheduledProcesses.set, None, None)

    
    # Attribute ContextID uses Python identifier ContextID
    __ContextID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ContextID'), 'ContextID', '__httpwww_stibosystems_comstep_CTD_ANON_ContextID', _module_typeBindings.StepQualifierID)
    __ContextID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 82, 12)
    __ContextID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 82, 12)
    
    ContextID = property(__ContextID.value, __ContextID.set, None, '\n                        Specifies the ID of the context that provides the content selection for an export.\n                        During import, it identifies the context to which data without an explicit QualifierID\n                        specification will be associated.\n                    ')

    
    # Attribute AutoApprove uses Python identifier AutoApprove
    __AutoApprove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AutoApprove'), 'AutoApprove', '__httpwww_stibosystems_comstep_CTD_ANON_AutoApprove', _module_typeBindings.YesNoType, unicode_default='N')
    __AutoApprove._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 91, 12)
    __AutoApprove._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 91, 12)
    
    AutoApprove = property(__AutoApprove.value, __AutoApprove.set, None, None)

    
    # Attribute AutoInitiate uses Python identifier AutoInitiate
    __AutoInitiate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AutoInitiate'), 'AutoInitiate', '__httpwww_stibosystems_comstep_CTD_ANON_AutoInitiate', _module_typeBindings.YesNoType, unicode_default='N')
    __AutoInitiate._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 92, 12)
    __AutoInitiate._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 92, 12)
    
    AutoInitiate = property(__AutoInitiate.value, __AutoInitiate.set, None, None)

    
    # Attribute StateflowImportEvent uses Python identifier StateflowImportEvent
    __StateflowImportEvent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'StateflowImportEvent'), 'StateflowImportEvent', '__httpwww_stibosystems_comstep_CTD_ANON_StateflowImportEvent', _module_typeBindings.YesNoType, unicode_default='N')
    __StateflowImportEvent._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 93, 12)
    __StateflowImportEvent._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 93, 12)
    
    StateflowImportEvent = property(__StateflowImportEvent.value, __StateflowImportEvent.set, None, '\n                        @Deprecated, replaced by STEPWorkflowImportEvent.\n                    ')

    
    # Attribute STEPWorkflowImportEvent uses Python identifier STEPWorkflowImportEvent
    __STEPWorkflowImportEvent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'STEPWorkflowImportEvent'), 'STEPWorkflowImportEvent', '__httpwww_stibosystems_comstep_CTD_ANON_STEPWorkflowImportEvent', _module_typeBindings.YesNoType, unicode_default='N')
    __STEPWorkflowImportEvent._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 100, 12)
    __STEPWorkflowImportEvent._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 100, 12)
    
    STEPWorkflowImportEvent = property(__STEPWorkflowImportEvent.value, __STEPWorkflowImportEvent.set, None, None)

    
    # Attribute ExportTransactionID uses Python identifier ExportTransactionID
    __ExportTransactionID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ExportTransactionID'), 'ExportTransactionID', '__httpwww_stibosystems_comstep_CTD_ANON_ExportTransactionID', _module_typeBindings.StepID, unicode_default='-1')
    __ExportTransactionID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 101, 12)
    __ExportTransactionID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 101, 12)
    
    ExportTransactionID = property(__ExportTransactionID.value, __ExportTransactionID.set, None, '\n                        @Deprecated, may be removed in a future release.\n                    ')

    
    # Attribute ReplaceProductValues uses Python identifier ReplaceProductValues
    __ReplaceProductValues = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ReplaceProductValues'), 'ReplaceProductValues', '__httpwww_stibosystems_comstep_CTD_ANON_ReplaceProductValues', _module_typeBindings.YesNoType, unicode_default='N')
    __ReplaceProductValues._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 108, 12)
    __ReplaceProductValues._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 108, 12)
    
    ReplaceProductValues = property(__ReplaceProductValues.value, __ReplaceProductValues.set, None, '\n                        @Deprecated, use ReplacementRules/Products/ReplaceValues instead.\n                    ')

    
    # Attribute AllowInvalidValues uses Python identifier AllowInvalidValues
    __AllowInvalidValues = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AllowInvalidValues'), 'AllowInvalidValues', '__httpwww_stibosystems_comstep_CTD_ANON_AllowInvalidValues', _module_typeBindings.YesNoType, unicode_default='N')
    __AllowInvalidValues._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 115, 12)
    __AllowInvalidValues._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 115, 12)
    
    AllowInvalidValues = property(__AllowInvalidValues.value, __AllowInvalidValues.set, None, '\n                        Reserved for future use. Does currently not have any effect.\n                    ')

    
    # Attribute ReplaceAttributeLinks uses Python identifier ReplaceAttributeLinks
    __ReplaceAttributeLinks = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ReplaceAttributeLinks'), 'ReplaceAttributeLinks', '__httpwww_stibosystems_comstep_CTD_ANON_ReplaceAttributeLinks', _module_typeBindings.YesNoType, unicode_default='N')
    __ReplaceAttributeLinks._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 122, 12)
    __ReplaceAttributeLinks._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 122, 12)
    
    ReplaceAttributeLinks = property(__ReplaceAttributeLinks.value, __ReplaceAttributeLinks.set, None, '\n                        @Deprecated, use ReplacementRules/Products/ReplaceAttributeLinks or\n                        ReplacementRules/Classifications/ReplaceAttributeLinks instead.\n                    ')

    
    # Attribute ReplaceProductToProductCrossReferences uses Python identifier ReplaceProductToProductCrossReferences
    __ReplaceProductToProductCrossReferences = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ReplaceProductToProductCrossReferences'), 'ReplaceProductToProductCrossReferences', '__httpwww_stibosystems_comstep_CTD_ANON_ReplaceProductToProductCrossReferences', _module_typeBindings.YesNoType, unicode_default='N')
    __ReplaceProductToProductCrossReferences._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 130, 12)
    __ReplaceProductToProductCrossReferences._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 130, 12)
    
    ReplaceProductToProductCrossReferences = property(__ReplaceProductToProductCrossReferences.value, __ReplaceProductToProductCrossReferences.set, None, '\n                        @Deprecated, use ReplacementRules/Products/ReplaceCrossReferences instead.\n                    ')

    
    # Attribute ExportContext uses Python identifier ExportContext
    __ExportContext = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ExportContext'), 'ExportContext', '__httpwww_stibosystems_comstep_CTD_ANON_ExportContext', _module_typeBindings.StepQualifierID)
    __ExportContext._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 137, 12)
    __ExportContext._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 137, 12)
    
    ExportContext = property(__ExportContext.value, __ExportContext.set, None, '\n                        ID of the context in which the export was performed. Ignored on import.\n                    ')

    
    # Attribute ReplaceTerms uses Python identifier ReplaceTerms
    __ReplaceTerms = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ReplaceTerms'), 'ReplaceTerms', '__httpwww_stibosystems_comstep_CTD_ANON_ReplaceTerms', _module_typeBindings.STD_ANON, unicode_default='CLEAR_ONLY_FOR_IMPORTED_PRODUCTS')
    __ReplaceTerms._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 144, 12)
    __ReplaceTerms._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 144, 12)
    
    ReplaceTerms = property(__ReplaceTerms.value, __ReplaceTerms.set, None, None)

    
    # Attribute ReplaceClassificationToClassificationCrossReferences uses Python identifier ReplaceClassificationToClassificationCrossReferences
    __ReplaceClassificationToClassificationCrossReferences = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ReplaceClassificationToClassificationCrossReferences'), 'ReplaceClassificationToClassificationCrossReferences', '__httpwww_stibosystems_comstep_CTD_ANON_ReplaceClassificationToClassificationCrossReferences', _module_typeBindings.YesNoType, unicode_default='N')
    __ReplaceClassificationToClassificationCrossReferences._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 152, 12)
    __ReplaceClassificationToClassificationCrossReferences._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 152, 12)
    
    ReplaceClassificationToClassificationCrossReferences = property(__ReplaceClassificationToClassificationCrossReferences.value, __ReplaceClassificationToClassificationCrossReferences.set, None, '\n                        @Deprecated, use ReplacementRules/Classifications/ReplaceCrossReferences instead.\n                    ')

    
    # Attribute ReplaceOverrideToSubProductReferences uses Python identifier ReplaceOverrideToSubProductReferences
    __ReplaceOverrideToSubProductReferences = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ReplaceOverrideToSubProductReferences'), 'ReplaceOverrideToSubProductReferences', '__httpwww_stibosystems_comstep_CTD_ANON_ReplaceOverrideToSubProductReferences', _module_typeBindings.YesNoType, unicode_default='N')
    __ReplaceOverrideToSubProductReferences._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 160, 12)
    __ReplaceOverrideToSubProductReferences._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 160, 12)
    
    ReplaceOverrideToSubProductReferences = property(__ReplaceOverrideToSubProductReferences.value, __ReplaceOverrideToSubProductReferences.set, None, '\n                        Either "Y" or "N". Specifies whether or not imported OverrideSubProduct should replace\n                        existing sub products of product overrides.\n                    ')

    
    # Attribute SingleUpdateMode uses Python identifier SingleUpdateMode
    __SingleUpdateMode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SingleUpdateMode'), 'SingleUpdateMode', '__httpwww_stibosystems_comstep_CTD_ANON_SingleUpdateMode', _module_typeBindings.YesNoType, unicode_default='N')
    __SingleUpdateMode._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 168, 12)
    __SingleUpdateMode._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 168, 12)
    
    SingleUpdateMode = property(__SingleUpdateMode.value, __SingleUpdateMode.set, None, '\n                        Either "Y" or "N". Specifies whether or not the whole import will run in single update mode.\n                        Specifying "Y" is required for certain import operations, e.g. adding dimension dependencies\n                        and changing validation. When specifying "N", operations requiring single update mode to execute\n                        will be skipped and warnings will be issued.\n                    ')

    
    # Attribute WorkspaceID uses Python identifier WorkspaceID
    __WorkspaceID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'WorkspaceID'), 'WorkspaceID', '__httpwww_stibosystems_comstep_CTD_ANON_WorkspaceID', _module_typeBindings.StepID)
    __WorkspaceID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 178, 12)
    __WorkspaceID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 178, 12)
    
    WorkspaceID = property(__WorkspaceID.value, __WorkspaceID.set, None, '\n                        Specifies the ID of the workspace that provides the content selection for an export. During\n                        import, it identifies the workspace to which data will be associated.\n                    ')

    
    # Attribute ReplaceProductToClassificationReferences uses Python identifier ReplaceProductToClassificationReferences
    __ReplaceProductToClassificationReferences = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ReplaceProductToClassificationReferences'), 'ReplaceProductToClassificationReferences', '__httpwww_stibosystems_comstep_CTD_ANON_ReplaceProductToClassificationReferences', _module_typeBindings.YesNoType, unicode_default='N')
    __ReplaceProductToClassificationReferences._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 186, 12)
    __ReplaceProductToClassificationReferences._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 186, 12)
    
    ReplaceProductToClassificationReferences = property(__ReplaceProductToClassificationReferences.value, __ReplaceProductToClassificationReferences.set, None, '\n                        @Deprecated, use ReplacementRules/Products/ReplaceClassificationReferences instead.\n                    ')

    
    # Attribute ReplaceClassificationValues uses Python identifier ReplaceClassificationValues
    __ReplaceClassificationValues = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ReplaceClassificationValues'), 'ReplaceClassificationValues', '__httpwww_stibosystems_comstep_CTD_ANON_ReplaceClassificationValues', _module_typeBindings.YesNoType, unicode_default='N')
    __ReplaceClassificationValues._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 193, 12)
    __ReplaceClassificationValues._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 193, 12)
    
    ReplaceClassificationValues = property(__ReplaceClassificationValues.value, __ReplaceClassificationValues.set, None, '\n                        @Deprecated, use ReplacementRules/Classifications/ReplaceValues instead.\n                    ')

    
    # Attribute ReplaceEntityValues uses Python identifier ReplaceEntityValues
    __ReplaceEntityValues = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ReplaceEntityValues'), 'ReplaceEntityValues', '__httpwww_stibosystems_comstep_CTD_ANON_ReplaceEntityValues', _module_typeBindings.YesNoType, unicode_default='N')
    __ReplaceEntityValues._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 200, 12)
    __ReplaceEntityValues._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 200, 12)
    
    ReplaceEntityValues = property(__ReplaceEntityValues.value, __ReplaceEntityValues.set, None, '\n                        @Deprecated, use ReplacementRules/Entities/ReplaceValues instead.\n                    ')

    
    # Attribute ReplaceValidUserTypesForAttributes uses Python identifier ReplaceValidUserTypesForAttributes
    __ReplaceValidUserTypesForAttributes = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ReplaceValidUserTypesForAttributes'), 'ReplaceValidUserTypesForAttributes', '__httpwww_stibosystems_comstep_CTD_ANON_ReplaceValidUserTypesForAttributes', _module_typeBindings.YesNoType, unicode_default='N')
    __ReplaceValidUserTypesForAttributes._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 207, 12)
    __ReplaceValidUserTypesForAttributes._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 207, 12)
    
    ReplaceValidUserTypesForAttributes = property(__ReplaceValidUserTypesForAttributes.value, __ReplaceValidUserTypesForAttributes.set, None, '\n                        @Deprecated, use ReplacementRules/Attributes/ReplaceUserTypeLinks instead.\n                    ')

    
    # Attribute ExportTime uses Python identifier ExportTime
    __ExportTime = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ExportTime'), 'ExportTime', '__httpwww_stibosystems_comstep_CTD_ANON_ExportTime', pyxb.binding.datatypes.string)
    __ExportTime._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 214, 12)
    __ExportTime._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 214, 12)
    
    ExportTime = property(__ExportTime.value, __ExportTime.set, None, '\n                        Specifies the starting time for an export in the format "YYYY-MM-DD HH:MM:SS", eg "1999-10-15\n                        12:00:00".\n                    ')

    
    # Attribute UseContextLocale uses Python identifier UseContextLocale
    __UseContextLocale = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UseContextLocale'), 'UseContextLocale', '__httpwww_stibosystems_comstep_CTD_ANON_UseContextLocale', pyxb.binding.datatypes.boolean, unicode_default='false')
    __UseContextLocale._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 222, 12)
    __UseContextLocale._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 222, 12)
    
    UseContextLocale = property(__UseContextLocale.value, __UseContextLocale.set, None, '\n                        Used for export only. Specifies whether or not data has been converted according to the context\n                        locale.\n                    ')

    
    # Attribute ApproveTranslationTarget uses Python identifier ApproveTranslationTarget
    __ApproveTranslationTarget = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ApproveTranslationTarget'), 'ApproveTranslationTarget', '__httpwww_stibosystems_comstep_CTD_ANON_ApproveTranslationTarget', _module_typeBindings.StepID)
    __ApproveTranslationTarget._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 230, 12)
    __ApproveTranslationTarget._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 230, 12)
    
    ApproveTranslationTarget = property(__ApproveTranslationTarget.value, __ApproveTranslationTarget.set, None, '\n                        ID of the language dimension point for which translations should be approved.\n                    ')

    
    # Attribute SuppressReTranslations uses Python identifier SuppressReTranslations
    __SuppressReTranslations = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SuppressReTranslations'), 'SuppressReTranslations', '__httpwww_stibosystems_comstep_CTD_ANON_SuppressReTranslations', _module_typeBindings.YesNoType, unicode_default='N')
    __SuppressReTranslations._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 237, 12)
    __SuppressReTranslations._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 237, 12)
    
    SuppressReTranslations = property(__SuppressReTranslations.value, __SuppressReTranslations.set, None, None)

    
    # Attribute AutoFillQualifiers uses Python identifier AutoFillQualifiers
    __AutoFillQualifiers = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AutoFillQualifiers'), 'AutoFillQualifiers', '__httpwww_stibosystems_comstep_CTD_ANON_AutoFillQualifiers', _module_typeBindings.YesNoType, unicode_default='N')
    __AutoFillQualifiers._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 238, 12)
    __AutoFillQualifiers._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 238, 12)
    
    AutoFillQualifiers = property(__AutoFillQualifiers.value, __AutoFillQualifiers.set, None, None)

    
    # Attribute ExportValidAndAbsent uses Python identifier ExportValidAndAbsent
    __ExportValidAndAbsent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ExportValidAndAbsent'), 'ExportValidAndAbsent', '__httpwww_stibosystems_comstep_CTD_ANON_ExportValidAndAbsent', pyxb.binding.datatypes.boolean, unicode_default='false')
    __ExportValidAndAbsent._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 239, 12)
    __ExportValidAndAbsent._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 239, 12)
    
    ExportValidAndAbsent = property(__ExportValidAndAbsent.value, __ExportValidAndAbsent.set, None, '\n                        Export includes absent data as "blank" values/terms/names or cross-references/links without target.\n                        If imported back into STEP, that data will be deleted (pending the required privileges).\n                        (Import is not implemented yet, as of STEP 11)\n                    ')

    
    # Attribute ApproximateMemoryRequirement uses Python identifier ApproximateMemoryRequirement
    __ApproximateMemoryRequirement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ApproximateMemoryRequirement'), 'ApproximateMemoryRequirement', '__httpwww_stibosystems_comstep_CTD_ANON_ApproximateMemoryRequirement', pyxb.binding.datatypes.long)
    __ApproximateMemoryRequirement._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 248, 12)
    __ApproximateMemoryRequirement._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 248, 12)
    
    ApproximateMemoryRequirement = property(__ApproximateMemoryRequirement.value, __ApproximateMemoryRequirement.set, None, None)

    _ElementMap.update({
        __ReplacementRules.name() : __ReplacementRules,
        __TagGroupList.name() : __TagGroupList,
        __TagList.name() : __TagList,
        __DimensionList.name() : __DimensionList,
        __Qualifiers.name() : __Qualifiers,
        __ContextList.name() : __ContextList,
        __CrossContexts.name() : __CrossContexts,
        __GlobalSettings.name() : __GlobalSettings,
        __UserTypes.name() : __UserTypes,
        __Keys.name() : __Keys,
        __EdgeTypes.name() : __EdgeTypes,
        __DerivedEventTypes.name() : __DerivedEventTypes,
        __CrossReferenceTypes.name() : __CrossReferenceTypes,
        __DeleteAssets.name() : __DeleteAssets,
        __DeleteProducts.name() : __DeleteProducts,
        __DeleteEntities.name() : __DeleteEntities,
        __DeleteClassifications.name() : __DeleteClassifications,
        __UnitList.name() : __UnitList,
        __CollectionList.name() : __CollectionList,
        __ListOfValuesGroupList.name() : __ListOfValuesGroupList,
        __ListsOfValues.name() : __ListsOfValues,
        __AttributeGroupList.name() : __AttributeGroupList,
        __AttributeList.name() : __AttributeList,
        __AttributeTransformationGroups.name() : __AttributeTransformationGroups,
        __TableColors.name() : __TableColors,
        __TableRules.name() : __TableRules,
        __TableTypeGroupList.name() : __TableTypeGroupList,
        __ColumnTypeGroupList.name() : __ColumnTypeGroupList,
        __RowTypeGroupList.name() : __RowTypeGroupList,
        __TableTypes.name() : __TableTypes,
        __ColumnTypes.name() : __ColumnTypes,
        __RowTypes.name() : __RowTypes,
        __DataContainerTypes.name() : __DataContainerTypes,
        __SetupGroups.name() : __SetupGroups,
        __SetupEntities.name() : __SetupEntities,
        __BusinessLibraries.name() : __BusinessLibraries,
        __BusinessRules.name() : __BusinessRules,
        __STEPWorkflows.name() : __STEPWorkflows,
        __StatusFlags.name() : __StatusFlags,
        __STEPWorkflowProfiles.name() : __STEPWorkflowProfiles,
        __MatchCodes.name() : __MatchCodes,
        __MatchingAlgorithms.name() : __MatchingAlgorithms,
        __Classifications.name() : __Classifications,
        __PublicationGroups.name() : __PublicationGroups,
        __Assets.name() : __Assets,
        __Entities.name() : __Entities,
        __Products.name() : __Products,
        __ActionSetList.name() : __ActionSetList,
        __UserGroupList.name() : __UserGroupList,
        __UserList.name() : __UserList,
        __SystemSetup.name() : __SystemSetup,
        __ImportConfigurations.name() : __ImportConfigurations,
        __ExportConfigurations.name() : __ExportConfigurations,
        __TranslationConfigurations.name() : __TranslationConfigurations,
        __BulkUpdateConfigurations.name() : __BulkUpdateConfigurations,
        __TransformationLookupTableConfigurations.name() : __TransformationLookupTableConfigurations,
        __ImageConversionConfigurations.name() : __ImageConversionConfigurations,
        __AssetPushEventQueues.name() : __AssetPushEventQueues,
        __AssetPushConfigurations.name() : __AssetPushConfigurations,
        __ECatalogs.name() : __ECatalogs,
        __PortalConfigurations.name() : __PortalConfigurations,
        __DeleteUnits.name() : __DeleteUnits,
        __DeleteAttributes.name() : __DeleteAttributes,
        __DeleteListOfValues.name() : __DeleteListOfValues,
        __EventQueues.name() : __EventQueues,
        __MissingObjects.name() : __MissingObjects,
        __IntegrationEndpoints.name() : __IntegrationEndpoints,
        __EventProcessors.name() : __EventProcessors,
        __ChangePackages.name() : __ChangePackages,
        __ComponentModels.name() : __ComponentModels,
        __ScheduledProcesses.name() : __ScheduledProcesses
    })
    _AttributeMap.update({
        __ContextID.name() : __ContextID,
        __AutoApprove.name() : __AutoApprove,
        __AutoInitiate.name() : __AutoInitiate,
        __StateflowImportEvent.name() : __StateflowImportEvent,
        __STEPWorkflowImportEvent.name() : __STEPWorkflowImportEvent,
        __ExportTransactionID.name() : __ExportTransactionID,
        __ReplaceProductValues.name() : __ReplaceProductValues,
        __AllowInvalidValues.name() : __AllowInvalidValues,
        __ReplaceAttributeLinks.name() : __ReplaceAttributeLinks,
        __ReplaceProductToProductCrossReferences.name() : __ReplaceProductToProductCrossReferences,
        __ExportContext.name() : __ExportContext,
        __ReplaceTerms.name() : __ReplaceTerms,
        __ReplaceClassificationToClassificationCrossReferences.name() : __ReplaceClassificationToClassificationCrossReferences,
        __ReplaceOverrideToSubProductReferences.name() : __ReplaceOverrideToSubProductReferences,
        __SingleUpdateMode.name() : __SingleUpdateMode,
        __WorkspaceID.name() : __WorkspaceID,
        __ReplaceProductToClassificationReferences.name() : __ReplaceProductToClassificationReferences,
        __ReplaceClassificationValues.name() : __ReplaceClassificationValues,
        __ReplaceEntityValues.name() : __ReplaceEntityValues,
        __ReplaceValidUserTypesForAttributes.name() : __ReplaceValidUserTypesForAttributes,
        __ExportTime.name() : __ExportTime,
        __UseContextLocale.name() : __UseContextLocale,
        __ApproveTranslationTarget.name() : __ApproveTranslationTarget,
        __SuppressReTranslations.name() : __SuppressReTranslations,
        __AutoFillQualifiers.name() : __AutoFillQualifiers,
        __ExportValidAndAbsent.name() : __ExportValidAndAbsent,
        __ApproximateMemoryRequirement.name() : __ApproximateMemoryRequirement
    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type {http://www.stibosystems.com/step}ActionLinkType with content type EMPTY
class ActionLinkType (pyxb.binding.basis.complexTypeDefinition):
    """
                A link to an action.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ActionLinkType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 383, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ActionID uses Python identifier ActionID
    __ActionID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ActionID'), 'ActionID', '__httpwww_stibosystems_comstep_ActionLinkType_ActionID', _module_typeBindings.StepActionID, required=True)
    __ActionID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 389, 8)
    __ActionID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 389, 8)
    
    ActionID = property(__ActionID.value, __ActionID.set, None, '\n                    The ID of the action.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ActionID.name() : __ActionID
    })
_module_typeBindings.ActionLinkType = ActionLinkType
Namespace.addCategoryObject('typeBinding', 'ActionLinkType', ActionLinkType)


# Complex type {http://www.stibosystems.com/step}ActionSetType with content type ELEMENT_ONLY
class ActionSetType (pyxb.binding.basis.complexTypeDefinition):
    """
                A set of actions that can be granted to a user through privilege rules.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ActionSetType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 397, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_ActionSetType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 404, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_ActionSetType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 405, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ActionLink uses Python identifier ActionLink
    __ActionLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ActionLink'), 'ActionLink', '__httpwww_stibosystems_comstep_ActionSetType_httpwww_stibosystems_comstepActionLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 406, 12), )

    
    ActionLink = property(__ActionLink.value, __ActionLink.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_ActionSetType_ID', _module_typeBindings.StepActionSetID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 408, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 408, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_ActionSetType_Type', _module_typeBindings.STD_ANON_, required=True)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 409, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 409, 8)
    
    Type = property(__Type.value, __Type.set, None, "\n                    Determines whether the action set is a setup or a user action set.\n                    Has one of the values 'setup' or 'user' accordingly.\n                ")

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_ActionSetType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 423, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 423, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_ActionSetType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 424, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 424, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_ActionSetType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 425, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 425, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __ActionLink.name() : __ActionLink
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __Type.name() : __Type,
        __Selected.name() : __Selected,
        __Changed.name() : __Changed,
        __Referenced.name() : __Referenced
    })
_module_typeBindings.ActionSetType = ActionSetType
Namespace.addCategoryObject('typeBinding', 'ActionSetType', ActionSetType)


# Complex type {http://www.stibosystems.com/step}AssetType with content type ELEMENT_ONLY
class AssetType (pyxb.binding.basis.complexTypeDefinition):
    """
                Describes an asset in STEP. The Asset element lists its names, references and values. Note that assets
                don't have their own hierarchy. Therefore they must, for creation, be nested inside a classification
                element and/or have a ClassificationReference sub element. DTP Document assets may contain pages that
                have been created by a DTP client.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AssetType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 438, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_AssetType_httpwww_stibosystems_comstepKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 448, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_AssetType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 449, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AssetPushLocation uses Python identifier AssetPushLocation
    __AssetPushLocation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssetPushLocation'), 'AssetPushLocation', '__httpwww_stibosystems_comstep_AssetType_httpwww_stibosystems_comstepAssetPushLocation', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 450, 12), )

    
    AssetPushLocation = property(__AssetPushLocation.value, __AssetPushLocation.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteSuppressedClassificationReference uses Python identifier DeleteSuppressedClassificationReference
    __DeleteSuppressedClassificationReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedClassificationReference'), 'DeleteSuppressedClassificationReference', '__httpwww_stibosystems_comstep_AssetType_httpwww_stibosystems_comstepDeleteSuppressedClassificationReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 452, 16), )

    
    DeleteSuppressedClassificationReference = property(__DeleteSuppressedClassificationReference.value, __DeleteSuppressedClassificationReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteClassificationReference uses Python identifier DeleteClassificationReference
    __DeleteClassificationReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteClassificationReference'), 'DeleteClassificationReference', '__httpwww_stibosystems_comstep_AssetType_httpwww_stibosystems_comstepDeleteClassificationReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 454, 16), )

    
    DeleteClassificationReference = property(__DeleteClassificationReference.value, __DeleteClassificationReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SuppressedClassificationReference uses Python identifier SuppressedClassificationReference
    __SuppressedClassificationReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SuppressedClassificationReference'), 'SuppressedClassificationReference', '__httpwww_stibosystems_comstep_AssetType_httpwww_stibosystems_comstepSuppressedClassificationReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 456, 16), )

    
    SuppressedClassificationReference = property(__SuppressedClassificationReference.value, __SuppressedClassificationReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ClassificationReference uses Python identifier ClassificationReference
    __ClassificationReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClassificationReference'), 'ClassificationReference', '__httpwww_stibosystems_comstep_AssetType_httpwww_stibosystems_comstepClassificationReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 458, 16), )

    
    ClassificationReference = property(__ClassificationReference.value, __ClassificationReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteSuppressedEntityCrossReference uses Python identifier DeleteSuppressedEntityCrossReference
    __DeleteSuppressedEntityCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedEntityCrossReference'), 'DeleteSuppressedEntityCrossReference', '__httpwww_stibosystems_comstep_AssetType_httpwww_stibosystems_comstepDeleteSuppressedEntityCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 462, 16), )

    
    DeleteSuppressedEntityCrossReference = property(__DeleteSuppressedEntityCrossReference.value, __DeleteSuppressedEntityCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteEntityCrossReference uses Python identifier DeleteEntityCrossReference
    __DeleteEntityCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteEntityCrossReference'), 'DeleteEntityCrossReference', '__httpwww_stibosystems_comstep_AssetType_httpwww_stibosystems_comstepDeleteEntityCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 464, 16), )

    
    DeleteEntityCrossReference = property(__DeleteEntityCrossReference.value, __DeleteEntityCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SuppressedEntityCrossReference uses Python identifier SuppressedEntityCrossReference
    __SuppressedEntityCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SuppressedEntityCrossReference'), 'SuppressedEntityCrossReference', '__httpwww_stibosystems_comstep_AssetType_httpwww_stibosystems_comstepSuppressedEntityCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 466, 16), )

    
    SuppressedEntityCrossReference = property(__SuppressedEntityCrossReference.value, __SuppressedEntityCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}EntityCrossReference uses Python identifier EntityCrossReference
    __EntityCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EntityCrossReference'), 'EntityCrossReference', '__httpwww_stibosystems_comstep_AssetType_httpwww_stibosystems_comstepEntityCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 468, 16), )

    
    EntityCrossReference = property(__EntityCrossReference.value, __EntityCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Values uses Python identifier Values
    __Values = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Values'), 'Values', '__httpwww_stibosystems_comstep_AssetType_httpwww_stibosystems_comstepValues', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 471, 12), )

    
    Values = property(__Values.value, __Values.set, None, None)

    
    # Element {http://www.stibosystems.com/step}CurrentTasks uses Python identifier CurrentTasks
    __CurrentTasks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CurrentTasks'), 'CurrentTasks', '__httpwww_stibosystems_comstep_AssetType_httpwww_stibosystems_comstepCurrentTasks', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 472, 12), )

    
    CurrentTasks = property(__CurrentTasks.value, __CurrentTasks.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Pages uses Python identifier Pages
    __Pages = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pages'), 'Pages', '__httpwww_stibosystems_comstep_AssetType_httpwww_stibosystems_comstepPages', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 473, 12), )

    
    Pages = property(__Pages.value, __Pages.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AssetContent uses Python identifier AssetContent
    __AssetContent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssetContent'), 'AssetContent', '__httpwww_stibosystems_comstep_AssetType_httpwww_stibosystems_comstepAssetContent', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 474, 12), )

    
    AssetContent = property(__AssetContent.value, __AssetContent.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AssetBinaryContent uses Python identifier AssetBinaryContent
    __AssetBinaryContent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssetBinaryContent'), 'AssetBinaryContent', '__httpwww_stibosystems_comstep_AssetType_httpwww_stibosystems_comstepAssetBinaryContent', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 475, 12), )

    
    AssetBinaryContent = property(__AssetBinaryContent.value, __AssetBinaryContent.set, None, None)

    
    # Attribute SourcePos uses Python identifier SourcePos
    __SourcePos = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SourcePos'), 'SourcePos', '__httpwww_stibosystems_comstep_AssetType_SourcePos', pyxb.binding.datatypes.string)
    __SourcePos._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 477, 8)
    __SourcePos._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 477, 8)
    
    SourcePos = property(__SourcePos.value, __SourcePos.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_AssetType_ID', _module_typeBindings.StepAssetID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 478, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 478, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    ID of the asset. Not required for creation if auto IDs are configured for the asset object type. Not\n                    required for updates if a KeyValue is supplied.\n                ')

    
    # Attribute Republished uses Python identifier Republished
    __Republished = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Republished'), 'Republished', '__httpwww_stibosystems_comstep_AssetType_Republished', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Republished._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 486, 8)
    __Republished._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 486, 8)
    
    Republished = property(__Republished.value, __Republished.set, None, None)

    
    # Attribute UserTypeID uses Python identifier UserTypeID
    __UserTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserTypeID'), 'UserTypeID', '__httpwww_stibosystems_comstep_AssetType_UserTypeID', _module_typeBindings.StepObjectTypeID)
    __UserTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 488, 8)
    __UserTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 488, 8)
    
    UserTypeID = property(__UserTypeID.value, __UserTypeID.set, None, '\n                    Identifies the object type of the object. Required when new assets are created if DefaultUserTypeID\n                    is not set.\n                ')

    
    # Attribute AnalyzerResult uses Python identifier AnalyzerResult
    __AnalyzerResult = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AnalyzerResult'), 'AnalyzerResult', '__httpwww_stibosystems_comstep_AssetType_AnalyzerResult', pyxb.binding.datatypes.string)
    __AnalyzerResult._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 496, 8)
    __AnalyzerResult._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 496, 8)
    
    AnalyzerResult = property(__AnalyzerResult.value, __AnalyzerResult.set, None, '\n                    @Deprecated, to be removed in a future release.\n\n                    WebPublisher specific attribute. Identifies whether the asset in question is\n                    present on the website. Possible values: included, excluded.\n                ')

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_AssetType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 506, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 506, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_AssetType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 507, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 507, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    _ElementMap.update({
        __KeyValue.name() : __KeyValue,
        __Name.name() : __Name,
        __AssetPushLocation.name() : __AssetPushLocation,
        __DeleteSuppressedClassificationReference.name() : __DeleteSuppressedClassificationReference,
        __DeleteClassificationReference.name() : __DeleteClassificationReference,
        __SuppressedClassificationReference.name() : __SuppressedClassificationReference,
        __ClassificationReference.name() : __ClassificationReference,
        __DeleteSuppressedEntityCrossReference.name() : __DeleteSuppressedEntityCrossReference,
        __DeleteEntityCrossReference.name() : __DeleteEntityCrossReference,
        __SuppressedEntityCrossReference.name() : __SuppressedEntityCrossReference,
        __EntityCrossReference.name() : __EntityCrossReference,
        __Values.name() : __Values,
        __CurrentTasks.name() : __CurrentTasks,
        __Pages.name() : __Pages,
        __AssetContent.name() : __AssetContent,
        __AssetBinaryContent.name() : __AssetBinaryContent
    })
    _AttributeMap.update({
        __SourcePos.name() : __SourcePos,
        __ID.name() : __ID,
        __Republished.name() : __Republished,
        __UserTypeID.name() : __UserTypeID,
        __AnalyzerResult.name() : __AnalyzerResult,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced
    })
_module_typeBindings.AssetType = AssetType
Namespace.addCategoryObject('typeBinding', 'AssetType', AssetType)


# Complex type {http://www.stibosystems.com/step}AssetContentSpecificationType with content type EMPTY
class AssetContentSpecificationType (pyxb.binding.basis.complexTypeDefinition):
    """
                Holds information about a specific asset conversion.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AssetContentSpecificationType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 521, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ImageConversionConfigurationID uses Python identifier ImageConversionConfigurationID
    __ImageConversionConfigurationID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ImageConversionConfigurationID'), 'ImageConversionConfigurationID', '__httpwww_stibosystems_comstep_AssetContentSpecificationType_ImageConversionConfigurationID', _module_typeBindings.StepImageConversionConfigurationID)
    __ImageConversionConfigurationID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 527, 8)
    __ImageConversionConfigurationID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 527, 8)
    
    ImageConversionConfigurationID = property(__ImageConversionConfigurationID.value, __ImageConversionConfigurationID.set, None, '\n                    ID of the image conversion configuration. Empty when the asset content specification represents the\n                    unconverted source.\n                ')

    
    # Attribute IncludesBinaryContent uses Python identifier IncludesBinaryContent
    __IncludesBinaryContent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IncludesBinaryContent'), 'IncludesBinaryContent', '__httpwww_stibosystems_comstep_AssetContentSpecificationType_IncludesBinaryContent', pyxb.binding.datatypes.boolean)
    __IncludesBinaryContent._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 535, 8)
    __IncludesBinaryContent._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 535, 8)
    
    IncludesBinaryContent = property(__IncludesBinaryContent.value, __IncludesBinaryContent.set, None, None)

    
    # Attribute RelativeURL uses Python identifier RelativeURL
    __RelativeURL = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'RelativeURL'), 'RelativeURL', '__httpwww_stibosystems_comstep_AssetContentSpecificationType_RelativeURL', pyxb.binding.datatypes.string)
    __RelativeURL._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 536, 8)
    __RelativeURL._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 536, 8)
    
    RelativeURL = property(__RelativeURL.value, __RelativeURL.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ImageConversionConfigurationID.name() : __ImageConversionConfigurationID,
        __IncludesBinaryContent.name() : __IncludesBinaryContent,
        __RelativeURL.name() : __RelativeURL
    })
_module_typeBindings.AssetContentSpecificationType = AssetContentSpecificationType
Namespace.addCategoryObject('typeBinding', 'AssetContentSpecificationType', AssetContentSpecificationType)


# Complex type {http://www.stibosystems.com/step}AssetBinaryContentType with content type ELEMENT_ONLY
class AssetBinaryContentType (pyxb.binding.basis.complexTypeDefinition):
    """
                Holds the base64 encoded binary asset data for a single asset conversion / the source.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AssetBinaryContentType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 538, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}BinaryContent uses Python identifier BinaryContent
    __BinaryContent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BinaryContent'), 'BinaryContent', '__httpwww_stibosystems_comstep_AssetBinaryContentType_httpwww_stibosystems_comstepBinaryContent', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 545, 12), )

    
    BinaryContent = property(__BinaryContent.value, __BinaryContent.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_AssetBinaryContentType_QualifierID', pyxb.binding.datatypes.string)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 547, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 547, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, None)

    
    # Attribute ImageConversionConfigurationID uses Python identifier ImageConversionConfigurationID
    __ImageConversionConfigurationID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ImageConversionConfigurationID'), 'ImageConversionConfigurationID', '__httpwww_stibosystems_comstep_AssetBinaryContentType_ImageConversionConfigurationID', _module_typeBindings.StepImageConversionConfigurationID)
    __ImageConversionConfigurationID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 548, 8)
    __ImageConversionConfigurationID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 548, 8)
    
    ImageConversionConfigurationID = property(__ImageConversionConfigurationID.value, __ImageConversionConfigurationID.set, None, '\n                    ID of the image conversion configuration. Empty when the asset content specification represents the\n                    unconverted source. Notice that for creating or updating asset content during import, only elements\n                    for which the value of this attribute is empty will be handled.\n                ')

    
    # Attribute MIMEType uses Python identifier MIMEType
    __MIMEType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MIMEType'), 'MIMEType', '__httpwww_stibosystems_comstep_AssetBinaryContentType_MIMEType', pyxb.binding.datatypes.string)
    __MIMEType._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 557, 8)
    __MIMEType._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 557, 8)
    
    MIMEType = property(__MIMEType.value, __MIMEType.set, None, None)

    
    # Attribute Checksum uses Python identifier Checksum
    __Checksum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Checksum'), 'Checksum', '__httpwww_stibosystems_comstep_AssetBinaryContentType_Checksum', pyxb.binding.datatypes.string)
    __Checksum._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 558, 8)
    __Checksum._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 558, 8)
    
    Checksum = property(__Checksum.value, __Checksum.set, None, None)

    _ElementMap.update({
        __BinaryContent.name() : __BinaryContent
    })
    _AttributeMap.update({
        __QualifierID.name() : __QualifierID,
        __ImageConversionConfigurationID.name() : __ImageConversionConfigurationID,
        __MIMEType.name() : __MIMEType,
        __Checksum.name() : __Checksum
    })
_module_typeBindings.AssetBinaryContentType = AssetBinaryContentType
Namespace.addCategoryObject('typeBinding', 'AssetBinaryContentType', AssetBinaryContentType)


# Complex type {http://www.stibosystems.com/step}AssetBasketLinkType with content type ELEMENT_ONLY
class AssetBasketLinkType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}AssetBasketLinkType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AssetBasketLinkType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 560, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_AssetBasketLinkType_httpwww_stibosystems_comstepKeyValue', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 562, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Attribute AssetID uses Python identifier AssetID
    __AssetID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AssetID'), 'AssetID', '__httpwww_stibosystems_comstep_AssetBasketLinkType_AssetID', _module_typeBindings.StepAssetID, required=True)
    __AssetID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 564, 8)
    __AssetID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 564, 8)
    
    AssetID = property(__AssetID.value, __AssetID.set, None, None)

    _ElementMap.update({
        __KeyValue.name() : __KeyValue
    })
    _AttributeMap.update({
        __AssetID.name() : __AssetID
    })
_module_typeBindings.AssetBasketLinkType = AssetBasketLinkType
Namespace.addCategoryObject('typeBinding', 'AssetBasketLinkType', AssetBasketLinkType)


# Complex type {http://www.stibosystems.com/step}AssetCrossReferenceType with content type ELEMENT_ONLY
class AssetCrossReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """
                A reference to an asset.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AssetCrossReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 566, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_AssetCrossReferenceType_httpwww_stibosystems_comstepKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 573, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_AssetCrossReferenceType_httpwww_stibosystems_comstepMetaData', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 575, 16), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Asset uses Python identifier Asset
    __Asset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Asset'), 'Asset', '__httpwww_stibosystems_comstep_AssetCrossReferenceType_httpwww_stibosystems_comstepAsset', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 576, 16), )

    
    Asset = property(__Asset.value, __Asset.set, None, '\n                            Embedded reference target. Has no effect during import.\n                        ')

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_AssetCrossReferenceType_Type', _module_typeBindings.StepLinkTypeID, required=True)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 585, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 585, 8)
    
    Type = property(__Type.value, __Type.set, None, '\n                    ID of the reference type.\n                ')

    
    # Attribute AssetID uses Python identifier AssetID
    __AssetID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AssetID'), 'AssetID', '__httpwww_stibosystems_comstep_AssetCrossReferenceType_AssetID', _module_typeBindings.StepAssetID)
    __AssetID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 592, 8)
    __AssetID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 592, 8)
    
    AssetID = property(__AssetID.value, __AssetID.set, None, '\n                    ID of the referenced asset. Required if a KeyValue is not supplied.\n                ')

    
    # Attribute AnalyzerResult uses Python identifier AnalyzerResult
    __AnalyzerResult = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AnalyzerResult'), 'AnalyzerResult', '__httpwww_stibosystems_comstep_AssetCrossReferenceType_AnalyzerResult', pyxb.binding.datatypes.string)
    __AnalyzerResult._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 599, 8)
    __AnalyzerResult._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 599, 8)
    
    AnalyzerResult = property(__AnalyzerResult.value, __AnalyzerResult.set, None, '\n                    @Deprecated, to be removed in a future release.\n\n                    WebPublisher specific attribute. Identifies whether the referenced asset is present on the website.\n                    Possible values: included, excluded\n                ')

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_AssetCrossReferenceType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 609, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 609, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_AssetCrossReferenceType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 611, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 611, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, '\n                    Identifies in which contexts this reference is visible. If not specified, the current context is\n                    used.\n                ')

    
    # Attribute Inherited uses Python identifier Inherited
    __Inherited = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Inherited'), 'Inherited', '__httpwww_stibosystems_comstep_AssetCrossReferenceType_Inherited', pyxb.binding.datatypes.integer)
    __Inherited._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 619, 8)
    __Inherited._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 619, 8)
    
    Inherited = property(__Inherited.value, __Inherited.set, None, '\n                    Only relevant during export when nested inside a partial hierarchy. If present during import,\n                    the link is simply ignored. If this attribute is present then link is inherited. Will not\n                    be exported for local links (thus only numbers 1 and upward will be exported - 1 indicating\n                    inherited from immediate parent).\n                    The integer value of this attribute indicates how far up this link is inherited from.\n                    In cross context exports it might be relevant to have this number to find the most relevant link\n                    for a given context.\n                    NOTE: will only inherit inside hierarchy of equal node types - ie. will not inherit from\n                    classification to product hierarchy.\n                ')

    _ElementMap.update({
        __KeyValue.name() : __KeyValue,
        __MetaData.name() : __MetaData,
        __Asset.name() : __Asset
    })
    _AttributeMap.update({
        __Type.name() : __Type,
        __AssetID.name() : __AssetID,
        __AnalyzerResult.name() : __AnalyzerResult,
        __Changed.name() : __Changed,
        __QualifierID.name() : __QualifierID,
        __Inherited.name() : __Inherited
    })
_module_typeBindings.AssetCrossReferenceType = AssetCrossReferenceType
Namespace.addCategoryObject('typeBinding', 'AssetCrossReferenceType', AssetCrossReferenceType)


# Complex type {http://www.stibosystems.com/step}AssetCrossReferenceTypeType with content type ELEMENT_ONLY
class AssetCrossReferenceTypeType (pyxb.binding.basis.complexTypeDefinition):
    """
                The definition of a reference type for which references point to assets.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AssetCrossReferenceTypeType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 635, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_AssetCrossReferenceTypeType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 642, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_AssetCrossReferenceTypeType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 643, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeLink uses Python identifier AttributeLink
    __AttributeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink'), 'AttributeLink', '__httpwww_stibosystems_comstep_AssetCrossReferenceTypeType_httpwww_stibosystems_comstepAttributeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 644, 12), )

    
    AttributeLink = property(__AttributeLink.value, __AttributeLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DimensionLink uses Python identifier DimensionLink
    __DimensionLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink'), 'DimensionLink', '__httpwww_stibosystems_comstep_AssetCrossReferenceTypeType_httpwww_stibosystems_comstepDimensionLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 645, 12), )

    
    DimensionLink = property(__DimensionLink.value, __DimensionLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeGroupLink uses Python identifier AttributeGroupLink
    __AttributeGroupLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), 'AttributeGroupLink', '__httpwww_stibosystems_comstep_AssetCrossReferenceTypeType_httpwww_stibosystems_comstepAttributeGroupLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 646, 12), )

    
    AttributeGroupLink = property(__AttributeGroupLink.value, __AttributeGroupLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}UserTypeLink uses Python identifier UserTypeLink
    __UserTypeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink'), 'UserTypeLink', '__httpwww_stibosystems_comstep_AssetCrossReferenceTypeType_httpwww_stibosystems_comstepUserTypeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 647, 12), )

    
    UserTypeLink = property(__UserTypeLink.value, __UserTypeLink.set, None, '\n                        Link to a valid source type. Notice that this source can be a DataContainerType.\n                    ')

    
    # Element {http://www.stibosystems.com/step}TargetUserTypeLink uses Python identifier TargetUserTypeLink
    __TargetUserTypeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TargetUserTypeLink'), 'TargetUserTypeLink', '__httpwww_stibosystems_comstep_AssetCrossReferenceTypeType_httpwww_stibosystems_comstepTargetUserTypeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 654, 12), )

    
    TargetUserTypeLink = property(__TargetUserTypeLink.value, __TargetUserTypeLink.set, None, None)

    
    # Attribute Inherited uses Python identifier Inherited
    __Inherited = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Inherited'), 'Inherited', '__httpwww_stibosystems_comstep_AssetCrossReferenceTypeType_Inherited', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Inherited._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 656, 8)
    __Inherited._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 656, 8)
    
    Inherited = property(__Inherited.value, __Inherited.set, None, '\n                    Specifies whether or not references of this type are hierarchically inherited. Cannot be "false" if\n                    the value for the Accumulated attribute is "true".\n                ')

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_AssetCrossReferenceTypeType_ID', _module_typeBindings.StepLinkTypeID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 664, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 664, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute Revised uses Python identifier Revised
    __Revised = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Revised'), 'Revised', '__httpwww_stibosystems_comstep_AssetCrossReferenceTypeType_Revised', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Revised._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 665, 8)
    __Revised._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 665, 8)
    
    Revised = property(__Revised.value, __Revised.set, None, '\n                    Specifies whether references of this type are under revision control or not (externally maintained).\n                    During import, for existing reference types for which references exist, the value can be changed\n                    from "false" to "true" if the import runs in single update mode but cannot be changed from "true"\n                    to "false".\n                ')

    
    # Attribute Completeness uses Python identifier Completeness
    __Completeness = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Completeness'), 'Completeness', '__httpwww_stibosystems_comstep_AssetCrossReferenceTypeType_Completeness', pyxb.binding.datatypes.string)
    __Completeness._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 675, 8)
    __Completeness._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 675, 8)
    
    Completeness = property(__Completeness.value, __Completeness.set, None, '\n                    @Deprecated, not used anymore after the introduction of Completeness Metrics in STEP 7.4 (see\n                    documentation on Completeness Metrics and migration from old pre-7.4 completeness functionality).\n                ')

    
    # Attribute MultiValued uses Python identifier MultiValued
    __MultiValued = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MultiValued'), 'MultiValued', '__httpwww_stibosystems_comstep_AssetCrossReferenceTypeType_MultiValued', pyxb.binding.datatypes.boolean, unicode_default='true')
    __MultiValued._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 683, 8)
    __MultiValued._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 683, 8)
    
    MultiValued = property(__MultiValued.value, __MultiValued.set, None, '\n                    Whether the type allows for multiple references from the same source or not. Can for existing\n                    reference types be changed from "false" to "true". Changing from "true" to "false" requires that no\n                    present source has multiple references.\n                ')

    
    # Attribute Mandatory uses Python identifier Mandatory
    __Mandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Mandatory'), 'Mandatory', '__httpwww_stibosystems_comstep_AssetCrossReferenceTypeType_Mandatory', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Mandatory._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 692, 8)
    __Mandatory._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 692, 8)
    
    Mandatory = property(__Mandatory.value, __Mandatory.set, None, '\n                    Specifies whether or not this reference type is mandatory for approval.\n                ')

    
    # Attribute Accumulated uses Python identifier Accumulated
    __Accumulated = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Accumulated'), 'Accumulated', '__httpwww_stibosystems_comstep_AssetCrossReferenceTypeType_Accumulated', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Accumulated._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 699, 8)
    __Accumulated._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 699, 8)
    
    Accumulated = property(__Accumulated.value, __Accumulated.set, None, '\n                    Specifies whether or not reference inheritance should be accumulated. Can only be "true" if\n                    the value for the MultiValued attribute is "true".\n                ')

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_AssetCrossReferenceTypeType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 707, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 707, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_AssetCrossReferenceTypeType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 708, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 708, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_AssetCrossReferenceTypeType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 709, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 709, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __AttributeLink.name() : __AttributeLink,
        __DimensionLink.name() : __DimensionLink,
        __AttributeGroupLink.name() : __AttributeGroupLink,
        __UserTypeLink.name() : __UserTypeLink,
        __TargetUserTypeLink.name() : __TargetUserTypeLink
    })
    _AttributeMap.update({
        __Inherited.name() : __Inherited,
        __ID.name() : __ID,
        __Revised.name() : __Revised,
        __Completeness.name() : __Completeness,
        __MultiValued.name() : __MultiValued,
        __Mandatory.name() : __Mandatory,
        __Accumulated.name() : __Accumulated,
        __Referenced.name() : __Referenced,
        __Selected.name() : __Selected,
        __Changed.name() : __Changed
    })
_module_typeBindings.AssetCrossReferenceTypeType = AssetCrossReferenceTypeType
Namespace.addCategoryObject('typeBinding', 'AssetCrossReferenceTypeType', AssetCrossReferenceTypeType)


# Complex type {http://www.stibosystems.com/step}AssetElementType with content type ELEMENT_ONLY
class AssetElementType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}AssetElementType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AssetElementType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 711, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}RuleBasedLayout uses Python identifier RuleBasedLayout
    __RuleBasedLayout = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RuleBasedLayout'), 'RuleBasedLayout', '__httpwww_stibosystems_comstep_AssetElementType_httpwww_stibosystems_comstepRuleBasedLayout', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 713, 12), )

    
    RuleBasedLayout = property(__RuleBasedLayout.value, __RuleBasedLayout.set, None, None)

    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_AssetElementType_httpwww_stibosystems_comstepKeyValue', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 714, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Element {http://www.stibosystems.com/step}TemplateLayout uses Python identifier TemplateLayout
    __TemplateLayout = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TemplateLayout'), 'TemplateLayout', '__httpwww_stibosystems_comstep_AssetElementType_httpwww_stibosystems_comstepTemplateLayout', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 715, 12), )

    
    TemplateLayout = property(__TemplateLayout.value, __TemplateLayout.set, None, None)

    
    # Element {http://www.stibosystems.com/step}PickupLayout uses Python identifier PickupLayout
    __PickupLayout = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PickupLayout'), 'PickupLayout', '__httpwww_stibosystems_comstep_AssetElementType_httpwww_stibosystems_comstepPickupLayout', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 716, 12), )

    
    PickupLayout = property(__PickupLayout.value, __PickupLayout.set, None, None)

    
    # Attribute ExtendToFrameID uses Python identifier ExtendToFrameID
    __ExtendToFrameID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ExtendToFrameID'), 'ExtendToFrameID', '__httpwww_stibosystems_comstep_AssetElementType_ExtendToFrameID', _module_typeBindings.StepID)
    __ExtendToFrameID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 718, 8)
    __ExtendToFrameID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 718, 8)
    
    ExtendToFrameID = property(__ExtendToFrameID.value, __ExtendToFrameID.set, None, None)

    
    # Attribute FrameID uses Python identifier FrameID
    __FrameID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'FrameID'), 'FrameID', '__httpwww_stibosystems_comstep_AssetElementType_FrameID', _module_typeBindings.StepID)
    __FrameID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 719, 8)
    __FrameID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 719, 8)
    
    FrameID = property(__FrameID.value, __FrameID.set, None, None)

    
    # Attribute AssetID uses Python identifier AssetID
    __AssetID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AssetID'), 'AssetID', '__httpwww_stibosystems_comstep_AssetElementType_AssetID', _module_typeBindings.StepAssetID, required=True)
    __AssetID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 720, 8)
    __AssetID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 720, 8)
    
    AssetID = property(__AssetID.value, __AssetID.set, None, None)

    _ElementMap.update({
        __RuleBasedLayout.name() : __RuleBasedLayout,
        __KeyValue.name() : __KeyValue,
        __TemplateLayout.name() : __TemplateLayout,
        __PickupLayout.name() : __PickupLayout
    })
    _AttributeMap.update({
        __ExtendToFrameID.name() : __ExtendToFrameID,
        __FrameID.name() : __FrameID,
        __AssetID.name() : __AssetID
    })
_module_typeBindings.AssetElementType = AssetElementType
Namespace.addCategoryObject('typeBinding', 'AssetElementType', AssetElementType)


# Complex type {http://www.stibosystems.com/step}AssetOriginType with content type EMPTY
class AssetOriginType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}AssetOriginType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AssetOriginType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 726, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_AssetOriginType_ID', pyxb.binding.datatypes.string)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 727, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 727, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute AttributeID uses Python identifier AttributeID
    __AttributeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AttributeID'), 'AttributeID', '__httpwww_stibosystems_comstep_AssetOriginType_AttributeID', _module_typeBindings.StepAttributeID)
    __AttributeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 728, 8)
    __AttributeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 728, 8)
    
    AttributeID = property(__AttributeID.value, __AttributeID.set, None, None)

    
    # Attribute Pull uses Python identifier Pull
    __Pull = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Pull'), 'Pull', '__httpwww_stibosystems_comstep_AssetOriginType_Pull', pyxb.binding.datatypes.string)
    __Pull._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 729, 8)
    __Pull._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 729, 8)
    
    Pull = property(__Pull.value, __Pull.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __AttributeID.name() : __AttributeID,
        __Pull.name() : __Pull
    })
_module_typeBindings.AssetOriginType = AssetOriginType
Namespace.addCategoryObject('typeBinding', 'AssetOriginType', AssetOriginType)


# Complex type {http://www.stibosystems.com/step}AssetPushEventQueueType with content type ELEMENT_ONLY
class AssetPushEventQueueType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents an asset push event queue.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AssetPushEventQueueType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 741, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_AssetPushEventQueueType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 748, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_AssetPushEventQueueType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 749, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Attribute DaysRetained uses Python identifier DaysRetained
    __DaysRetained = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DaysRetained'), 'DaysRetained', '__httpwww_stibosystems_comstep_AssetPushEventQueueType_DaysRetained', pyxb.binding.datatypes.string)
    __DaysRetained._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 751, 8)
    __DaysRetained._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 751, 8)
    
    DaysRetained = property(__DaysRetained.value, __DaysRetained.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_AssetPushEventQueueType_ID', _module_typeBindings.StepAssetPushEventQueueID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 752, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 752, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute QueueStatus uses Python identifier QueueStatus
    __QueueStatus = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QueueStatus'), 'QueueStatus', '__httpwww_stibosystems_comstep_AssetPushEventQueueType_QueueStatus', _module_typeBindings.STD_ANON_2, unicode_default='Read')
    __QueueStatus._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 753, 8)
    __QueueStatus._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 753, 8)
    
    QueueStatus = property(__QueueStatus.value, __QueueStatus.set, None, None)

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_AssetPushEventQueueType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 761, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 761, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_AssetPushEventQueueType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 762, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 762, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_AssetPushEventQueueType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 763, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 763, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData
    })
    _AttributeMap.update({
        __DaysRetained.name() : __DaysRetained,
        __ID.name() : __ID,
        __QueueStatus.name() : __QueueStatus,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed
    })
_module_typeBindings.AssetPushEventQueueType = AssetPushEventQueueType
Namespace.addCategoryObject('typeBinding', 'AssetPushEventQueueType', AssetPushEventQueueType)


# Complex type {http://www.stibosystems.com/step}AssetPushConfigurationType with content type ELEMENT_ONLY
class AssetPushConfigurationType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents an AssetPush configuration.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AssetPushConfigurationType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 775, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_AssetPushConfigurationType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 782, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AssetPushMIMETypes uses Python identifier AssetPushMIMETypes
    __AssetPushMIMETypes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssetPushMIMETypes'), 'AssetPushMIMETypes', '__httpwww_stibosystems_comstep_AssetPushConfigurationType_httpwww_stibosystems_comstepAssetPushMIMETypes', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 783, 12), )

    
    AssetPushMIMETypes = property(__AssetPushMIMETypes.value, __AssetPushMIMETypes.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AssetPushAttributes uses Python identifier AssetPushAttributes
    __AssetPushAttributes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssetPushAttributes'), 'AssetPushAttributes', '__httpwww_stibosystems_comstep_AssetPushConfigurationType_httpwww_stibosystems_comstepAssetPushAttributes', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 784, 12), )

    
    AssetPushAttributes = property(__AssetPushAttributes.value, __AssetPushAttributes.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AssetPushClassifications uses Python identifier AssetPushClassifications
    __AssetPushClassifications = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssetPushClassifications'), 'AssetPushClassifications', '__httpwww_stibosystems_comstep_AssetPushConfigurationType_httpwww_stibosystems_comstepAssetPushClassifications', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 785, 12), )

    
    AssetPushClassifications = property(__AssetPushClassifications.value, __AssetPushClassifications.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AssetPushEventQueues uses Python identifier AssetPushEventQueues
    __AssetPushEventQueues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssetPushEventQueues'), 'AssetPushEventQueues', '__httpwww_stibosystems_comstep_AssetPushConfigurationType_httpwww_stibosystems_comstepAssetPushEventQueues', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 786, 12), )

    
    AssetPushEventQueues = property(__AssetPushEventQueues.value, __AssetPushEventQueues.set, None, '\n                        @Deprecated, not used anymore, replaced with EventQueueLink.\n                    ')

    
    # Element {http://www.stibosystems.com/step}EventQueueLink uses Python identifier EventQueueLink
    __EventQueueLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EventQueueLink'), 'EventQueueLink', '__httpwww_stibosystems_comstep_AssetPushConfigurationType_httpwww_stibosystems_comstepEventQueueLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 793, 12), )

    
    EventQueueLink = property(__EventQueueLink.value, __EventQueueLink.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_AssetPushConfigurationType_ID', _module_typeBindings.StepAssetPushConfigurationID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 795, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 795, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute EventQueueID uses Python identifier EventQueueID
    __EventQueueID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'EventQueueID'), 'EventQueueID', '__httpwww_stibosystems_comstep_AssetPushConfigurationType_EventQueueID', _module_typeBindings.StepAssetPushEventQueueID)
    __EventQueueID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 796, 8)
    __EventQueueID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 796, 8)
    
    EventQueueID = property(__EventQueueID.value, __EventQueueID.set, None, '\n                    @Deprecated, not used anymore, please use AssetPushEventQueueID instead\n                ')

    
    # Attribute AssetPushEventQueueID uses Python identifier AssetPushEventQueueID
    __AssetPushEventQueueID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AssetPushEventQueueID'), 'AssetPushEventQueueID', '__httpwww_stibosystems_comstep_AssetPushConfigurationType_AssetPushEventQueueID', _module_typeBindings.StepAssetPushEventQueueID)
    __AssetPushEventQueueID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 803, 8)
    __AssetPushEventQueueID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 803, 8)
    
    AssetPushEventQueueID = property(__AssetPushEventQueueID.value, __AssetPushEventQueueID.set, None, None)

    
    # Attribute WorkspaceID uses Python identifier WorkspaceID
    __WorkspaceID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'WorkspaceID'), 'WorkspaceID', '__httpwww_stibosystems_comstep_AssetPushConfigurationType_WorkspaceID', _module_typeBindings.StepID)
    __WorkspaceID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 804, 8)
    __WorkspaceID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 804, 8)
    
    WorkspaceID = property(__WorkspaceID.value, __WorkspaceID.set, None, None)

    
    # Attribute RelativePathTemplate uses Python identifier RelativePathTemplate
    __RelativePathTemplate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'RelativePathTemplate'), 'RelativePathTemplate', '__httpwww_stibosystems_comstep_AssetPushConfigurationType_RelativePathTemplate', pyxb.binding.datatypes.string)
    __RelativePathTemplate._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 805, 8)
    __RelativePathTemplate._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 805, 8)
    
    RelativePathTemplate = property(__RelativePathTemplate.value, __RelativePathTemplate.set, None, None)

    
    # Attribute AutoCleanup uses Python identifier AutoCleanup
    __AutoCleanup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AutoCleanup'), 'AutoCleanup', '__httpwww_stibosystems_comstep_AssetPushConfigurationType_AutoCleanup', pyxb.binding.datatypes.boolean)
    __AutoCleanup._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 806, 8)
    __AutoCleanup._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 806, 8)
    
    AutoCleanup = property(__AutoCleanup.value, __AutoCleanup.set, None, None)

    
    # Attribute EMail uses Python identifier EMail
    __EMail = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'EMail'), 'EMail', '__httpwww_stibosystems_comstep_AssetPushConfigurationType_EMail', pyxb.binding.datatypes.string)
    __EMail._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 807, 8)
    __EMail._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 807, 8)
    
    EMail = property(__EMail.value, __EMail.set, None, None)

    
    # Attribute ImageConversion uses Python identifier ImageConversion
    __ImageConversion = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ImageConversion'), 'ImageConversion', '__httpwww_stibosystems_comstep_AssetPushConfigurationType_ImageConversion', pyxb.binding.datatypes.string)
    __ImageConversion._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 808, 8)
    __ImageConversion._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 808, 8)
    
    ImageConversion = property(__ImageConversion.value, __ImageConversion.set, None, None)

    
    # Attribute ImageConversionType uses Python identifier ImageConversionType
    __ImageConversionType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ImageConversionType'), 'ImageConversionType', '__httpwww_stibosystems_comstep_AssetPushConfigurationType_ImageConversionType', pyxb.binding.datatypes.string)
    __ImageConversionType._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 809, 8)
    __ImageConversionType._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 809, 8)
    
    ImageConversionType = property(__ImageConversionType.value, __ImageConversionType.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __AssetPushMIMETypes.name() : __AssetPushMIMETypes,
        __AssetPushAttributes.name() : __AssetPushAttributes,
        __AssetPushClassifications.name() : __AssetPushClassifications,
        __AssetPushEventQueues.name() : __AssetPushEventQueues,
        __EventQueueLink.name() : __EventQueueLink
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __EventQueueID.name() : __EventQueueID,
        __AssetPushEventQueueID.name() : __AssetPushEventQueueID,
        __WorkspaceID.name() : __WorkspaceID,
        __RelativePathTemplate.name() : __RelativePathTemplate,
        __AutoCleanup.name() : __AutoCleanup,
        __EMail.name() : __EMail,
        __ImageConversion.name() : __ImageConversion,
        __ImageConversionType.name() : __ImageConversionType
    })
_module_typeBindings.AssetPushConfigurationType = AssetPushConfigurationType
Namespace.addCategoryObject('typeBinding', 'AssetPushConfigurationType', AssetPushConfigurationType)


# Complex type {http://www.stibosystems.com/step}AssetPushLocationType with content type MIXED
class AssetPushLocationType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}AssetPushLocationType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AssetPushLocationType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 851, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute Status uses Python identifier Status
    __Status = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Status'), 'Status', '__httpwww_stibosystems_comstep_AssetPushLocationType_Status', pyxb.binding.datatypes.string)
    __Status._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 852, 8)
    __Status._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 852, 8)
    
    Status = property(__Status.value, __Status.set, None, None)

    
    # Attribute ConfigurationID uses Python identifier ConfigurationID
    __ConfigurationID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ConfigurationID'), 'ConfigurationID', '__httpwww_stibosystems_comstep_AssetPushLocationType_ConfigurationID', _module_typeBindings.StepID, required=True)
    __ConfigurationID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 853, 8)
    __ConfigurationID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 853, 8)
    
    ConfigurationID = property(__ConfigurationID.value, __ConfigurationID.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_AssetPushLocationType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 854, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 854, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, '\n                    Identifies which context the asset was pushed from.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Status.name() : __Status,
        __ConfigurationID.name() : __ConfigurationID,
        __QualifierID.name() : __QualifierID
    })
_module_typeBindings.AssetPushLocationType = AssetPushLocationType
Namespace.addCategoryObject('typeBinding', 'AssetPushLocationType', AssetPushLocationType)


# Complex type {http://www.stibosystems.com/step}AssetsType with content type ELEMENT_ONLY
class AssetsType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for assets.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AssetsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 876, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Asset uses Python identifier Asset
    __Asset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Asset'), 'Asset', '__httpwww_stibosystems_comstep_AssetsType_httpwww_stibosystems_comstepAsset', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 883, 12), )

    
    Asset = property(__Asset.value, __Asset.set, None, None)

    
    # Attribute RejectNewAssets uses Python identifier RejectNewAssets
    __RejectNewAssets = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'RejectNewAssets'), 'RejectNewAssets', '__httpwww_stibosystems_comstep_AssetsType_RejectNewAssets', pyxb.binding.datatypes.boolean, unicode_default='false')
    __RejectNewAssets._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 885, 8)
    __RejectNewAssets._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 885, 8)
    
    RejectNewAssets = property(__RejectNewAssets.value, __RejectNewAssets.set, None, '\n                    Instruction that can be used during import to prevent the creation of new assets.\n                ')

    
    # Attribute DefaultParentID uses Python identifier DefaultParentID
    __DefaultParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DefaultParentID'), 'DefaultParentID', '__httpwww_stibosystems_comstep_AssetsType_DefaultParentID', _module_typeBindings.StepClassificationID)
    __DefaultParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 892, 8)
    __DefaultParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 892, 8)
    
    DefaultParentID = property(__DefaultParentID.value, __DefaultParentID.set, None, '\n                    Import instruction. The default parent classification for new assets that do not have an explicit\n                    classification reference.\n                ')

    
    # Attribute DefaultUserTypeID uses Python identifier DefaultUserTypeID
    __DefaultUserTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DefaultUserTypeID'), 'DefaultUserTypeID', '__httpwww_stibosystems_comstep_AssetsType_DefaultUserTypeID', _module_typeBindings.StepObjectTypeID)
    __DefaultUserTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 900, 8)
    __DefaultUserTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 900, 8)
    
    DefaultUserTypeID = property(__DefaultUserTypeID.value, __DefaultUserTypeID.set, None, '\n                    Import instruction. The default object type for new assets for which no object type is supplied.\n                ')

    _ElementMap.update({
        __Asset.name() : __Asset
    })
    _AttributeMap.update({
        __RejectNewAssets.name() : __RejectNewAssets,
        __DefaultParentID.name() : __DefaultParentID,
        __DefaultUserTypeID.name() : __DefaultUserTypeID
    })
_module_typeBindings.AssetsType = AssetsType
Namespace.addCategoryObject('typeBinding', 'AssetsType', AssetsType)


# Complex type {http://www.stibosystems.com/step}AttributeOriginType with content type EMPTY
class AttributeOriginType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}AttributeOriginType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AttributeOriginType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 908, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_AttributeOriginType_ID', pyxb.binding.datatypes.string)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 909, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 909, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute AttributeID uses Python identifier AttributeID
    __AttributeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AttributeID'), 'AttributeID', '__httpwww_stibosystems_comstep_AttributeOriginType_AttributeID', _module_typeBindings.StepAttributeID)
    __AttributeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 910, 8)
    __AttributeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 910, 8)
    
    AttributeID = property(__AttributeID.value, __AttributeID.set, None, None)

    
    # Attribute Pull uses Python identifier Pull
    __Pull = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Pull'), 'Pull', '__httpwww_stibosystems_comstep_AttributeOriginType_Pull', pyxb.binding.datatypes.string)
    __Pull._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 911, 8)
    __Pull._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 911, 8)
    
    Pull = property(__Pull.value, __Pull.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __AttributeID.name() : __AttributeID,
        __Pull.name() : __Pull
    })
_module_typeBindings.AttributeOriginType = AttributeOriginType
Namespace.addCategoryObject('typeBinding', 'AttributeOriginType', AttributeOriginType)


# Complex type {http://www.stibosystems.com/step}AttributeType with content type ELEMENT_ONLY
class AttributeType (pyxb.binding.basis.complexTypeDefinition):
    """
                This element represents an attribute in the system. The validation or ListOfValueLink restricts the
                valid values of this attribute. The dimension links is the dimension dependencies for values of this
                attribute. UserTypeLink and LinkType list the objects that are allowed to have values of this attribute.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AttributeType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 913, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_AttributeType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 922, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Validation uses Python identifier Validation
    __Validation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Validation'), 'Validation', '__httpwww_stibosystems_comstep_AttributeType_httpwww_stibosystems_comstepValidation', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 924, 16), )

    
    Validation = property(__Validation.value, __Validation.set, None, '\n                            Validation specification for non-LOV based attributes. During import, for existing\n                            attributes with values, the validation can be modified if the import is running in single\n                            update mode and no conflicting present values exist. Existing attributes can be changed to\n                            be LOV validated if the import is running in single update mode, the revisability settings\n                            (externally maintained or not) of attribute and LOV match and if the existing data fits the\n                            LOV validation. In this case existing values will be added to the LOV.\n                        ')

    
    # Element {http://www.stibosystems.com/step}ListOfValueLink uses Python identifier ListOfValueLink
    __ListOfValueLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ListOfValueLink'), 'ListOfValueLink', '__httpwww_stibosystems_comstep_AttributeType_httpwww_stibosystems_comstepListOfValueLink', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 936, 16), )

    
    ListOfValueLink = property(__ListOfValueLink.value, __ListOfValueLink.set, None, '\n                            List of values link for LOV-validated attributes. Existing attributes can be changed to not\n                            be LOV validated if the import is running in single update mode and the existing values\n                            match the defined (target) validation.\n                        ')

    
    # Element {http://www.stibosystems.com/step}ValueTemplate uses Python identifier ValueTemplate
    __ValueTemplate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValueTemplate'), 'ValueTemplate', '__httpwww_stibosystems_comstep_AttributeType_httpwww_stibosystems_comstepValueTemplate', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 947, 16), )

    
    ValueTemplate = property(__ValueTemplate.value, __ValueTemplate.set, None, None)

    
    # Element {http://www.stibosystems.com/step}UnitTemplate uses Python identifier UnitTemplate
    __UnitTemplate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UnitTemplate'), 'UnitTemplate', '__httpwww_stibosystems_comstep_AttributeType_httpwww_stibosystems_comstepUnitTemplate', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 948, 16), )

    
    UnitTemplate = property(__UnitTemplate.value, __UnitTemplate.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DimensionLink uses Python identifier DimensionLink
    __DimensionLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink'), 'DimensionLink', '__httpwww_stibosystems_comstep_AttributeType_httpwww_stibosystems_comstepDimensionLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 950, 12), )

    
    DimensionLink = property(__DimensionLink.value, __DimensionLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_AttributeType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 951, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeGroupLink uses Python identifier AttributeGroupLink
    __AttributeGroupLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), 'AttributeGroupLink', '__httpwww_stibosystems_comstep_AttributeType_httpwww_stibosystems_comstepAttributeGroupLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 952, 12), )

    
    AttributeGroupLink = property(__AttributeGroupLink.value, __AttributeGroupLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}UserTypeLink uses Python identifier UserTypeLink
    __UserTypeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink'), 'UserTypeLink', '__httpwww_stibosystems_comstep_AttributeType_httpwww_stibosystems_comstepUserTypeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 953, 12), )

    
    UserTypeLink = property(__UserTypeLink.value, __UserTypeLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}LinkType uses Python identifier LinkType
    __LinkType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LinkType'), 'LinkType', '__httpwww_stibosystems_comstep_AttributeType_httpwww_stibosystems_comstepLinkType', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 954, 12), )

    
    LinkType = property(__LinkType.value, __LinkType.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ValueFilter uses Python identifier ValueFilter
    __ValueFilter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValueFilter'), 'ValueFilter', '__httpwww_stibosystems_comstep_AttributeType_httpwww_stibosystems_comstepValueFilter', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 955, 12), )

    
    ValueFilter = property(__ValueFilter.value, __ValueFilter.set, None, '\n                        LOV value filter.\n                    ')

    
    # Element {http://www.stibosystems.com/step}CurrentTasks uses Python identifier CurrentTasks
    __CurrentTasks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CurrentTasks'), 'CurrentTasks', '__httpwww_stibosystems_comstep_AttributeType_httpwww_stibosystems_comstepCurrentTasks', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 962, 12), )

    
    CurrentTasks = property(__CurrentTasks.value, __CurrentTasks.set, None, None)

    
    # Attribute HierarchicalFiltering uses Python identifier HierarchicalFiltering
    __HierarchicalFiltering = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'HierarchicalFiltering'), 'HierarchicalFiltering', '__httpwww_stibosystems_comstep_AttributeType_HierarchicalFiltering', pyxb.binding.datatypes.boolean, unicode_default='false')
    __HierarchicalFiltering._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 964, 8)
    __HierarchicalFiltering._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 964, 8)
    
    HierarchicalFiltering = property(__HierarchicalFiltering.value, __HierarchicalFiltering.set, None, '\n                    Whether or not it is allowed to have LOV value filters on product to attribute links. Notice that if\n                    the value is changed from "true" to "false" for an existing attribute, exiting LOV filters on\n                    product to attribute links will be removed.\n                ')

    
    # Attribute ClassificationHierarchicalFiltering uses Python identifier ClassificationHierarchicalFiltering
    __ClassificationHierarchicalFiltering = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ClassificationHierarchicalFiltering'), 'ClassificationHierarchicalFiltering', '__httpwww_stibosystems_comstep_AttributeType_ClassificationHierarchicalFiltering', pyxb.binding.datatypes.boolean, unicode_default='false')
    __ClassificationHierarchicalFiltering._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 973, 8)
    __ClassificationHierarchicalFiltering._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 973, 8)
    
    ClassificationHierarchicalFiltering = property(__ClassificationHierarchicalFiltering.value, __ClassificationHierarchicalFiltering.set, None, '\n                    Whether or not it is allowed to have LOV value filters on classification to attribute links. Notice\n                    that if the value is changed from "true" to "false" for an existing attribute, exiting LOV filters\n                    on classification to attribute links will be removed.\n                ')

    
    # Attribute ExternallyMaintained uses Python identifier ExternallyMaintained
    __ExternallyMaintained = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ExternallyMaintained'), 'ExternallyMaintained', '__httpwww_stibosystems_comstep_AttributeType_ExternallyMaintained', pyxb.binding.datatypes.boolean, unicode_default='false')
    __ExternallyMaintained._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 982, 8)
    __ExternallyMaintained._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 982, 8)
    
    ExternallyMaintained = property(__ExternallyMaintained.value, __ExternallyMaintained.set, None, '\n                    Whether or not values of this attribute are externally maintained. If not externally maintained,\n                    full revision control of values of this attribute is available. During import, for existing\n                    attributes with values, the value can be changed from "true" to "false" if the import runs in single\n                    update mode but cannot be changed from "false" to "true".\n                ')

    
    # Attribute FullTextIndexed uses Python identifier FullTextIndexed
    __FullTextIndexed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'FullTextIndexed'), 'FullTextIndexed', '__httpwww_stibosystems_comstep_AttributeType_FullTextIndexed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __FullTextIndexed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 992, 8)
    __FullTextIndexed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 992, 8)
    
    FullTextIndexed = property(__FullTextIndexed.value, __FullTextIndexed.set, None, '\n                    Whether or not values of this attribute should be full text indexed. Can for existing attributes\n                    be changed during import if the import is running in single update mode.\n                ')

    
    # Attribute MultiValued uses Python identifier MultiValued
    __MultiValued = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MultiValued'), 'MultiValued', '__httpwww_stibosystems_comstep_AttributeType_MultiValued', pyxb.binding.datatypes.boolean, unicode_default='false')
    __MultiValued._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1000, 8)
    __MultiValued._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1000, 8)
    
    MultiValued = property(__MultiValued.value, __MultiValued.set, None, '\n                    Whether attribute is multi valued or not. Can for existing attributes be changed from "false" to\n                    "true". Changing from "true" to "false" requires that no present or past multivalued values exist.\n                ')

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_AttributeType_ID', _module_typeBindings.StepAttributeID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1008, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1008, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    The ID of the attribute object. Not required for creation if auto IDs are configured for attributes.\n                ')

    
    # Attribute DefaultUnitID uses Python identifier DefaultUnitID
    __DefaultUnitID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DefaultUnitID'), 'DefaultUnitID', '__httpwww_stibosystems_comstep_AttributeType_DefaultUnitID', _module_typeBindings.StepUnitID)
    __DefaultUnitID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1015, 8)
    __DefaultUnitID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1015, 8)
    
    DefaultUnitID = property(__DefaultUnitID.value, __DefaultUnitID.set, None, '\n                    The ID of the default unit for values of this attribute.\n                ')

    
    # Attribute ProductMode uses Python identifier ProductMode
    __ProductMode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ProductMode'), 'ProductMode', '__httpwww_stibosystems_comstep_AttributeType_ProductMode', _module_typeBindings.STD_ANON_3, unicode_default='Normal')
    __ProductMode._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1022, 8)
    __ProductMode._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1022, 8)
    
    ProductMode = property(__ProductMode.value, __ProductMode.set, None, '\n                    Whether this attribute is a specification attribute ("Normal") or a description attribute\n                    ("Property").\n                ')

    
    # Attribute Mandatory uses Python identifier Mandatory
    __Mandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Mandatory'), 'Mandatory', '__httpwww_stibosystems_comstep_AttributeType_Mandatory', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Mandatory._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1036, 8)
    __Mandatory._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1036, 8)
    
    Mandatory = property(__Mandatory.value, __Mandatory.set, None, '\n                    Specifies whether or not this attribute is mandatory for approval.\n                ')

    
    # Attribute Derived uses Python identifier Derived
    __Derived = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Derived'), 'Derived', '__httpwww_stibosystems_comstep_AttributeType_Derived', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Derived._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1043, 8)
    __Derived._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1043, 8)
    
    Derived = property(__Derived.value, __Derived.set, None, '\n                    Specifies whether or not this attribute is derived (calculated). Can for existing attributes, during\n                    import, be changed from "false" to "true" but not the other way.\n                ')

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_AttributeType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1051, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1051, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_AttributeType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1052, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1052, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute CryptographicKeyID uses Python identifier CryptographicKeyID
    __CryptographicKeyID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'CryptographicKeyID'), 'CryptographicKeyID', '__httpwww_stibosystems_comstep_AttributeType_CryptographicKeyID', _module_typeBindings.StepID)
    __CryptographicKeyID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1053, 8)
    __CryptographicKeyID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1053, 8)
    
    CryptographicKeyID = property(__CryptographicKeyID.value, __CryptographicKeyID.set, None, '\n                    The ID of the cryptographic key if the attribute is encrypted. Cannot be changed if the attribute\n                    has values.\n                ')

    
    # Attribute Completeness uses Python identifier Completeness
    __Completeness = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Completeness'), 'Completeness', '__httpwww_stibosystems_comstep_AttributeType_Completeness', pyxb.binding.datatypes.string)
    __Completeness._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1061, 8)
    __Completeness._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1061, 8)
    
    Completeness = property(__Completeness.value, __Completeness.set, None, '\n                    @Deprecated, not used anymore after the introduction of Completeness Metrics in STEP 7.4 (see\n                    documentation on Completeness Metrics and migration from old pre-7.4 completeness functionality).\n                ')

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_AttributeType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1069, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1069, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    
    # Attribute Deleted uses Python identifier Deleted
    __Deleted = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Deleted'), 'Deleted', '__httpwww_stibosystems_comstep_AttributeType_Deleted', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Deleted._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1070, 8)
    __Deleted._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1070, 8)
    
    Deleted = property(__Deleted.value, __Deleted.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __Validation.name() : __Validation,
        __ListOfValueLink.name() : __ListOfValueLink,
        __ValueTemplate.name() : __ValueTemplate,
        __UnitTemplate.name() : __UnitTemplate,
        __DimensionLink.name() : __DimensionLink,
        __MetaData.name() : __MetaData,
        __AttributeGroupLink.name() : __AttributeGroupLink,
        __UserTypeLink.name() : __UserTypeLink,
        __LinkType.name() : __LinkType,
        __ValueFilter.name() : __ValueFilter,
        __CurrentTasks.name() : __CurrentTasks
    })
    _AttributeMap.update({
        __HierarchicalFiltering.name() : __HierarchicalFiltering,
        __ClassificationHierarchicalFiltering.name() : __ClassificationHierarchicalFiltering,
        __ExternallyMaintained.name() : __ExternallyMaintained,
        __FullTextIndexed.name() : __FullTextIndexed,
        __MultiValued.name() : __MultiValued,
        __ID.name() : __ID,
        __DefaultUnitID.name() : __DefaultUnitID,
        __ProductMode.name() : __ProductMode,
        __Mandatory.name() : __Mandatory,
        __Derived.name() : __Derived,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __CryptographicKeyID.name() : __CryptographicKeyID,
        __Completeness.name() : __Completeness,
        __Changed.name() : __Changed,
        __Deleted.name() : __Deleted
    })
_module_typeBindings.AttributeType = AttributeType
Namespace.addCategoryObject('typeBinding', 'AttributeType', AttributeType)


# Complex type {http://www.stibosystems.com/step}ReferenceTypeType with content type EMPTY
class ReferenceTypeType (pyxb.binding.basis.complexTypeDefinition):
    """
                This element represents a reference type in the system.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReferenceTypeType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1072, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_ReferenceTypeType_ID', _module_typeBindings.StepLinkTypeID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1078, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1078, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    The ID of the reference type object. Not required for creation if auto IDs are configured for reference types.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ID.name() : __ID
    })
_module_typeBindings.ReferenceTypeType = ReferenceTypeType
Namespace.addCategoryObject('typeBinding', 'ReferenceTypeType', ReferenceTypeType)


# Complex type {http://www.stibosystems.com/step}AttributeTypeType with content type EMPTY
class AttributeTypeType (pyxb.binding.basis.complexTypeDefinition):
    """
                This element represents a attribute in the system.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AttributeTypeType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1086, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_AttributeTypeType_ID', _module_typeBindings.StepAttributeID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1092, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1092, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    The ID of the attribute object. Not required for creation if auto IDs are configured for attributes.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ID.name() : __ID
    })
_module_typeBindings.AttributeTypeType = AttributeTypeType
Namespace.addCategoryObject('typeBinding', 'AttributeTypeType', AttributeTypeType)


# Complex type {http://www.stibosystems.com/step}AttributeGroupType with content type ELEMENT_ONLY
class AttributeGroupType (pyxb.binding.basis.complexTypeDefinition):
    """
                An attribute group holding a number of attributes or attribute groups.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1111, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_AttributeGroupType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1118, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_AttributeGroupType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1119, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Configuration uses Python identifier Configuration
    __Configuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), 'Configuration', '__httpwww_stibosystems_comstep_AttributeGroupType_httpwww_stibosystems_comstepConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1120, 12), )

    
    Configuration = property(__Configuration.value, __Configuration.set, None, '\n                        View definition in encoded form.\n                    ')

    
    # Element {http://www.stibosystems.com/step}AttributeSequence uses Python identifier AttributeSequence
    __AttributeSequence = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeSequence'), 'AttributeSequence', '__httpwww_stibosystems_comstep_AttributeGroupType_httpwww_stibosystems_comstepAttributeSequence', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1127, 12), )

    
    AttributeSequence = property(__AttributeSequence.value, __AttributeSequence.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeGroup uses Python identifier AttributeGroup
    __AttributeGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroup'), 'AttributeGroup', '__httpwww_stibosystems_comstep_AttributeGroupType_httpwww_stibosystems_comstepAttributeGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1128, 12), )

    
    AttributeGroup = property(__AttributeGroup.value, __AttributeGroup.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_AttributeGroupType_ID', _module_typeBindings.StepAttributeID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1130, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1130, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    ID of the attribute group object. Not required for creation if auto IDs are configured for attribute\n                    groups.\n                ')

    
    # Attribute ParentID uses Python identifier ParentID
    __ParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ParentID'), 'ParentID', '__httpwww_stibosystems_comstep_AttributeGroupType_ParentID', _module_typeBindings.StepAttributeID)
    __ParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1138, 8)
    __ParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1138, 8)
    
    ParentID = property(__ParentID.value, __ParentID.set, None, '\n                    ID of the parent attribute group.\n                ')

    
    # Attribute ShowInWorkbench uses Python identifier ShowInWorkbench
    __ShowInWorkbench = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ShowInWorkbench'), 'ShowInWorkbench', '__httpwww_stibosystems_comstep_AttributeGroupType_ShowInWorkbench', pyxb.binding.datatypes.boolean, unicode_default='true')
    __ShowInWorkbench._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1145, 8)
    __ShowInWorkbench._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1145, 8)
    
    ShowInWorkbench = property(__ShowInWorkbench.value, __ShowInWorkbench.set, None, '\n                    True if this attribute group should be shown in the workbench when editing\n                    references and values. Defaults to true if not set (for example on upgraded databases).\n                ')

    
    # Attribute ExcludeFromProfiling uses Python identifier ExcludeFromProfiling
    __ExcludeFromProfiling = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ExcludeFromProfiling'), 'ExcludeFromProfiling', '__httpwww_stibosystems_comstep_AttributeGroupType_ExcludeFromProfiling', pyxb.binding.datatypes.boolean)
    __ExcludeFromProfiling._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1153, 8)
    __ExcludeFromProfiling._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1153, 8)
    
    ExcludeFromProfiling = property(__ExcludeFromProfiling.value, __ExcludeFromProfiling.set, None, '\n                    @Deprecated, not used anymore after the introduction of attribute group filtering in profile\n                    configurations.\n                ')

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_AttributeGroupType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1161, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1161, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute ManuallySorted uses Python identifier ManuallySorted
    __ManuallySorted = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ManuallySorted'), 'ManuallySorted', '__httpwww_stibosystems_comstep_AttributeGroupType_ManuallySorted', pyxb.binding.datatypes.boolean, unicode_default='false')
    __ManuallySorted._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1162, 8)
    __ManuallySorted._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1162, 8)
    
    ManuallySorted = property(__ManuallySorted.value, __ManuallySorted.set, None, '\n                    Specifies whether attributes in this group are manually sorted.\n                ')

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_AttributeGroupType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1169, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1169, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_AttributeGroupType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1170, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1170, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    
    # Attribute Deleted uses Python identifier Deleted
    __Deleted = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Deleted'), 'Deleted', '__httpwww_stibosystems_comstep_AttributeGroupType_Deleted', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Deleted._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1171, 8)
    __Deleted._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1171, 8)
    
    Deleted = property(__Deleted.value, __Deleted.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __Configuration.name() : __Configuration,
        __AttributeSequence.name() : __AttributeSequence,
        __AttributeGroup.name() : __AttributeGroup
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __ParentID.name() : __ParentID,
        __ShowInWorkbench.name() : __ShowInWorkbench,
        __ExcludeFromProfiling.name() : __ExcludeFromProfiling,
        __Referenced.name() : __Referenced,
        __ManuallySorted.name() : __ManuallySorted,
        __Selected.name() : __Selected,
        __Changed.name() : __Changed,
        __Deleted.name() : __Deleted
    })
_module_typeBindings.AttributeGroupType = AttributeGroupType
Namespace.addCategoryObject('typeBinding', 'AttributeGroupType', AttributeGroupType)


# Complex type {http://www.stibosystems.com/step}AttributeGroupLinkType with content type EMPTY
class AttributeGroupLinkType (pyxb.binding.basis.complexTypeDefinition):
    """
                A link from an attribute to an attribute group.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLinkType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1173, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute AttributeGroupID uses Python identifier AttributeGroupID
    __AttributeGroupID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AttributeGroupID'), 'AttributeGroupID', '__httpwww_stibosystems_comstep_AttributeGroupLinkType_AttributeGroupID', _module_typeBindings.StepAttributeID, required=True)
    __AttributeGroupID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1179, 8)
    __AttributeGroupID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1179, 8)
    
    AttributeGroupID = property(__AttributeGroupID.value, __AttributeGroupID.set, None, '\n                    The ID of the attribute group.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __AttributeGroupID.name() : __AttributeGroupID
    })
_module_typeBindings.AttributeGroupLinkType = AttributeGroupLinkType
Namespace.addCategoryObject('typeBinding', 'AttributeGroupLinkType', AttributeGroupLinkType)


# Complex type {http://www.stibosystems.com/step}AttributeLinkType with content type ELEMENT_ONLY
class AttributeLinkType (pyxb.binding.basis.complexTypeDefinition):
    """
                A link to an attribute. Notice that only links from products and classifications can have metadata and
                that only some type can be dimension dependent.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AttributeLinkType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1197, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_AttributeLinkType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1205, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ValueFilter uses Python identifier ValueFilter
    __ValueFilter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValueFilter'), 'ValueFilter', '__httpwww_stibosystems_comstep_AttributeLinkType_httpwww_stibosystems_comstepValueFilter', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1206, 12), )

    
    ValueFilter = property(__ValueFilter.value, __ValueFilter.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_AttributeLinkType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1208, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1208, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    
    # Attribute Inherited uses Python identifier Inherited
    __Inherited = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Inherited'), 'Inherited', '__httpwww_stibosystems_comstep_AttributeLinkType_Inherited', pyxb.binding.datatypes.integer)
    __Inherited._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1210, 8)
    __Inherited._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1210, 8)
    
    Inherited = property(__Inherited.value, __Inherited.set, None, '\n                    Only relevant during export when nested inside a product or classification. If present during import,\n                    the link is simply ignored. If this attribute is present then link is inherited. Will not\n                    be exported for local links (thus only numbers 1 and upward will be exported - 1 indicating\n                    inherited from immediate parent).\n                    The integer value of this attribute indicates how far up this link is inherited from.\n                    In cross context exports it might be relevant to have this number to find the most relevant link\n                    for a given context.\n                    NOTE: will only inherit inside hierarchy of same equal node types - ie. will not inherit from\n                    classification to product hierarchy.\n                ')

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_AttributeLinkType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1225, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1225, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, '\n                    Identifies which contexts this link is visible in. If not specified the current context is used.\n                ')

    
    # Attribute Mandatory uses Python identifier Mandatory
    __Mandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Mandatory'), 'Mandatory', '__httpwww_stibosystems_comstep_AttributeLinkType_Mandatory', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Mandatory._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1232, 8)
    __Mandatory._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1232, 8)
    
    Mandatory = property(__Mandatory.value, __Mandatory.set, None, '\n                    Specifies whether or not this attribute is mandatory for products or assets\n                    below this object. Must have on of the following values: true or false.\n                ')

    
    # Attribute AttributeID uses Python identifier AttributeID
    __AttributeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AttributeID'), 'AttributeID', '__httpwww_stibosystems_comstep_AttributeLinkType_AttributeID', _module_typeBindings.StepAttributeID, required=True)
    __AttributeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1240, 8)
    __AttributeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1240, 8)
    
    AttributeID = property(__AttributeID.value, __AttributeID.set, None, '\n                    The ID of the attribute.\n                ')

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_AttributeLinkType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1247, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1247, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    _ElementMap.update({
        __MetaData.name() : __MetaData,
        __ValueFilter.name() : __ValueFilter
    })
    _AttributeMap.update({
        __Changed.name() : __Changed,
        __Inherited.name() : __Inherited,
        __QualifierID.name() : __QualifierID,
        __Mandatory.name() : __Mandatory,
        __AttributeID.name() : __AttributeID,
        __Referenced.name() : __Referenced
    })
_module_typeBindings.AttributeLinkType = AttributeLinkType
Namespace.addCategoryObject('typeBinding', 'AttributeLinkType', AttributeLinkType)


# Complex type {http://www.stibosystems.com/step}AttributeValidationType with content type EMPTY
class AttributeValidationType (pyxb.binding.basis.complexTypeDefinition):
    """
                The AttributeValidationType is used for describing a validity relation to an attribute.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AttributeValidationType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1249, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute AttributeID uses Python identifier AttributeID
    __AttributeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AttributeID'), 'AttributeID', '__httpwww_stibosystems_comstep_AttributeValidationType_AttributeID', _module_typeBindings.StepAttributeID, required=True)
    __AttributeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1255, 8)
    __AttributeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1255, 8)
    
    AttributeID = property(__AttributeID.value, __AttributeID.set, None, '\n                    The ID of the attribute.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __AttributeID.name() : __AttributeID
    })
_module_typeBindings.AttributeValidationType = AttributeValidationType
Namespace.addCategoryObject('typeBinding', 'AttributeValidationType', AttributeValidationType)


# Complex type {http://www.stibosystems.com/step}AttributeTransformationType with content type ELEMENT_ONLY
class AttributeTransformationType (pyxb.binding.basis.complexTypeDefinition):
    """
                An attribute transformation is an object where a transformation of an attribute value can be specified.
                The transformation can then be linked to attributes. Transformations can be used in tables or the output
                system (currently only indesign).
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AttributeTransformationType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1273, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_AttributeTransformationType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1282, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}UserTypeLink uses Python identifier UserTypeLink
    __UserTypeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink'), 'UserTypeLink', '__httpwww_stibosystems_comstep_AttributeTransformationType_httpwww_stibosystems_comstepUserTypeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1283, 12), )

    
    UserTypeLink = property(__UserTypeLink.value, __UserTypeLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeGroupLink uses Python identifier AttributeGroupLink
    __AttributeGroupLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), 'AttributeGroupLink', '__httpwww_stibosystems_comstep_AttributeTransformationType_httpwww_stibosystems_comstepAttributeGroupLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1284, 12), )

    
    AttributeGroupLink = property(__AttributeGroupLink.value, __AttributeGroupLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeLink uses Python identifier AttributeLink
    __AttributeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink'), 'AttributeLink', '__httpwww_stibosystems_comstep_AttributeTransformationType_httpwww_stibosystems_comstepAttributeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1285, 12), )

    
    AttributeLink = property(__AttributeLink.value, __AttributeLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Configuration uses Python identifier Configuration
    __Configuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), 'Configuration', '__httpwww_stibosystems_comstep_AttributeTransformationType_httpwww_stibosystems_comstepConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1286, 12), )

    
    Configuration = property(__Configuration.value, __Configuration.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_AttributeTransformationType_ID', _module_typeBindings.StepAttributeID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1288, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1288, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    The ID of the attribute transformation.\n                ')

    
    # Attribute ParentID uses Python identifier ParentID
    __ParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ParentID'), 'ParentID', '__httpwww_stibosystems_comstep_AttributeTransformationType_ParentID', _module_typeBindings.StepID)
    __ParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1295, 8)
    __ParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1295, 8)
    
    ParentID = property(__ParentID.value, __ParentID.set, None, '\n                    ID of the parent group. When creating new group during import either ParentID or parent node is\n                    required.\n                ')

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_AttributeTransformationType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1303, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1303, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_AttributeTransformationType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1304, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1304, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_AttributeTransformationType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1305, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1305, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __UserTypeLink.name() : __UserTypeLink,
        __AttributeGroupLink.name() : __AttributeGroupLink,
        __AttributeLink.name() : __AttributeLink,
        __Configuration.name() : __Configuration
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __ParentID.name() : __ParentID,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed
    })
_module_typeBindings.AttributeTransformationType = AttributeTransformationType
Namespace.addCategoryObject('typeBinding', 'AttributeTransformationType', AttributeTransformationType)


# Complex type {http://www.stibosystems.com/step}AttributeTransformationGroupType with content type ELEMENT_ONLY
class AttributeTransformationGroupType (pyxb.binding.basis.complexTypeDefinition):
    """
                A grouping of several attribute transformations and / or other attribute transformation groups.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AttributeTransformationGroupType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1307, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_AttributeTransformationGroupType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1314, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeTransformationGroup uses Python identifier AttributeTransformationGroup
    __AttributeTransformationGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeTransformationGroup'), 'AttributeTransformationGroup', '__httpwww_stibosystems_comstep_AttributeTransformationGroupType_httpwww_stibosystems_comstepAttributeTransformationGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1315, 12), )

    
    AttributeTransformationGroup = property(__AttributeTransformationGroup.value, __AttributeTransformationGroup.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeTransformation uses Python identifier AttributeTransformation
    __AttributeTransformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeTransformation'), 'AttributeTransformation', '__httpwww_stibosystems_comstep_AttributeTransformationGroupType_httpwww_stibosystems_comstepAttributeTransformation', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1317, 12), )

    
    AttributeTransformation = property(__AttributeTransformation.value, __AttributeTransformation.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_AttributeTransformationGroupType_ID', _module_typeBindings.StepAttributeID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1320, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1320, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute ParentID uses Python identifier ParentID
    __ParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ParentID'), 'ParentID', '__httpwww_stibosystems_comstep_AttributeTransformationGroupType_ParentID', _module_typeBindings.StepID)
    __ParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1321, 8)
    __ParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1321, 8)
    
    ParentID = property(__ParentID.value, __ParentID.set, None, '\n                    ID of the parent group. When creating new group during import either ParentID or parent node is\n                    required.\n                ')

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_AttributeTransformationGroupType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1329, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1329, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_AttributeTransformationGroupType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1330, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1330, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_AttributeTransformationGroupType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1331, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1331, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __AttributeTransformationGroup.name() : __AttributeTransformationGroup,
        __AttributeTransformation.name() : __AttributeTransformation
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __ParentID.name() : __ParentID,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed
    })
_module_typeBindings.AttributeTransformationGroupType = AttributeTransformationGroupType
Namespace.addCategoryObject('typeBinding', 'AttributeTransformationGroupType', AttributeTransformationGroupType)


# Complex type {http://www.stibosystems.com/step}AutoPageAssetLinkType with content type ELEMENT_ONLY
class AutoPageAssetLinkType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}AutoPageAssetLinkType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AutoPageAssetLinkType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1344, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_AutoPageAssetLinkType_httpwww_stibosystems_comstepKeyValue', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1346, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Attribute AssetID uses Python identifier AssetID
    __AssetID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AssetID'), 'AssetID', '__httpwww_stibosystems_comstep_AutoPageAssetLinkType_AssetID', _module_typeBindings.StepAssetID, required=True)
    __AssetID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1348, 8)
    __AssetID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1348, 8)
    
    AssetID = property(__AssetID.value, __AssetID.set, None, None)

    _ElementMap.update({
        __KeyValue.name() : __KeyValue
    })
    _AttributeMap.update({
        __AssetID.name() : __AssetID
    })
_module_typeBindings.AutoPageAssetLinkType = AutoPageAssetLinkType
Namespace.addCategoryObject('typeBinding', 'AutoPageAssetLinkType', AutoPageAssetLinkType)


# Complex type {http://www.stibosystems.com/step}AutoPageClassificationLinkType with content type ELEMENT_ONLY
class AutoPageClassificationLinkType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}AutoPageClassificationLinkType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AutoPageClassificationLinkType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1350, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_AutoPageClassificationLinkType_httpwww_stibosystems_comstepKeyValue', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1352, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Attribute ClassificationID uses Python identifier ClassificationID
    __ClassificationID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ClassificationID'), 'ClassificationID', '__httpwww_stibosystems_comstep_AutoPageClassificationLinkType_ClassificationID', _module_typeBindings.StepClassificationID, required=True)
    __ClassificationID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1354, 8)
    __ClassificationID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1354, 8)
    
    ClassificationID = property(__ClassificationID.value, __ClassificationID.set, None, None)

    _ElementMap.update({
        __KeyValue.name() : __KeyValue
    })
    _AttributeMap.update({
        __ClassificationID.name() : __ClassificationID
    })
_module_typeBindings.AutoPageClassificationLinkType = AutoPageClassificationLinkType
Namespace.addCategoryObject('typeBinding', 'AutoPageClassificationLinkType', AutoPageClassificationLinkType)


# Complex type {http://www.stibosystems.com/step}AutoPageProductLinkType with content type ELEMENT_ONLY
class AutoPageProductLinkType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}AutoPageProductLinkType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AutoPageProductLinkType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1356, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_AutoPageProductLinkType_httpwww_stibosystems_comstepKeyValue', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1358, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Attribute ProductID uses Python identifier ProductID
    __ProductID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ProductID'), 'ProductID', '__httpwww_stibosystems_comstep_AutoPageProductLinkType_ProductID', _module_typeBindings.StepProductID, required=True)
    __ProductID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1360, 8)
    __ProductID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1360, 8)
    
    ProductID = property(__ProductID.value, __ProductID.set, None, None)

    _ElementMap.update({
        __KeyValue.name() : __KeyValue
    })
    _AttributeMap.update({
        __ProductID.name() : __ProductID
    })
_module_typeBindings.AutoPageProductLinkType = AutoPageProductLinkType
Namespace.addCategoryObject('typeBinding', 'AutoPageProductLinkType', AutoPageProductLinkType)


# Complex type {http://www.stibosystems.com/step}BusinessFunctionDependencyType with content type EMPTY
class BusinessFunctionDependencyType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a dependency to a business function.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BusinessFunctionDependencyType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1414, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute FunctionID uses Python identifier FunctionID
    __FunctionID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'FunctionID'), 'FunctionID', '__httpwww_stibosystems_comstep_BusinessFunctionDependencyType_FunctionID', _module_typeBindings.StepBusinessRuleID, required=True)
    __FunctionID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1420, 8)
    __FunctionID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1420, 8)
    
    FunctionID = property(__FunctionID.value, __FunctionID.set, None, '\n                    The ID of the business function.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __FunctionID.name() : __FunctionID
    })
_module_typeBindings.BusinessFunctionDependencyType = BusinessFunctionDependencyType
Namespace.addCategoryObject('typeBinding', 'BusinessFunctionDependencyType', BusinessFunctionDependencyType)


# Complex type {http://www.stibosystems.com/step}BusinessRuleDependencyType with content type EMPTY
class BusinessRuleDependencyType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a dependency to a business library.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BusinessRuleDependencyType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1438, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute LibraryID uses Python identifier LibraryID
    __LibraryID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LibraryID'), 'LibraryID', '__httpwww_stibosystems_comstep_BusinessRuleDependencyType_LibraryID', _module_typeBindings.StepBusinessRuleID, required=True)
    __LibraryID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1444, 8)
    __LibraryID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1444, 8)
    
    LibraryID = property(__LibraryID.value, __LibraryID.set, None, '\n                    The ID of the business library.\n                ')

    
    # Attribute LibraryAlias uses Python identifier LibraryAlias
    __LibraryAlias = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LibraryAlias'), 'LibraryAlias', '__httpwww_stibosystems_comstep_BusinessRuleDependencyType_LibraryAlias', pyxb.binding.datatypes.string, required=True)
    __LibraryAlias._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1451, 8)
    __LibraryAlias._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1451, 8)
    
    LibraryAlias = property(__LibraryAlias.value, __LibraryAlias.set, None, '\n                    The alias name of the library when used in this context.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __LibraryID.name() : __LibraryID,
        __LibraryAlias.name() : __LibraryAlias
    })
_module_typeBindings.BusinessRuleDependencyType = BusinessRuleDependencyType
Namespace.addCategoryObject('typeBinding', 'BusinessRuleDependencyType', BusinessRuleDependencyType)


# Complex type {http://www.stibosystems.com/step}BusinessRuleLinkType with content type EMPTY
class BusinessRuleLinkType (pyxb.binding.basis.complexTypeDefinition):
    """
                A link to a business rule.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BusinessRuleLinkType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1466, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_BusinessRuleLinkType_ID', _module_typeBindings.StepBusinessRuleID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1472, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1472, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    The ID of the business rule.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ID.name() : __ID
    })
_module_typeBindings.BusinessRuleLinkType = BusinessRuleLinkType
Namespace.addCategoryObject('typeBinding', 'BusinessRuleLinkType', BusinessRuleLinkType)


# Complex type {http://www.stibosystems.com/step}BusinessRuleType with content type ELEMENT_ONLY
class BusinessRuleType (pyxb.binding.basis.complexTypeDefinition):
    """
                A business rule in STEP. Can represent an action, a condition, a function or a library.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BusinessRuleType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1490, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}SetupGroupLink uses Python identifier SetupGroupLink
    __SetupGroupLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink'), 'SetupGroupLink', '__httpwww_stibosystems_comstep_BusinessRuleType_httpwww_stibosystems_comstepSetupGroupLink', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1497, 12), )

    
    SetupGroupLink = property(__SetupGroupLink.value, __SetupGroupLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_BusinessRuleType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1498, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Description'), 'Description', '__httpwww_stibosystems_comstep_BusinessRuleType_httpwww_stibosystems_comstepDescription', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1499, 12), )

    
    Description = property(__Description.value, __Description.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Dependency uses Python identifier Dependency
    __Dependency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Dependency'), 'Dependency', '__httpwww_stibosystems_comstep_BusinessRuleType_httpwww_stibosystems_comstepDependency', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1500, 12), )

    
    Dependency = property(__Dependency.value, __Dependency.set, None, None)

    
    # Element {http://www.stibosystems.com/step}FunctionDependency uses Python identifier FunctionDependency
    __FunctionDependency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FunctionDependency'), 'FunctionDependency', '__httpwww_stibosystems_comstep_BusinessRuleType_httpwww_stibosystems_comstepFunctionDependency', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1501, 12), )

    
    FunctionDependency = property(__FunctionDependency.value, __FunctionDependency.set, None, None)

    
    # Element {http://www.stibosystems.com/step}OnApprove uses Python identifier OnApprove
    __OnApprove = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OnApprove'), 'OnApprove', '__httpwww_stibosystems_comstep_BusinessRuleType_httpwww_stibosystems_comstepOnApprove', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1502, 12), )

    
    OnApprove = property(__OnApprove.value, __OnApprove.set, None, '\n                        Ignored for business rules of type library.\n                    ')

    
    # Element {http://www.stibosystems.com/step}Configuration uses Python identifier Configuration
    __Configuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), 'Configuration', '__httpwww_stibosystems_comstep_BusinessRuleType_httpwww_stibosystems_comstepConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1509, 12), )

    
    Configuration = property(__Configuration.value, __Configuration.set, None, '\n                        The configuration in encoded form.\n                    ')

    
    # Element {http://www.stibosystems.com/step}ValidObjectTypes uses Python identifier ValidObjectTypes
    __ValidObjectTypes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValidObjectTypes'), 'ValidObjectTypes', '__httpwww_stibosystems_comstep_BusinessRuleType_httpwww_stibosystems_comstepValidObjectTypes', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1516, 12), )

    
    ValidObjectTypes = property(__ValidObjectTypes.value, __ValidObjectTypes.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_BusinessRuleType_ID', _module_typeBindings.StepBusinessRuleID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1518, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1518, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    The ID of the business rule.\n                ')

    
    # Attribute Scope uses Python identifier Scope
    __Scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Scope'), 'Scope', '__httpwww_stibosystems_comstep_BusinessRuleType_Scope', _module_typeBindings.STD_ANON_4)
    __Scope._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1525, 8)
    __Scope._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1525, 8)
    
    Scope = property(__Scope.value, __Scope.set, None, '\n                    The scope of the business rule. Always "Global". Only applies for actions and conditions.\n                ')

    
    # Attribute RunPrivileged uses Python identifier RunPrivileged
    __RunPrivileged = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'RunPrivileged'), 'RunPrivileged', '__httpwww_stibosystems_comstep_BusinessRuleType_RunPrivileged', pyxb.binding.datatypes.boolean, unicode_default='false')
    __RunPrivileged._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1538, 8)
    __RunPrivileged._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1538, 8)
    
    RunPrivileged = property(__RunPrivileged.value, __RunPrivileged.set, None, '\n                    Run privileged - without privilege check. Ignored for business rules of type library.\n                ')

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_BusinessRuleType_Type', _module_typeBindings.STD_ANON_5, required=True)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1545, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1545, 8)
    
    Type = property(__Type.value, __Type.set, None, '\n                    The type of the Business Rule.\n                ')

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_BusinessRuleType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1560, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1560, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_BusinessRuleType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1561, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1561, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_BusinessRuleType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1562, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1562, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __SetupGroupLink.name() : __SetupGroupLink,
        __Name.name() : __Name,
        __Description.name() : __Description,
        __Dependency.name() : __Dependency,
        __FunctionDependency.name() : __FunctionDependency,
        __OnApprove.name() : __OnApprove,
        __Configuration.name() : __Configuration,
        __ValidObjectTypes.name() : __ValidObjectTypes
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __Scope.name() : __Scope,
        __RunPrivileged.name() : __RunPrivileged,
        __Type.name() : __Type,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed
    })
_module_typeBindings.BusinessRuleType = BusinessRuleType
Namespace.addCategoryObject('typeBinding', 'BusinessRuleType', BusinessRuleType)


# Complex type {http://www.stibosystems.com/step}CellType with content type ELEMENT_ONLY
class CellType (pyxb.binding.basis.complexTypeDefinition):
    """
                Element that holds table cell definition. Notice: Because of backward compatibility, we do unfortunately
                not follow the normal first character uppercase convention for attributeID.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CellType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1579, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}ProductOrigin uses Python identifier ProductOrigin
    __ProductOrigin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ProductOrigin'), 'ProductOrigin', '__httpwww_stibosystems_comstep_CellType_httpwww_stibosystems_comstepProductOrigin', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1587, 12), )

    
    ProductOrigin = property(__ProductOrigin.value, __ProductOrigin.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ClassificationOrigin uses Python identifier ClassificationOrigin
    __ClassificationOrigin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClassificationOrigin'), 'ClassificationOrigin', '__httpwww_stibosystems_comstep_CellType_httpwww_stibosystems_comstepClassificationOrigin', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1588, 12), )

    
    ClassificationOrigin = property(__ClassificationOrigin.value, __ClassificationOrigin.set, None, None)

    
    # Element {http://www.stibosystems.com/step}EntityOrigin uses Python identifier EntityOrigin
    __EntityOrigin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EntityOrigin'), 'EntityOrigin', '__httpwww_stibosystems_comstep_CellType_httpwww_stibosystems_comstepEntityOrigin', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1590, 12), )

    
    EntityOrigin = property(__EntityOrigin.value, __EntityOrigin.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AssetOrigin uses Python identifier AssetOrigin
    __AssetOrigin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssetOrigin'), 'AssetOrigin', '__httpwww_stibosystems_comstep_CellType_httpwww_stibosystems_comstepAssetOrigin', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1591, 12), )

    
    AssetOrigin = property(__AssetOrigin.value, __AssetOrigin.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeOrigin uses Python identifier AttributeOrigin
    __AttributeOrigin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeOrigin'), 'AttributeOrigin', '__httpwww_stibosystems_comstep_CellType_httpwww_stibosystems_comstepAttributeOrigin', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1592, 12), )

    
    AttributeOrigin = property(__AttributeOrigin.value, __AttributeOrigin.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Text uses Python identifier Text
    __Text = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Text'), 'Text', '__httpwww_stibosystems_comstep_CellType_httpwww_stibosystems_comstepText', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1593, 12), )

    
    Text = property(__Text.value, __Text.set, None, None)

    
    # Attribute ProcessFlag uses Python identifier ProcessFlag
    __ProcessFlag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ProcessFlag'), 'ProcessFlag', '__httpwww_stibosystems_comstep_CellType_ProcessFlag', pyxb.binding.datatypes.string)
    __ProcessFlag._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1595, 8)
    __ProcessFlag._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1595, 8)
    
    ProcessFlag = property(__ProcessFlag.value, __ProcessFlag.set, None, None)

    
    # Attribute VerticalSpan uses Python identifier VerticalSpan
    __VerticalSpan = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'VerticalSpan'), 'VerticalSpan', '__httpwww_stibosystems_comstep_CellType_VerticalSpan', pyxb.binding.datatypes.string)
    __VerticalSpan._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1596, 8)
    __VerticalSpan._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1596, 8)
    
    VerticalSpan = property(__VerticalSpan.value, __VerticalSpan.set, None, None)

    
    # Attribute HorizontalSpan uses Python identifier HorizontalSpan
    __HorizontalSpan = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'HorizontalSpan'), 'HorizontalSpan', '__httpwww_stibosystems_comstep_CellType_HorizontalSpan', pyxb.binding.datatypes.string)
    __HorizontalSpan._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1597, 8)
    __HorizontalSpan._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1597, 8)
    
    HorizontalSpan = property(__HorizontalSpan.value, __HorizontalSpan.set, None, None)

    
    # Attribute Column uses Python identifier Column
    __Column = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Column'), 'Column', '__httpwww_stibosystems_comstep_CellType_Column', pyxb.binding.datatypes.string)
    __Column._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1598, 8)
    __Column._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1598, 8)
    
    Column = property(__Column.value, __Column.set, None, None)

    
    # Attribute RuleAbove uses Python identifier RuleAbove
    __RuleAbove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'RuleAbove'), 'RuleAbove', '__httpwww_stibosystems_comstep_CellType_RuleAbove', pyxb.binding.datatypes.string)
    __RuleAbove._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1599, 8)
    __RuleAbove._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1599, 8)
    
    RuleAbove = property(__RuleAbove.value, __RuleAbove.set, None, None)

    
    # Attribute BackgroundColor uses Python identifier BackgroundColor
    __BackgroundColor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'BackgroundColor'), 'BackgroundColor', '__httpwww_stibosystems_comstep_CellType_BackgroundColor', pyxb.binding.datatypes.string)
    __BackgroundColor._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1600, 8)
    __BackgroundColor._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1600, 8)
    
    BackgroundColor = property(__BackgroundColor.value, __BackgroundColor.set, None, None)

    
    # Attribute RuleBelow uses Python identifier RuleBelow
    __RuleBelow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'RuleBelow'), 'RuleBelow', '__httpwww_stibosystems_comstep_CellType_RuleBelow', pyxb.binding.datatypes.string)
    __RuleBelow._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1601, 8)
    __RuleBelow._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1601, 8)
    
    RuleBelow = property(__RuleBelow.value, __RuleBelow.set, None, None)

    
    # Attribute RuleRight uses Python identifier RuleRight
    __RuleRight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'RuleRight'), 'RuleRight', '__httpwww_stibosystems_comstep_CellType_RuleRight', pyxb.binding.datatypes.string)
    __RuleRight._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1602, 8)
    __RuleRight._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1602, 8)
    
    RuleRight = property(__RuleRight.value, __RuleRight.set, None, None)

    
    # Attribute CellRotation uses Python identifier CellRotation
    __CellRotation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'CellRotation'), 'CellRotation', '__httpwww_stibosystems_comstep_CellType_CellRotation', pyxb.binding.datatypes.string)
    __CellRotation._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1603, 8)
    __CellRotation._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1603, 8)
    
    CellRotation = property(__CellRotation.value, __CellRotation.set, None, None)

    
    # Attribute RuleLeft uses Python identifier RuleLeft
    __RuleLeft = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'RuleLeft'), 'RuleLeft', '__httpwww_stibosystems_comstep_CellType_RuleLeft', pyxb.binding.datatypes.string)
    __RuleLeft._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1604, 8)
    __RuleLeft._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1604, 8)
    
    RuleLeft = property(__RuleLeft.value, __RuleLeft.set, None, None)

    
    # Attribute TextStyle uses Python identifier TextStyle
    __TextStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TextStyle'), 'TextStyle', '__httpwww_stibosystems_comstep_CellType_TextStyle', pyxb.binding.datatypes.string)
    __TextStyle._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1605, 8)
    __TextStyle._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1605, 8)
    
    TextStyle = property(__TextStyle.value, __TextStyle.set, None, None)

    
    # Attribute VerticalAlignment uses Python identifier VerticalAlignment
    __VerticalAlignment = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'VerticalAlignment'), 'VerticalAlignment', '__httpwww_stibosystems_comstep_CellType_VerticalAlignment', pyxb.binding.datatypes.string)
    __VerticalAlignment._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1606, 8)
    __VerticalAlignment._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1606, 8)
    
    VerticalAlignment = property(__VerticalAlignment.value, __VerticalAlignment.set, None, None)

    
    # Attribute CellVerticalStoryDirection uses Python identifier CellVerticalStoryDirection
    __CellVerticalStoryDirection = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'CellVerticalStoryDirection'), 'CellVerticalStoryDirection', '__httpwww_stibosystems_comstep_CellType_CellVerticalStoryDirection', pyxb.binding.datatypes.string)
    __CellVerticalStoryDirection._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1607, 8)
    __CellVerticalStoryDirection._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1607, 8)
    
    CellVerticalStoryDirection = property(__CellVerticalStoryDirection.value, __CellVerticalStoryDirection.set, None, None)

    
    # Attribute CellImageScale uses Python identifier CellImageScale
    __CellImageScale = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'CellImageScale'), 'CellImageScale', '__httpwww_stibosystems_comstep_CellType_CellImageScale', pyxb.binding.datatypes.string)
    __CellImageScale._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1608, 8)
    __CellImageScale._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1608, 8)
    
    CellImageScale = property(__CellImageScale.value, __CellImageScale.set, None, None)

    
    # Attribute attributeID uses Python identifier attributeID
    __attributeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'attributeID'), 'attributeID', '__httpwww_stibosystems_comstep_CellType_attributeID', _module_typeBindings.StepAttributeID)
    __attributeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1609, 8)
    __attributeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1609, 8)
    
    attributeID = property(__attributeID.value, __attributeID.set, None, None)

    _ElementMap.update({
        __ProductOrigin.name() : __ProductOrigin,
        __ClassificationOrigin.name() : __ClassificationOrigin,
        __EntityOrigin.name() : __EntityOrigin,
        __AssetOrigin.name() : __AssetOrigin,
        __AttributeOrigin.name() : __AttributeOrigin,
        __Text.name() : __Text
    })
    _AttributeMap.update({
        __ProcessFlag.name() : __ProcessFlag,
        __VerticalSpan.name() : __VerticalSpan,
        __HorizontalSpan.name() : __HorizontalSpan,
        __Column.name() : __Column,
        __RuleAbove.name() : __RuleAbove,
        __BackgroundColor.name() : __BackgroundColor,
        __RuleBelow.name() : __RuleBelow,
        __RuleRight.name() : __RuleRight,
        __CellRotation.name() : __CellRotation,
        __RuleLeft.name() : __RuleLeft,
        __TextStyle.name() : __TextStyle,
        __VerticalAlignment.name() : __VerticalAlignment,
        __CellVerticalStoryDirection.name() : __CellVerticalStoryDirection,
        __CellImageScale.name() : __CellImageScale,
        __attributeID.name() : __attributeID
    })
_module_typeBindings.CellType = CellType
Namespace.addCategoryObject('typeBinding', 'CellType', CellType)


# Complex type {http://www.stibosystems.com/step}CharacterTagType with content type ELEMENT_ONLY
class CharacterTagType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a character tag.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CharacterTagType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1670, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Configuration uses Python identifier Configuration
    __Configuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), 'Configuration', '__httpwww_stibosystems_comstep_CharacterTagType_httpwww_stibosystems_comstepConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1677, 12), )

    
    Configuration = property(__Configuration.value, __Configuration.set, None, '\n                        How tag content should be styled in STEP GUI.\n                    ')

    
    # Element {http://www.stibosystems.com/step}Formatting uses Python identifier Formatting
    __Formatting = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Formatting'), 'Formatting', '__httpwww_stibosystems_comstep_CharacterTagType_httpwww_stibosystems_comstepFormatting', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1684, 12), )

    
    Formatting = property(__Formatting.value, __Formatting.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_CharacterTagType_ID', _module_typeBindings.TagID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1686, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1686, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    ID of tag - in STEP GUI presented as Name of tag. Must be unique across all tag types.\n                ')

    
    # Attribute Tag uses Python identifier Tag
    __Tag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Tag'), 'Tag', '__httpwww_stibosystems_comstep_CharacterTagType_Tag', pyxb.binding.datatypes.string, required=True)
    __Tag._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1693, 8)
    __Tag._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1693, 8)
    
    Tag = property(__Tag.value, __Tag.set, None, '\n                    Tag name. Must be unique across all tag types.\n                ')

    
    # Attribute GuiRendering uses Python identifier GuiRendering
    __GuiRendering = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'GuiRendering'), 'GuiRendering', '__httpwww_stibosystems_comstep_CharacterTagType_GuiRendering', pyxb.binding.datatypes.string)
    __GuiRendering._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1700, 8)
    __GuiRendering._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1700, 8)
    
    GuiRendering = property(__GuiRendering.value, __GuiRendering.set, None, '\n                    String displayed in STEP GUI for tag.\n                ')

    
    # Attribute ParentID uses Python identifier ParentID
    __ParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ParentID'), 'ParentID', '__httpwww_stibosystems_comstep_CharacterTagType_ParentID', _module_typeBindings.StepTagGroupID)
    __ParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1707, 8)
    __ParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1707, 8)
    
    ParentID = property(__ParentID.value, __ParentID.set, None, '\n                    ID of the parent tag group. If not supplied and tag not already exists it will be created at top\n                    level.\n                ')

    _ElementMap.update({
        __Configuration.name() : __Configuration,
        __Formatting.name() : __Formatting
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __Tag.name() : __Tag,
        __GuiRendering.name() : __GuiRendering,
        __ParentID.name() : __ParentID
    })
_module_typeBindings.CharacterTagType = CharacterTagType
Namespace.addCategoryObject('typeBinding', 'CharacterTagType', CharacterTagType)


# Complex type {http://www.stibosystems.com/step}ClassificationType with content type ELEMENT_ONLY
class ClassificationType (pyxb.binding.basis.complexTypeDefinition):
    """
                Describes a classification in STEP. The Classification element lists its names, linked attributes, sub
                classifications, references, metadata on classification and assets linked into this classification.
                Note that products appear in their own hierarchy below the Products element and that assets by default
                also are represented below the Assets element.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ClassificationType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1716, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1726, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ParentKeyValue uses Python identifier ParentKeyValue
    __ParentKeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ParentKeyValue'), 'ParentKeyValue', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepParentKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1727, 12), )

    
    ParentKeyValue = property(__ParentKeyValue.value, __ParentKeyValue.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1729, 16), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SequenceProduct uses Python identifier SequenceProduct
    __SequenceProduct = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SequenceProduct'), 'SequenceProduct', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepSequenceProduct', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1730, 16), )

    
    SequenceProduct = property(__SequenceProduct.value, __SequenceProduct.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Classification uses Python identifier Classification
    __Classification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Classification'), 'Classification', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepClassification', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1731, 16), )

    
    Classification = property(__Classification.value, __Classification.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteSuppressedProductReference uses Python identifier DeleteSuppressedProductReference
    __DeleteSuppressedProductReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedProductReference'), 'DeleteSuppressedProductReference', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepDeleteSuppressedProductReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1733, 20), )

    
    DeleteSuppressedProductReference = property(__DeleteSuppressedProductReference.value, __DeleteSuppressedProductReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteProductReference uses Python identifier DeleteProductReference
    __DeleteProductReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteProductReference'), 'DeleteProductReference', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepDeleteProductReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1735, 20), )

    
    DeleteProductReference = property(__DeleteProductReference.value, __DeleteProductReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ProductReference uses Python identifier ProductReference
    __ProductReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ProductReference'), 'ProductReference', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepProductReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1737, 20), )

    
    ProductReference = property(__ProductReference.value, __ProductReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteSuppressedClassificationCrossReference uses Python identifier DeleteSuppressedClassificationCrossReference
    __DeleteSuppressedClassificationCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedClassificationCrossReference'), 'DeleteSuppressedClassificationCrossReference', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepDeleteSuppressedClassificationCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1740, 20), )

    
    DeleteSuppressedClassificationCrossReference = property(__DeleteSuppressedClassificationCrossReference.value, __DeleteSuppressedClassificationCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteClassificationCrossReference uses Python identifier DeleteClassificationCrossReference
    __DeleteClassificationCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteClassificationCrossReference'), 'DeleteClassificationCrossReference', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepDeleteClassificationCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1743, 20), )

    
    DeleteClassificationCrossReference = property(__DeleteClassificationCrossReference.value, __DeleteClassificationCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SuppressedClassificationCrossReference uses Python identifier SuppressedClassificationCrossReference
    __SuppressedClassificationCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SuppressedClassificationCrossReference'), 'SuppressedClassificationCrossReference', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepSuppressedClassificationCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1745, 20), )

    
    SuppressedClassificationCrossReference = property(__SuppressedClassificationCrossReference.value, __SuppressedClassificationCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ClassificationCrossReference uses Python identifier ClassificationCrossReference
    __ClassificationCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClassificationCrossReference'), 'ClassificationCrossReference', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepClassificationCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1748, 20), )

    
    ClassificationCrossReference = property(__ClassificationCrossReference.value, __ClassificationCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteSuppressedProductCrossReference uses Python identifier DeleteSuppressedProductCrossReference
    __DeleteSuppressedProductCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedProductCrossReference'), 'DeleteSuppressedProductCrossReference', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepDeleteSuppressedProductCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1752, 20), )

    
    DeleteSuppressedProductCrossReference = property(__DeleteSuppressedProductCrossReference.value, __DeleteSuppressedProductCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteProductCrossReference uses Python identifier DeleteProductCrossReference
    __DeleteProductCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteProductCrossReference'), 'DeleteProductCrossReference', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepDeleteProductCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1754, 20), )

    
    DeleteProductCrossReference = property(__DeleteProductCrossReference.value, __DeleteProductCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SuppressedProductCrossReference uses Python identifier SuppressedProductCrossReference
    __SuppressedProductCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SuppressedProductCrossReference'), 'SuppressedProductCrossReference', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepSuppressedProductCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1756, 20), )

    
    SuppressedProductCrossReference = property(__SuppressedProductCrossReference.value, __SuppressedProductCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ProductCrossReference uses Python identifier ProductCrossReference
    __ProductCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ProductCrossReference'), 'ProductCrossReference', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepProductCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1758, 20), )

    
    ProductCrossReference = property(__ProductCrossReference.value, __ProductCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteSuppressedEntityCrossReference uses Python identifier DeleteSuppressedEntityCrossReference
    __DeleteSuppressedEntityCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedEntityCrossReference'), 'DeleteSuppressedEntityCrossReference', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepDeleteSuppressedEntityCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1762, 20), )

    
    DeleteSuppressedEntityCrossReference = property(__DeleteSuppressedEntityCrossReference.value, __DeleteSuppressedEntityCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteEntityCrossReference uses Python identifier DeleteEntityCrossReference
    __DeleteEntityCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteEntityCrossReference'), 'DeleteEntityCrossReference', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepDeleteEntityCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1764, 20), )

    
    DeleteEntityCrossReference = property(__DeleteEntityCrossReference.value, __DeleteEntityCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SuppressedEntityCrossReference uses Python identifier SuppressedEntityCrossReference
    __SuppressedEntityCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SuppressedEntityCrossReference'), 'SuppressedEntityCrossReference', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepSuppressedEntityCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1766, 20), )

    
    SuppressedEntityCrossReference = property(__SuppressedEntityCrossReference.value, __SuppressedEntityCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}EntityCrossReference uses Python identifier EntityCrossReference
    __EntityCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EntityCrossReference'), 'EntityCrossReference', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepEntityCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1769, 20), )

    
    EntityCrossReference = property(__EntityCrossReference.value, __EntityCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteSuppressedAssetCrossReference uses Python identifier DeleteSuppressedAssetCrossReference
    __DeleteSuppressedAssetCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedAssetCrossReference'), 'DeleteSuppressedAssetCrossReference', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepDeleteSuppressedAssetCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1773, 20), )

    
    DeleteSuppressedAssetCrossReference = property(__DeleteSuppressedAssetCrossReference.value, __DeleteSuppressedAssetCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteAssetCrossReference uses Python identifier DeleteAssetCrossReference
    __DeleteAssetCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteAssetCrossReference'), 'DeleteAssetCrossReference', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepDeleteAssetCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1775, 20), )

    
    DeleteAssetCrossReference = property(__DeleteAssetCrossReference.value, __DeleteAssetCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SuppressedAssetCrossReference uses Python identifier SuppressedAssetCrossReference
    __SuppressedAssetCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SuppressedAssetCrossReference'), 'SuppressedAssetCrossReference', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepSuppressedAssetCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1777, 20), )

    
    SuppressedAssetCrossReference = property(__SuppressedAssetCrossReference.value, __SuppressedAssetCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AssetCrossReference uses Python identifier AssetCrossReference
    __AssetCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssetCrossReference'), 'AssetCrossReference', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepAssetCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1779, 20), )

    
    AssetCrossReference = property(__AssetCrossReference.value, __AssetCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteAttributeLink uses Python identifier DeleteAttributeLink
    __DeleteAttributeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteAttributeLink'), 'DeleteAttributeLink', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepDeleteAttributeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1783, 20), )

    
    DeleteAttributeLink = property(__DeleteAttributeLink.value, __DeleteAttributeLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeLink uses Python identifier AttributeLink
    __AttributeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink'), 'AttributeLink', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepAttributeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1785, 20), )

    
    AttributeLink = property(__AttributeLink.value, __AttributeLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteDataContainerTypeLink uses Python identifier DeleteDataContainerTypeLink
    __DeleteDataContainerTypeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteDataContainerTypeLink'), 'DeleteDataContainerTypeLink', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepDeleteDataContainerTypeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1788, 20), )

    
    DeleteDataContainerTypeLink = property(__DeleteDataContainerTypeLink.value, __DeleteDataContainerTypeLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DataContainerTypeLink uses Python identifier DataContainerTypeLink
    __DataContainerTypeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DataContainerTypeLink'), 'DataContainerTypeLink', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepDataContainerTypeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1790, 20), )

    
    DataContainerTypeLink = property(__DataContainerTypeLink.value, __DataContainerTypeLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepMetaData', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1793, 16), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Tables uses Python identifier Tables
    __Tables = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Tables'), 'Tables', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepTables', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1794, 16), )

    
    Tables = property(__Tables.value, __Tables.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Asset uses Python identifier Asset
    __Asset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Asset'), 'Asset', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepAsset', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1795, 16), )

    
    Asset = property(__Asset.value, __Asset.set, None, None)

    
    # Element {http://www.stibosystems.com/step}PublicationGroup uses Python identifier PublicationGroup
    __PublicationGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PublicationGroup'), 'PublicationGroup', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepPublicationGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1796, 16), )

    
    PublicationGroup = property(__PublicationGroup.value, __PublicationGroup.set, None, None)

    
    # Element {http://www.stibosystems.com/step}CurrentTasks uses Python identifier CurrentTasks
    __CurrentTasks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CurrentTasks'), 'CurrentTasks', '__httpwww_stibosystems_comstep_ClassificationType_httpwww_stibosystems_comstepCurrentTasks', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1797, 16), )

    
    CurrentTasks = property(__CurrentTasks.value, __CurrentTasks.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_ClassificationType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1800, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1800, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    
    # Attribute SourcePos uses Python identifier SourcePos
    __SourcePos = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SourcePos'), 'SourcePos', '__httpwww_stibosystems_comstep_ClassificationType_SourcePos', pyxb.binding.datatypes.string)
    __SourcePos._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1802, 8)
    __SourcePos._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1802, 8)
    
    SourcePos = property(__SourcePos.value, __SourcePos.set, None, None)

    
    # Attribute AnalyzerResult uses Python identifier AnalyzerResult
    __AnalyzerResult = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AnalyzerResult'), 'AnalyzerResult', '__httpwww_stibosystems_comstep_ClassificationType_AnalyzerResult', pyxb.binding.datatypes.string)
    __AnalyzerResult._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1803, 8)
    __AnalyzerResult._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1803, 8)
    
    AnalyzerResult = property(__AnalyzerResult.value, __AnalyzerResult.set, None, '\n                    @Deprecated, to be removed in a future release.\n                ')

    
    # Attribute ParentID uses Python identifier ParentID
    __ParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ParentID'), 'ParentID', '__httpwww_stibosystems_comstep_ClassificationType_ParentID', _module_typeBindings.StepClassificationID)
    __ParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1810, 8)
    __ParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1810, 8)
    
    ParentID = property(__ParentID.value, __ParentID.set, None, '\n                    The parent classification of this classification. Required for creation if no ParentKeyValue is\n                    supplied and if the classification is not nested inside another classification element.\n                ')

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_ClassificationType_ID', _module_typeBindings.StepClassificationID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1818, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1818, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    ID of the classification. Not required for creation if auto IDs are configured for the classification\n                    object type. Not required for updates if a KeyValue is supplied.\n                ')

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_ClassificationType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1826, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1826, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, '\n                    Identifies which contexts this object is visible in. If not specified, the current context is used.\n                ')

    
    # Attribute Republished uses Python identifier Republished
    __Republished = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Republished'), 'Republished', '__httpwww_stibosystems_comstep_ClassificationType_Republished', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Republished._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1833, 8)
    __Republished._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1833, 8)
    
    Republished = property(__Republished.value, __Republished.set, None, None)

    
    # Attribute UserTypeID uses Python identifier UserTypeID
    __UserTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserTypeID'), 'UserTypeID', '__httpwww_stibosystems_comstep_ClassificationType_UserTypeID', _module_typeBindings.StepObjectTypeID)
    __UserTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1835, 8)
    __UserTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1835, 8)
    
    UserTypeID = property(__UserTypeID.value, __UserTypeID.set, None, '\n                    The object type ID. Required for creation unless a DefaultUserTypeID has been specified.\n                ')

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_ClassificationType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1842, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1842, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_ClassificationType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1843, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1843, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute stbEmbedded uses Python identifier stbEmbedded
    __stbEmbedded = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'stbEmbedded'), 'stbEmbedded', '__httpwww_stibosystems_comstep_ClassificationType_stbEmbedded', pyxb.binding.datatypes.boolean, unicode_default='false')
    __stbEmbedded._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1844, 8)
    __stbEmbedded._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1844, 8)
    
    stbEmbedded = property(__stbEmbedded.value, __stbEmbedded.set, None, None)

    
    # Attribute stbEmbed uses Python identifier stbEmbed
    __stbEmbed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'stbEmbed'), 'stbEmbed', '__httpwww_stibosystems_comstep_ClassificationType_stbEmbed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __stbEmbed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1845, 8)
    __stbEmbed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1845, 8)
    
    stbEmbed = property(__stbEmbed.value, __stbEmbed.set, None, None)

    _ElementMap.update({
        __KeyValue.name() : __KeyValue,
        __ParentKeyValue.name() : __ParentKeyValue,
        __Name.name() : __Name,
        __SequenceProduct.name() : __SequenceProduct,
        __Classification.name() : __Classification,
        __DeleteSuppressedProductReference.name() : __DeleteSuppressedProductReference,
        __DeleteProductReference.name() : __DeleteProductReference,
        __ProductReference.name() : __ProductReference,
        __DeleteSuppressedClassificationCrossReference.name() : __DeleteSuppressedClassificationCrossReference,
        __DeleteClassificationCrossReference.name() : __DeleteClassificationCrossReference,
        __SuppressedClassificationCrossReference.name() : __SuppressedClassificationCrossReference,
        __ClassificationCrossReference.name() : __ClassificationCrossReference,
        __DeleteSuppressedProductCrossReference.name() : __DeleteSuppressedProductCrossReference,
        __DeleteProductCrossReference.name() : __DeleteProductCrossReference,
        __SuppressedProductCrossReference.name() : __SuppressedProductCrossReference,
        __ProductCrossReference.name() : __ProductCrossReference,
        __DeleteSuppressedEntityCrossReference.name() : __DeleteSuppressedEntityCrossReference,
        __DeleteEntityCrossReference.name() : __DeleteEntityCrossReference,
        __SuppressedEntityCrossReference.name() : __SuppressedEntityCrossReference,
        __EntityCrossReference.name() : __EntityCrossReference,
        __DeleteSuppressedAssetCrossReference.name() : __DeleteSuppressedAssetCrossReference,
        __DeleteAssetCrossReference.name() : __DeleteAssetCrossReference,
        __SuppressedAssetCrossReference.name() : __SuppressedAssetCrossReference,
        __AssetCrossReference.name() : __AssetCrossReference,
        __DeleteAttributeLink.name() : __DeleteAttributeLink,
        __AttributeLink.name() : __AttributeLink,
        __DeleteDataContainerTypeLink.name() : __DeleteDataContainerTypeLink,
        __DataContainerTypeLink.name() : __DataContainerTypeLink,
        __MetaData.name() : __MetaData,
        __Tables.name() : __Tables,
        __Asset.name() : __Asset,
        __PublicationGroup.name() : __PublicationGroup,
        __CurrentTasks.name() : __CurrentTasks
    })
    _AttributeMap.update({
        __Changed.name() : __Changed,
        __SourcePos.name() : __SourcePos,
        __AnalyzerResult.name() : __AnalyzerResult,
        __ParentID.name() : __ParentID,
        __ID.name() : __ID,
        __QualifierID.name() : __QualifierID,
        __Republished.name() : __Republished,
        __UserTypeID.name() : __UserTypeID,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __stbEmbedded.name() : __stbEmbedded,
        __stbEmbed.name() : __stbEmbed
    })
_module_typeBindings.ClassificationType = ClassificationType
Namespace.addCategoryObject('typeBinding', 'ClassificationType', ClassificationType)


# Complex type {http://www.stibosystems.com/step}ClassificationBasketLinkType with content type ELEMENT_ONLY
class ClassificationBasketLinkType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}ClassificationBasketLinkType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ClassificationBasketLinkType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1847, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_ClassificationBasketLinkType_httpwww_stibosystems_comstepKeyValue', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1849, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Attribute ClassificationID uses Python identifier ClassificationID
    __ClassificationID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ClassificationID'), 'ClassificationID', '__httpwww_stibosystems_comstep_ClassificationBasketLinkType_ClassificationID', _module_typeBindings.StepClassificationID, required=True)
    __ClassificationID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1851, 8)
    __ClassificationID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1851, 8)
    
    ClassificationID = property(__ClassificationID.value, __ClassificationID.set, None, None)

    _ElementMap.update({
        __KeyValue.name() : __KeyValue
    })
    _AttributeMap.update({
        __ClassificationID.name() : __ClassificationID
    })
_module_typeBindings.ClassificationBasketLinkType = ClassificationBasketLinkType
Namespace.addCategoryObject('typeBinding', 'ClassificationBasketLinkType', ClassificationBasketLinkType)


# Complex type {http://www.stibosystems.com/step}ClassificationCrossReferenceType with content type ELEMENT_ONLY
class ClassificationCrossReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """
                A reference to a classification.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ClassificationCrossReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1853, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_ClassificationCrossReferenceType_httpwww_stibosystems_comstepKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1860, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_ClassificationCrossReferenceType_httpwww_stibosystems_comstepMetaData', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1862, 16), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Classification uses Python identifier Classification
    __Classification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Classification'), 'Classification', '__httpwww_stibosystems_comstep_ClassificationCrossReferenceType_httpwww_stibosystems_comstepClassification', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1863, 16), )

    
    Classification = property(__Classification.value, __Classification.set, None, '\n                            Embedded reference target. Has no effect during import.\n                        ')

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_ClassificationCrossReferenceType_Type', _module_typeBindings.StepLinkTypeID, required=True)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1872, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1872, 8)
    
    Type = property(__Type.value, __Type.set, None, '\n                    ID of the reference type.\n                ')

    
    # Attribute AnalyzerResult uses Python identifier AnalyzerResult
    __AnalyzerResult = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AnalyzerResult'), 'AnalyzerResult', '__httpwww_stibosystems_comstep_ClassificationCrossReferenceType_AnalyzerResult', pyxb.binding.datatypes.string)
    __AnalyzerResult._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1879, 8)
    __AnalyzerResult._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1879, 8)
    
    AnalyzerResult = property(__AnalyzerResult.value, __AnalyzerResult.set, None, '\n                    @Deprecated, to be removed in a future release.\n\n                    WebPublisher specific attribute. Identifies whether the referenced classification is present on the\n                    website. Possible values: included, excluded\n                ')

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_ClassificationCrossReferenceType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1889, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1889, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_ClassificationCrossReferenceType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1891, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1891, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, '\n                    Identifies which contexts this reference is visible in. If not specified, the current context is\n                    used.\n                ')

    
    # Attribute ClassificationID uses Python identifier ClassificationID
    __ClassificationID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ClassificationID'), 'ClassificationID', '__httpwww_stibosystems_comstep_ClassificationCrossReferenceType_ClassificationID', _module_typeBindings.StepClassificationID)
    __ClassificationID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1899, 8)
    __ClassificationID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1899, 8)
    
    ClassificationID = property(__ClassificationID.value, __ClassificationID.set, None, '\n                    ID of the referenced classification. Required if a KeyValue is not supplied.\n                ')

    
    # Attribute Inherited uses Python identifier Inherited
    __Inherited = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Inherited'), 'Inherited', '__httpwww_stibosystems_comstep_ClassificationCrossReferenceType_Inherited', pyxb.binding.datatypes.integer)
    __Inherited._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1906, 8)
    __Inherited._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1906, 8)
    
    Inherited = property(__Inherited.value, __Inherited.set, None, '\n                    Only relevant during export when nested inside a partial hierarchy. If present during import,\n                    the link is simply ignored. If this attribute is present then link is inherited. Will not\n                    be exported for local links (thus only numbers 1 and upward will be exported - 1 indicating\n                    inherited from immediate parent).\n                    The integer value of this attribute indicates how far up this link is inherited from.\n                    In cross context exports it might be relevant to have this number to find the most relevant link\n                    for a given context.\n                    NOTE: will only inherit inside hierarchy of equal node types - ie. will not inherit from\n                    classification to product hierarchy.\n                ')

    _ElementMap.update({
        __KeyValue.name() : __KeyValue,
        __MetaData.name() : __MetaData,
        __Classification.name() : __Classification
    })
    _AttributeMap.update({
        __Type.name() : __Type,
        __AnalyzerResult.name() : __AnalyzerResult,
        __Changed.name() : __Changed,
        __QualifierID.name() : __QualifierID,
        __ClassificationID.name() : __ClassificationID,
        __Inherited.name() : __Inherited
    })
_module_typeBindings.ClassificationCrossReferenceType = ClassificationCrossReferenceType
Namespace.addCategoryObject('typeBinding', 'ClassificationCrossReferenceType', ClassificationCrossReferenceType)


# Complex type {http://www.stibosystems.com/step}ClassificationCrossReferenceTypeType with content type ELEMENT_ONLY
class ClassificationCrossReferenceTypeType (pyxb.binding.basis.complexTypeDefinition):
    """
                The definition of a reference type for which references point to classifications.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ClassificationCrossReferenceTypeType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1922, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_ClassificationCrossReferenceTypeType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1929, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_ClassificationCrossReferenceTypeType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1930, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeLink uses Python identifier AttributeLink
    __AttributeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink'), 'AttributeLink', '__httpwww_stibosystems_comstep_ClassificationCrossReferenceTypeType_httpwww_stibosystems_comstepAttributeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1931, 12), )

    
    AttributeLink = property(__AttributeLink.value, __AttributeLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DimensionLink uses Python identifier DimensionLink
    __DimensionLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink'), 'DimensionLink', '__httpwww_stibosystems_comstep_ClassificationCrossReferenceTypeType_httpwww_stibosystems_comstepDimensionLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1932, 12), )

    
    DimensionLink = property(__DimensionLink.value, __DimensionLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeGroupLink uses Python identifier AttributeGroupLink
    __AttributeGroupLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), 'AttributeGroupLink', '__httpwww_stibosystems_comstep_ClassificationCrossReferenceTypeType_httpwww_stibosystems_comstepAttributeGroupLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1933, 12), )

    
    AttributeGroupLink = property(__AttributeGroupLink.value, __AttributeGroupLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}UserTypeLink uses Python identifier UserTypeLink
    __UserTypeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink'), 'UserTypeLink', '__httpwww_stibosystems_comstep_ClassificationCrossReferenceTypeType_httpwww_stibosystems_comstepUserTypeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1934, 12), )

    
    UserTypeLink = property(__UserTypeLink.value, __UserTypeLink.set, None, '\n                        Link to a valid source type. Notice that this source can be a DataContainerType.\n                    ')

    
    # Element {http://www.stibosystems.com/step}TargetUserTypeLink uses Python identifier TargetUserTypeLink
    __TargetUserTypeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TargetUserTypeLink'), 'TargetUserTypeLink', '__httpwww_stibosystems_comstep_ClassificationCrossReferenceTypeType_httpwww_stibosystems_comstepTargetUserTypeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1941, 12), )

    
    TargetUserTypeLink = property(__TargetUserTypeLink.value, __TargetUserTypeLink.set, None, None)

    
    # Attribute Inherited uses Python identifier Inherited
    __Inherited = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Inherited'), 'Inherited', '__httpwww_stibosystems_comstep_ClassificationCrossReferenceTypeType_Inherited', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Inherited._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1943, 8)
    __Inherited._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1943, 8)
    
    Inherited = property(__Inherited.value, __Inherited.set, None, '\n                    Specifies whether or not references of this type are hierarchically inherited. Cannot be "false" if\n                    the value for the Accumulated attribute is "true".\n                ')

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_ClassificationCrossReferenceTypeType_ID', _module_typeBindings.StepLinkTypeID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1951, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1951, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute Revised uses Python identifier Revised
    __Revised = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Revised'), 'Revised', '__httpwww_stibosystems_comstep_ClassificationCrossReferenceTypeType_Revised', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Revised._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1952, 8)
    __Revised._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1952, 8)
    
    Revised = property(__Revised.value, __Revised.set, None, '\n                    Specifies whether references of this type are under revision control or not (externally maintained).\n                    During import, for existing reference types for which references exist, the value can be changed\n                    from "false" to "true" if the import runs in single update mode but cannot be changed from "true"\n                    to "false".\n                ')

    
    # Attribute Completeness uses Python identifier Completeness
    __Completeness = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Completeness'), 'Completeness', '__httpwww_stibosystems_comstep_ClassificationCrossReferenceTypeType_Completeness', pyxb.binding.datatypes.string)
    __Completeness._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1962, 8)
    __Completeness._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1962, 8)
    
    Completeness = property(__Completeness.value, __Completeness.set, None, '\n                    @Deprecated, not used anymore after the introduction of Completeness Metrics in STEP 7.4 (see\n                    documentation on Completeness Metrics and migration from old pre-7.4 completeness functionality).\n                ')

    
    # Attribute MultiValued uses Python identifier MultiValued
    __MultiValued = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MultiValued'), 'MultiValued', '__httpwww_stibosystems_comstep_ClassificationCrossReferenceTypeType_MultiValued', pyxb.binding.datatypes.boolean, unicode_default='true')
    __MultiValued._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1970, 8)
    __MultiValued._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1970, 8)
    
    MultiValued = property(__MultiValued.value, __MultiValued.set, None, '\n                    Whether the type allows for multiple references from the same source or not. Can for existing\n                    reference types be changed from "false" to "true". Changing from "true" to "false" requires that no\n                    present source has multiple references.\n                ')

    
    # Attribute Mandatory uses Python identifier Mandatory
    __Mandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Mandatory'), 'Mandatory', '__httpwww_stibosystems_comstep_ClassificationCrossReferenceTypeType_Mandatory', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Mandatory._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1979, 8)
    __Mandatory._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1979, 8)
    
    Mandatory = property(__Mandatory.value, __Mandatory.set, None, '\n                    Specifies whether or not this reference type is mandatory for approval.\n                ')

    
    # Attribute Accumulated uses Python identifier Accumulated
    __Accumulated = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Accumulated'), 'Accumulated', '__httpwww_stibosystems_comstep_ClassificationCrossReferenceTypeType_Accumulated', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Accumulated._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1986, 8)
    __Accumulated._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1986, 8)
    
    Accumulated = property(__Accumulated.value, __Accumulated.set, None, '\n                    Specifies whether or not reference inheritance should be accumulated. Can only be "true" if\n                    the value for the MultiValued attribute is "true".\n                ')

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_ClassificationCrossReferenceTypeType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1994, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1994, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_ClassificationCrossReferenceTypeType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1995, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1995, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_ClassificationCrossReferenceTypeType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1996, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1996, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __AttributeLink.name() : __AttributeLink,
        __DimensionLink.name() : __DimensionLink,
        __AttributeGroupLink.name() : __AttributeGroupLink,
        __UserTypeLink.name() : __UserTypeLink,
        __TargetUserTypeLink.name() : __TargetUserTypeLink
    })
    _AttributeMap.update({
        __Inherited.name() : __Inherited,
        __ID.name() : __ID,
        __Revised.name() : __Revised,
        __Completeness.name() : __Completeness,
        __MultiValued.name() : __MultiValued,
        __Mandatory.name() : __Mandatory,
        __Accumulated.name() : __Accumulated,
        __Referenced.name() : __Referenced,
        __Selected.name() : __Selected,
        __Changed.name() : __Changed
    })
_module_typeBindings.ClassificationCrossReferenceTypeType = ClassificationCrossReferenceTypeType
Namespace.addCategoryObject('typeBinding', 'ClassificationCrossReferenceTypeType', ClassificationCrossReferenceTypeType)


# Complex type {http://www.stibosystems.com/step}ClassificationElementType with content type ELEMENT_ONLY
class ClassificationElementType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}ClassificationElementType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ClassificationElementType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1998, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}RuleBasedLayout uses Python identifier RuleBasedLayout
    __RuleBasedLayout = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RuleBasedLayout'), 'RuleBasedLayout', '__httpwww_stibosystems_comstep_ClassificationElementType_httpwww_stibosystems_comstepRuleBasedLayout', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2000, 12), )

    
    RuleBasedLayout = property(__RuleBasedLayout.value, __RuleBasedLayout.set, None, None)

    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_ClassificationElementType_httpwww_stibosystems_comstepKeyValue', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2001, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Element {http://www.stibosystems.com/step}TemplateLayout uses Python identifier TemplateLayout
    __TemplateLayout = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TemplateLayout'), 'TemplateLayout', '__httpwww_stibosystems_comstep_ClassificationElementType_httpwww_stibosystems_comstepTemplateLayout', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2002, 12), )

    
    TemplateLayout = property(__TemplateLayout.value, __TemplateLayout.set, None, None)

    
    # Element {http://www.stibosystems.com/step}PickupLayout uses Python identifier PickupLayout
    __PickupLayout = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PickupLayout'), 'PickupLayout', '__httpwww_stibosystems_comstep_ClassificationElementType_httpwww_stibosystems_comstepPickupLayout', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2003, 12), )

    
    PickupLayout = property(__PickupLayout.value, __PickupLayout.set, None, None)

    
    # Attribute OfferType uses Python identifier OfferType
    __OfferType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OfferType'), 'OfferType', '__httpwww_stibosystems_comstep_ClassificationElementType_OfferType', pyxb.binding.datatypes.string)
    __OfferType._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2005, 8)
    __OfferType._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2005, 8)
    
    OfferType = property(__OfferType.value, __OfferType.set, None, None)

    
    # Attribute ExtendToFrameID uses Python identifier ExtendToFrameID
    __ExtendToFrameID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ExtendToFrameID'), 'ExtendToFrameID', '__httpwww_stibosystems_comstep_ClassificationElementType_ExtendToFrameID', _module_typeBindings.StepID)
    __ExtendToFrameID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2006, 8)
    __ExtendToFrameID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2006, 8)
    
    ExtendToFrameID = property(__ExtendToFrameID.value, __ExtendToFrameID.set, None, None)

    
    # Attribute FrameID uses Python identifier FrameID
    __FrameID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'FrameID'), 'FrameID', '__httpwww_stibosystems_comstep_ClassificationElementType_FrameID', _module_typeBindings.StepID)
    __FrameID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2007, 8)
    __FrameID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2007, 8)
    
    FrameID = property(__FrameID.value, __FrameID.set, None, None)

    
    # Attribute ClassificationID uses Python identifier ClassificationID
    __ClassificationID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ClassificationID'), 'ClassificationID', '__httpwww_stibosystems_comstep_ClassificationElementType_ClassificationID', _module_typeBindings.StepClassificationID, required=True)
    __ClassificationID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2008, 8)
    __ClassificationID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2008, 8)
    
    ClassificationID = property(__ClassificationID.value, __ClassificationID.set, None, None)

    _ElementMap.update({
        __RuleBasedLayout.name() : __RuleBasedLayout,
        __KeyValue.name() : __KeyValue,
        __TemplateLayout.name() : __TemplateLayout,
        __PickupLayout.name() : __PickupLayout
    })
    _AttributeMap.update({
        __OfferType.name() : __OfferType,
        __ExtendToFrameID.name() : __ExtendToFrameID,
        __FrameID.name() : __FrameID,
        __ClassificationID.name() : __ClassificationID
    })
_module_typeBindings.ClassificationElementType = ClassificationElementType
Namespace.addCategoryObject('typeBinding', 'ClassificationElementType', ClassificationElementType)


# Complex type {http://www.stibosystems.com/step}ClassificationProductLinkTypeType with content type ELEMENT_ONLY
class ClassificationProductLinkTypeType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}ClassificationProductLinkTypeType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ClassificationProductLinkTypeType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2010, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_ClassificationProductLinkTypeType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2012, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_ClassificationProductLinkTypeType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2013, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeLink uses Python identifier AttributeLink
    __AttributeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink'), 'AttributeLink', '__httpwww_stibosystems_comstep_ClassificationProductLinkTypeType_httpwww_stibosystems_comstepAttributeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2014, 12), )

    
    AttributeLink = property(__AttributeLink.value, __AttributeLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DimensionLink uses Python identifier DimensionLink
    __DimensionLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink'), 'DimensionLink', '__httpwww_stibosystems_comstep_ClassificationProductLinkTypeType_httpwww_stibosystems_comstepDimensionLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2015, 12), )

    
    DimensionLink = property(__DimensionLink.value, __DimensionLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeGroupLink uses Python identifier AttributeGroupLink
    __AttributeGroupLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), 'AttributeGroupLink', '__httpwww_stibosystems_comstep_ClassificationProductLinkTypeType_httpwww_stibosystems_comstepAttributeGroupLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2016, 12), )

    
    AttributeGroupLink = property(__AttributeGroupLink.value, __AttributeGroupLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}UserTypeLink uses Python identifier UserTypeLink
    __UserTypeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink'), 'UserTypeLink', '__httpwww_stibosystems_comstep_ClassificationProductLinkTypeType_httpwww_stibosystems_comstepUserTypeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2017, 12), )

    
    UserTypeLink = property(__UserTypeLink.value, __UserTypeLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}TargetUserTypeLink uses Python identifier TargetUserTypeLink
    __TargetUserTypeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TargetUserTypeLink'), 'TargetUserTypeLink', '__httpwww_stibosystems_comstep_ClassificationProductLinkTypeType_httpwww_stibosystems_comstepTargetUserTypeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2018, 12), )

    
    TargetUserTypeLink = property(__TargetUserTypeLink.value, __TargetUserTypeLink.set, None, None)

    
    # Attribute Inherited uses Python identifier Inherited
    __Inherited = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Inherited'), 'Inherited', '__httpwww_stibosystems_comstep_ClassificationProductLinkTypeType_Inherited', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Inherited._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2020, 8)
    __Inherited._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2020, 8)
    
    Inherited = property(__Inherited.value, __Inherited.set, None, '\n                    Specifies whether or not links of this type are hierarchically inherited. Cannot be "false" if\n                    the value for the Accumulated attribute is "true".\n                ')

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_ClassificationProductLinkTypeType_ID', _module_typeBindings.StepLinkTypeID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2028, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2028, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute DefinesValidAttributes uses Python identifier DefinesValidAttributes
    __DefinesValidAttributes = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DefinesValidAttributes'), 'DefinesValidAttributes', '__httpwww_stibosystems_comstep_ClassificationProductLinkTypeType_DefinesValidAttributes', pyxb.binding.datatypes.boolean, unicode_default='false')
    __DefinesValidAttributes._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2029, 8)
    __DefinesValidAttributes._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2029, 8)
    
    DefinesValidAttributes = property(__DefinesValidAttributes.value, __DefinesValidAttributes.set, None, '\n                    Determines whether product linked into a classification using this type should inherit specification\n                    attribute validity from the classification hierarchy.\n                ')

    
    # Attribute IgnoreLOVFilters uses Python identifier IgnoreLOVFilters
    __IgnoreLOVFilters = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IgnoreLOVFilters'), 'IgnoreLOVFilters', '__httpwww_stibosystems_comstep_ClassificationProductLinkTypeType_IgnoreLOVFilters', pyxb.binding.datatypes.boolean, unicode_default='false')
    __IgnoreLOVFilters._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2037, 8)
    __IgnoreLOVFilters._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2037, 8)
    
    IgnoreLOVFilters = property(__IgnoreLOVFilters.value, __IgnoreLOVFilters.set, None, None)

    
    # Attribute Revised uses Python identifier Revised
    __Revised = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Revised'), 'Revised', '__httpwww_stibosystems_comstep_ClassificationProductLinkTypeType_Revised', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Revised._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2038, 8)
    __Revised._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2038, 8)
    
    Revised = property(__Revised.value, __Revised.set, None, '\n                    Specifies whether links of this type are under revision control or not (externally maintained).\n                    During import, for existing link types for which links exist, the value can be changed\n                    from "false" to "true" if the import runs in single update mode but cannot be changed from "true"\n                    to "false".\n                ')

    
    # Attribute MultiValued uses Python identifier MultiValued
    __MultiValued = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MultiValued'), 'MultiValued', '__httpwww_stibosystems_comstep_ClassificationProductLinkTypeType_MultiValued', pyxb.binding.datatypes.boolean, unicode_default='true')
    __MultiValued._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2048, 8)
    __MultiValued._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2048, 8)
    
    MultiValued = property(__MultiValued.value, __MultiValued.set, None, '\n                    Whether the type allows for multiple links from a single product or not. Can for existing\n                    link types be changed from "false" to "true". Changing from "true" to "false" requires that no\n                    present source has multiple links.\n                ')

    
    # Attribute Mandatory uses Python identifier Mandatory
    __Mandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Mandatory'), 'Mandatory', '__httpwww_stibosystems_comstep_ClassificationProductLinkTypeType_Mandatory', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Mandatory._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2057, 8)
    __Mandatory._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2057, 8)
    
    Mandatory = property(__Mandatory.value, __Mandatory.set, None, '\n                    Specifies whether or not this link type is mandatory for approval.\n                ')

    
    # Attribute Accumulated uses Python identifier Accumulated
    __Accumulated = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Accumulated'), 'Accumulated', '__httpwww_stibosystems_comstep_ClassificationProductLinkTypeType_Accumulated', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Accumulated._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2064, 8)
    __Accumulated._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2064, 8)
    
    Accumulated = property(__Accumulated.value, __Accumulated.set, None, '\n                    Specifies whether or not link inheritance should be accumulated. Can only be "true" if\n                    the value for the MultiValued attribute is "true".\n                ')

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_ClassificationProductLinkTypeType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2072, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2072, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_ClassificationProductLinkTypeType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2073, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2073, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_ClassificationProductLinkTypeType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2074, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2074, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __AttributeLink.name() : __AttributeLink,
        __DimensionLink.name() : __DimensionLink,
        __AttributeGroupLink.name() : __AttributeGroupLink,
        __UserTypeLink.name() : __UserTypeLink,
        __TargetUserTypeLink.name() : __TargetUserTypeLink
    })
    _AttributeMap.update({
        __Inherited.name() : __Inherited,
        __ID.name() : __ID,
        __DefinesValidAttributes.name() : __DefinesValidAttributes,
        __IgnoreLOVFilters.name() : __IgnoreLOVFilters,
        __Revised.name() : __Revised,
        __MultiValued.name() : __MultiValued,
        __Mandatory.name() : __Mandatory,
        __Accumulated.name() : __Accumulated,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed
    })
_module_typeBindings.ClassificationProductLinkTypeType = ClassificationProductLinkTypeType
Namespace.addCategoryObject('typeBinding', 'ClassificationProductLinkTypeType', ClassificationProductLinkTypeType)


# Complex type {http://www.stibosystems.com/step}ClassificationReferenceType with content type ELEMENT_ONLY
class ClassificationReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """
                This element describes a link to a classification from either a product, an asset or a configuration
                object (e.g. an export configuration). Notice that only links from products have a type and can have
                metadata.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ClassificationReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2076, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_ClassificationReferenceType_httpwww_stibosystems_comstepKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2085, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_ClassificationReferenceType_httpwww_stibosystems_comstepMetaData', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2087, 16), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, '\n                            Classification product link metadata. Only used when the element expresses a link from a\n                            product to a classification.\n                        ')

    
    # Element {http://www.stibosystems.com/step}Classification uses Python identifier Classification
    __Classification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Classification'), 'Classification', '__httpwww_stibosystems_comstep_ClassificationReferenceType_httpwww_stibosystems_comstepClassification', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2095, 16), )

    
    Classification = property(__Classification.value, __Classification.set, None, '\n                            Embedded link target. Has no effect during import.\n                        ')

    
    # Attribute InheritedFrom uses Python identifier InheritedFrom
    __InheritedFrom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'InheritedFrom'), 'InheritedFrom', '__httpwww_stibosystems_comstep_ClassificationReferenceType_InheritedFrom', pyxb.binding.datatypes.string)
    __InheritedFrom._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2104, 8)
    __InheritedFrom._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2104, 8)
    
    InheritedFrom = property(__InheritedFrom.value, __InheritedFrom.set, None, '\n                    Only relevant during export when nested inside a product. Informs from which parent product this\n                    classification link has been inherited.\n                ')

    
    # Attribute Inherited uses Python identifier Inherited
    __Inherited = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Inherited'), 'Inherited', '__httpwww_stibosystems_comstep_ClassificationReferenceType_Inherited', pyxb.binding.datatypes.integer)
    __Inherited._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2112, 8)
    __Inherited._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2112, 8)
    
    Inherited = property(__Inherited.value, __Inherited.set, None, '\n                    Only relevant during export when nested inside a partial hierarchy. If present during import,\n                    the link is simply ignored. If this attribute is present then link is inherited. Will not\n                    be exported for local links (thus only numbers 1 and upward will be exported - 1 indicating\n                    inherited from immediate parent).\n                    The integer value of this attribute indicates how far up this link is inherited from.\n                    In cross context exports it might be relevant to have this number to find the most relevant link\n                    for a given context.\n                    NOTE: will only inherit inside hierarchy of equal node types - ie. will not inherit from\n                    classification to product hierarchy.\n                ')

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_ClassificationReferenceType_Type', _module_typeBindings.StepLinkTypeID)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2127, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2127, 8)
    
    Type = property(__Type.value, __Type.set, None, '\n                    Classification product link type ID. Only used when the element expresses a link from a product to a\n                    classification.\n                ')

    
    # Attribute AnalyzerResult uses Python identifier AnalyzerResult
    __AnalyzerResult = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AnalyzerResult'), 'AnalyzerResult', '__httpwww_stibosystems_comstep_ClassificationReferenceType_AnalyzerResult', pyxb.binding.datatypes.string)
    __AnalyzerResult._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2135, 8)
    __AnalyzerResult._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2135, 8)
    
    AnalyzerResult = property(__AnalyzerResult.value, __AnalyzerResult.set, None, '\n                    @Deprecated, to be removed in a future release.\n\n                    WebPublisher specific attribute. Identifies whether the referenced classification is present on the\n                    website. Possible values: included, excluded\n                ')

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_ClassificationReferenceType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2145, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2145, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_ClassificationReferenceType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2147, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2147, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, '\n                    Identifies which contexts this link is visible in. If not specified the current context is used.\n                ')

    
    # Attribute ClassificationID uses Python identifier ClassificationID
    __ClassificationID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ClassificationID'), 'ClassificationID', '__httpwww_stibosystems_comstep_ClassificationReferenceType_ClassificationID', _module_typeBindings.StepClassificationID)
    __ClassificationID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2154, 8)
    __ClassificationID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2154, 8)
    
    ClassificationID = property(__ClassificationID.value, __ClassificationID.set, None, '\n                    The ID of the classification. Required if a KeyValue is not supplied.\n                ')

    
    # Attribute stbEmbed uses Python identifier stbEmbed
    __stbEmbed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'stbEmbed'), 'stbEmbed', '__httpwww_stibosystems_comstep_ClassificationReferenceType_stbEmbed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __stbEmbed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2161, 8)
    __stbEmbed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2161, 8)
    
    stbEmbed = property(__stbEmbed.value, __stbEmbed.set, None, None)

    
    # Attribute stbEmbedded uses Python identifier stbEmbedded
    __stbEmbedded = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'stbEmbedded'), 'stbEmbedded', '__httpwww_stibosystems_comstep_ClassificationReferenceType_stbEmbedded', pyxb.binding.datatypes.boolean, unicode_default='false')
    __stbEmbedded._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2162, 8)
    __stbEmbedded._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2162, 8)
    
    stbEmbedded = property(__stbEmbedded.value, __stbEmbedded.set, None, None)

    _ElementMap.update({
        __KeyValue.name() : __KeyValue,
        __MetaData.name() : __MetaData,
        __Classification.name() : __Classification
    })
    _AttributeMap.update({
        __InheritedFrom.name() : __InheritedFrom,
        __Inherited.name() : __Inherited,
        __Type.name() : __Type,
        __AnalyzerResult.name() : __AnalyzerResult,
        __Changed.name() : __Changed,
        __QualifierID.name() : __QualifierID,
        __ClassificationID.name() : __ClassificationID,
        __stbEmbed.name() : __stbEmbed,
        __stbEmbedded.name() : __stbEmbedded
    })
_module_typeBindings.ClassificationReferenceType = ClassificationReferenceType
Namespace.addCategoryObject('typeBinding', 'ClassificationReferenceType', ClassificationReferenceType)


# Complex type {http://www.stibosystems.com/step}ClassificationsType with content type ELEMENT_ONLY
class ClassificationsType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for classifications.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ClassificationsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2164, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Classification uses Python identifier Classification
    __Classification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Classification'), 'Classification', '__httpwww_stibosystems_comstep_ClassificationsType_httpwww_stibosystems_comstepClassification', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2171, 12), )

    
    Classification = property(__Classification.value, __Classification.set, None, None)

    
    # Attribute RejectNewClassifications uses Python identifier RejectNewClassifications
    __RejectNewClassifications = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'RejectNewClassifications'), 'RejectNewClassifications', '__httpwww_stibosystems_comstep_ClassificationsType_RejectNewClassifications', pyxb.binding.datatypes.boolean, unicode_default='false')
    __RejectNewClassifications._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2173, 8)
    __RejectNewClassifications._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2173, 8)
    
    RejectNewClassifications = property(__RejectNewClassifications.value, __RejectNewClassifications.set, None, '\n                    Instruction that can be used during import to prevent the creation of new classifications.\n                ')

    
    # Attribute DefaultParentID uses Python identifier DefaultParentID
    __DefaultParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DefaultParentID'), 'DefaultParentID', '__httpwww_stibosystems_comstep_ClassificationsType_DefaultParentID', _module_typeBindings.StepClassificationID)
    __DefaultParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2180, 8)
    __DefaultParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2180, 8)
    
    DefaultParentID = property(__DefaultParentID.value, __DefaultParentID.set, None, '\n                    Import instruction. The default parent classification for new classifications for which no parent\n                    information is supplied.\n                ')

    
    # Attribute DefaultUserTypeID uses Python identifier DefaultUserTypeID
    __DefaultUserTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DefaultUserTypeID'), 'DefaultUserTypeID', '__httpwww_stibosystems_comstep_ClassificationsType_DefaultUserTypeID', _module_typeBindings.StepObjectTypeID)
    __DefaultUserTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2188, 8)
    __DefaultUserTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2188, 8)
    
    DefaultUserTypeID = property(__DefaultUserTypeID.value, __DefaultUserTypeID.set, None, '\n                    Import instruction. The default object type for new classifications for which no object type is\n                    supplied.\n                ')

    _ElementMap.update({
        __Classification.name() : __Classification
    })
    _AttributeMap.update({
        __RejectNewClassifications.name() : __RejectNewClassifications,
        __DefaultParentID.name() : __DefaultParentID,
        __DefaultUserTypeID.name() : __DefaultUserTypeID
    })
_module_typeBindings.ClassificationsType = ClassificationsType
Namespace.addCategoryObject('typeBinding', 'ClassificationsType', ClassificationsType)


# Complex type {http://www.stibosystems.com/step}ClassificationOriginType with content type EMPTY
class ClassificationOriginType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}ClassificationOriginType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ClassificationOriginType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2197, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_ClassificationOriginType_ID', pyxb.binding.datatypes.string)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2198, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2198, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute AttributeID uses Python identifier AttributeID
    __AttributeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AttributeID'), 'AttributeID', '__httpwww_stibosystems_comstep_ClassificationOriginType_AttributeID', _module_typeBindings.StepAttributeID)
    __AttributeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2199, 8)
    __AttributeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2199, 8)
    
    AttributeID = property(__AttributeID.value, __AttributeID.set, None, None)

    
    # Attribute Pull uses Python identifier Pull
    __Pull = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Pull'), 'Pull', '__httpwww_stibosystems_comstep_ClassificationOriginType_Pull', pyxb.binding.datatypes.string)
    __Pull._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2200, 8)
    __Pull._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2200, 8)
    
    Pull = property(__Pull.value, __Pull.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __AttributeID.name() : __AttributeID,
        __Pull.name() : __Pull
    })
_module_typeBindings.ClassificationOriginType = ClassificationOriginType
Namespace.addCategoryObject('typeBinding', 'ClassificationOriginType', ClassificationOriginType)


# Complex type {http://www.stibosystems.com/step}CollectionGroupType with content type ELEMENT_ONLY
class CollectionGroupType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for collections and collection groups.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CollectionGroupType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2202, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_CollectionGroupType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2209, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_CollectionGroupType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2210, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}CollectionGroup uses Python identifier CollectionGroup
    __CollectionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CollectionGroup'), 'CollectionGroup', '__httpwww_stibosystems_comstep_CollectionGroupType_httpwww_stibosystems_comstepCollectionGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2211, 12), )

    
    CollectionGroup = property(__CollectionGroup.value, __CollectionGroup.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Collection uses Python identifier Collection
    __Collection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Collection'), 'Collection', '__httpwww_stibosystems_comstep_CollectionGroupType_httpwww_stibosystems_comstepCollection', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2212, 12), )

    
    Collection = property(__Collection.value, __Collection.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_CollectionGroupType_ID', _module_typeBindings.StepNodeCollectionID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2214, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2214, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute ParentID uses Python identifier ParentID
    __ParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ParentID'), 'ParentID', '__httpwww_stibosystems_comstep_CollectionGroupType_ParentID', _module_typeBindings.StepNodeCollectionID)
    __ParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2215, 8)
    __ParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2215, 8)
    
    ParentID = property(__ParentID.value, __ParentID.set, None, '\n                    The optional parentID is used for importing collection groups into an already existing\n                    hierarchy of collection groups.\n                ')

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __CollectionGroup.name() : __CollectionGroup,
        __Collection.name() : __Collection
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __ParentID.name() : __ParentID
    })
_module_typeBindings.CollectionGroupType = CollectionGroupType
Namespace.addCategoryObject('typeBinding', 'CollectionGroupType', CollectionGroupType)


# Complex type {http://www.stibosystems.com/step}CollectionType with content type ELEMENT_ONLY
class CollectionType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a collection in STEP. Notice that the content of the collection is not represented in
                STEPXML.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CollectionType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2235, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_CollectionType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2243, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_CollectionType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2244, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_CollectionType_ID', _module_typeBindings.StepNodeCollectionID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2246, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2246, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    ID of the collection. Not required for creation if auto IDs are configured for the object type.\n                ')

    
    # Attribute ParentID uses Python identifier ParentID
    __ParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ParentID'), 'ParentID', '__httpwww_stibosystems_comstep_CollectionType_ParentID', _module_typeBindings.StepNodeCollectionID)
    __ParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2253, 8)
    __ParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2253, 8)
    
    ParentID = property(__ParentID.value, __ParentID.set, None, '\n                    The optional ParentID is used for importing collections into an already existing\n                    hierarchy of collection groups.\n                    You cannot use this field for importing into an eCatalog. For this, the collection element must be\n                    embedded in the eCatalog representation.\n                ')

    
    # Attribute QueryURL uses Python identifier QueryURL
    __QueryURL = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QueryURL'), 'QueryURL', '__httpwww_stibosystems_comstep_CollectionType_QueryURL', pyxb.binding.datatypes.string)
    __QueryURL._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2263, 8)
    __QueryURL._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2263, 8)
    
    QueryURL = property(__QueryURL.value, __QueryURL.set, None, '\n                    Query URL for search-based collections.\n                ')

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __ParentID.name() : __ParentID,
        __QueryURL.name() : __QueryURL
    })
_module_typeBindings.CollectionType = CollectionType
Namespace.addCategoryObject('typeBinding', 'CollectionType', CollectionType)


# Complex type {http://www.stibosystems.com/step}ColumnType with content type ELEMENT_ONLY
class ColumnType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}ColumnType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ColumnType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2271, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Origin uses Python identifier Origin
    __Origin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Origin'), 'Origin', '__httpwww_stibosystems_comstep_ColumnType_httpwww_stibosystems_comstepOrigin', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2273, 12), )

    
    Origin = property(__Origin.value, __Origin.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ProductOrigin uses Python identifier ProductOrigin
    __ProductOrigin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ProductOrigin'), 'ProductOrigin', '__httpwww_stibosystems_comstep_ColumnType_httpwww_stibosystems_comstepProductOrigin', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2274, 12), )

    
    ProductOrigin = property(__ProductOrigin.value, __ProductOrigin.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ClassificationOrigin uses Python identifier ClassificationOrigin
    __ClassificationOrigin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClassificationOrigin'), 'ClassificationOrigin', '__httpwww_stibosystems_comstep_ColumnType_httpwww_stibosystems_comstepClassificationOrigin', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2275, 12), )

    
    ClassificationOrigin = property(__ClassificationOrigin.value, __ClassificationOrigin.set, None, None)

    
    # Element {http://www.stibosystems.com/step}EntityOrigin uses Python identifier EntityOrigin
    __EntityOrigin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EntityOrigin'), 'EntityOrigin', '__httpwww_stibosystems_comstep_ColumnType_httpwww_stibosystems_comstepEntityOrigin', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2276, 12), )

    
    EntityOrigin = property(__EntityOrigin.value, __EntityOrigin.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AssetOrigin uses Python identifier AssetOrigin
    __AssetOrigin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssetOrigin'), 'AssetOrigin', '__httpwww_stibosystems_comstep_ColumnType_httpwww_stibosystems_comstepAssetOrigin', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2277, 12), )

    
    AssetOrigin = property(__AssetOrigin.value, __AssetOrigin.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeOrigin uses Python identifier AttributeOrigin
    __AttributeOrigin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeOrigin'), 'AttributeOrigin', '__httpwww_stibosystems_comstep_ColumnType_httpwww_stibosystems_comstepAttributeOrigin', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2278, 12), )

    
    AttributeOrigin = property(__AttributeOrigin.value, __AttributeOrigin.set, None, None)

    
    # Attribute ProcessFlag uses Python identifier ProcessFlag
    __ProcessFlag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ProcessFlag'), 'ProcessFlag', '__httpwww_stibosystems_comstep_ColumnType_ProcessFlag', pyxb.binding.datatypes.string)
    __ProcessFlag._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2280, 8)
    __ProcessFlag._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2280, 8)
    
    ProcessFlag = property(__ProcessFlag.value, __ProcessFlag.set, None, None)

    
    # Attribute BackgroundColor uses Python identifier BackgroundColor
    __BackgroundColor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'BackgroundColor'), 'BackgroundColor', '__httpwww_stibosystems_comstep_ColumnType_BackgroundColor', pyxb.binding.datatypes.string)
    __BackgroundColor._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2281, 8)
    __BackgroundColor._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2281, 8)
    
    BackgroundColor = property(__BackgroundColor.value, __BackgroundColor.set, None, None)

    
    # Attribute RuleRight uses Python identifier RuleRight
    __RuleRight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'RuleRight'), 'RuleRight', '__httpwww_stibosystems_comstep_ColumnType_RuleRight', pyxb.binding.datatypes.string)
    __RuleRight._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2282, 8)
    __RuleRight._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2282, 8)
    
    RuleRight = property(__RuleRight.value, __RuleRight.set, None, None)

    
    # Attribute RuleLeft uses Python identifier RuleLeft
    __RuleLeft = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'RuleLeft'), 'RuleLeft', '__httpwww_stibosystems_comstep_ColumnType_RuleLeft', pyxb.binding.datatypes.string)
    __RuleLeft._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2283, 8)
    __RuleLeft._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2283, 8)
    
    RuleLeft = property(__RuleLeft.value, __RuleLeft.set, None, None)

    
    # Attribute CellRotation uses Python identifier CellRotation
    __CellRotation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'CellRotation'), 'CellRotation', '__httpwww_stibosystems_comstep_ColumnType_CellRotation', pyxb.binding.datatypes.string)
    __CellRotation._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2284, 8)
    __CellRotation._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2284, 8)
    
    CellRotation = property(__CellRotation.value, __CellRotation.set, None, None)

    
    # Attribute TextStyle uses Python identifier TextStyle
    __TextStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TextStyle'), 'TextStyle', '__httpwww_stibosystems_comstep_ColumnType_TextStyle', pyxb.binding.datatypes.string)
    __TextStyle._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2285, 8)
    __TextStyle._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2285, 8)
    
    TextStyle = property(__TextStyle.value, __TextStyle.set, None, None)

    
    # Attribute VerticalAlignment uses Python identifier VerticalAlignment
    __VerticalAlignment = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'VerticalAlignment'), 'VerticalAlignment', '__httpwww_stibosystems_comstep_ColumnType_VerticalAlignment', pyxb.binding.datatypes.string)
    __VerticalAlignment._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2286, 8)
    __VerticalAlignment._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2286, 8)
    
    VerticalAlignment = property(__VerticalAlignment.value, __VerticalAlignment.set, None, None)

    
    # Attribute ColumnTypeID uses Python identifier ColumnTypeID
    __ColumnTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ColumnTypeID'), 'ColumnTypeID', '__httpwww_stibosystems_comstep_ColumnType_ColumnTypeID', _module_typeBindings.StepAttributeID)
    __ColumnTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2287, 8)
    __ColumnTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2287, 8)
    
    ColumnTypeID = property(__ColumnTypeID.value, __ColumnTypeID.set, None, None)

    
    # Attribute CellVerticalStoryDirection uses Python identifier CellVerticalStoryDirection
    __CellVerticalStoryDirection = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'CellVerticalStoryDirection'), 'CellVerticalStoryDirection', '__httpwww_stibosystems_comstep_ColumnType_CellVerticalStoryDirection', pyxb.binding.datatypes.string)
    __CellVerticalStoryDirection._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2288, 8)
    __CellVerticalStoryDirection._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2288, 8)
    
    CellVerticalStoryDirection = property(__CellVerticalStoryDirection.value, __CellVerticalStoryDirection.set, None, None)

    
    # Attribute CellImageScale uses Python identifier CellImageScale
    __CellImageScale = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'CellImageScale'), 'CellImageScale', '__httpwww_stibosystems_comstep_ColumnType_CellImageScale', pyxb.binding.datatypes.string)
    __CellImageScale._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2289, 8)
    __CellImageScale._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2289, 8)
    
    CellImageScale = property(__CellImageScale.value, __CellImageScale.set, None, None)

    
    # Attribute Width uses Python identifier Width
    __Width = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Width'), 'Width', '__httpwww_stibosystems_comstep_ColumnType_Width', pyxb.binding.datatypes.string)
    __Width._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2290, 8)
    __Width._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2290, 8)
    
    Width = property(__Width.value, __Width.set, None, None)

    _ElementMap.update({
        __Origin.name() : __Origin,
        __ProductOrigin.name() : __ProductOrigin,
        __ClassificationOrigin.name() : __ClassificationOrigin,
        __EntityOrigin.name() : __EntityOrigin,
        __AssetOrigin.name() : __AssetOrigin,
        __AttributeOrigin.name() : __AttributeOrigin
    })
    _AttributeMap.update({
        __ProcessFlag.name() : __ProcessFlag,
        __BackgroundColor.name() : __BackgroundColor,
        __RuleRight.name() : __RuleRight,
        __RuleLeft.name() : __RuleLeft,
        __CellRotation.name() : __CellRotation,
        __TextStyle.name() : __TextStyle,
        __VerticalAlignment.name() : __VerticalAlignment,
        __ColumnTypeID.name() : __ColumnTypeID,
        __CellVerticalStoryDirection.name() : __CellVerticalStoryDirection,
        __CellImageScale.name() : __CellImageScale,
        __Width.name() : __Width
    })
_module_typeBindings.ColumnType = ColumnType
Namespace.addCategoryObject('typeBinding', 'ColumnType', ColumnType)


# Complex type {http://www.stibosystems.com/step}ColumnTypeType with content type ELEMENT_ONLY
class ColumnTypeType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}ColumnTypeType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ColumnTypeType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2292, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_ColumnTypeType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2294, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}TableTypeLink uses Python identifier TableTypeLink
    __TableTypeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TableTypeLink'), 'TableTypeLink', '__httpwww_stibosystems_comstep_ColumnTypeType_httpwww_stibosystems_comstepTableTypeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2295, 12), )

    
    TableTypeLink = property(__TableTypeLink.value, __TableTypeLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}PublicationTypeValidity uses Python identifier PublicationTypeValidity
    __PublicationTypeValidity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PublicationTypeValidity'), 'PublicationTypeValidity', '__httpwww_stibosystems_comstep_ColumnTypeType_httpwww_stibosystems_comstepPublicationTypeValidity', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2296, 12), )

    
    PublicationTypeValidity = property(__PublicationTypeValidity.value, __PublicationTypeValidity.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_ColumnTypeType_ID', _module_typeBindings.StepAttributeID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2298, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2298, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute ParentID uses Python identifier ParentID
    __ParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ParentID'), 'ParentID', '__httpwww_stibosystems_comstep_ColumnTypeType_ParentID', _module_typeBindings.StepAttributeID)
    __ParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2299, 8)
    __ParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2299, 8)
    
    ParentID = property(__ParentID.value, __ParentID.set, None, None)

    
    # Attribute Width uses Python identifier Width
    __Width = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Width'), 'Width', '__httpwww_stibosystems_comstep_ColumnTypeType_Width', pyxb.binding.datatypes.decimal)
    __Width._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2300, 8)
    __Width._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2300, 8)
    
    Width = property(__Width.value, __Width.set, None, None)

    
    # Attribute WidthUnit uses Python identifier WidthUnit
    __WidthUnit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'WidthUnit'), 'WidthUnit', '__httpwww_stibosystems_comstep_ColumnTypeType_WidthUnit', pyxb.binding.datatypes.string)
    __WidthUnit._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2301, 8)
    __WidthUnit._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2301, 8)
    
    WidthUnit = property(__WidthUnit.value, __WidthUnit.set, None, None)

    
    # Attribute TextStyle uses Python identifier TextStyle
    __TextStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TextStyle'), 'TextStyle', '__httpwww_stibosystems_comstep_ColumnTypeType_TextStyle', pyxb.binding.datatypes.string)
    __TextStyle._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2302, 8)
    __TextStyle._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2302, 8)
    
    TextStyle = property(__TextStyle.value, __TextStyle.set, None, None)

    
    # Attribute BackgroundColor uses Python identifier BackgroundColor
    __BackgroundColor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'BackgroundColor'), 'BackgroundColor', '__httpwww_stibosystems_comstep_ColumnTypeType_BackgroundColor', pyxb.binding.datatypes.string)
    __BackgroundColor._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2303, 8)
    __BackgroundColor._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2303, 8)
    
    BackgroundColor = property(__BackgroundColor.value, __BackgroundColor.set, None, None)

    
    # Attribute VerticalAlignment uses Python identifier VerticalAlignment
    __VerticalAlignment = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'VerticalAlignment'), 'VerticalAlignment', '__httpwww_stibosystems_comstep_ColumnTypeType_VerticalAlignment', pyxb.binding.datatypes.string)
    __VerticalAlignment._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2304, 8)
    __VerticalAlignment._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2304, 8)
    
    VerticalAlignment = property(__VerticalAlignment.value, __VerticalAlignment.set, None, None)

    
    # Attribute RuleLeft uses Python identifier RuleLeft
    __RuleLeft = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'RuleLeft'), 'RuleLeft', '__httpwww_stibosystems_comstep_ColumnTypeType_RuleLeft', pyxb.binding.datatypes.string)
    __RuleLeft._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2305, 8)
    __RuleLeft._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2305, 8)
    
    RuleLeft = property(__RuleLeft.value, __RuleLeft.set, None, None)

    
    # Attribute RuleRight uses Python identifier RuleRight
    __RuleRight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'RuleRight'), 'RuleRight', '__httpwww_stibosystems_comstep_ColumnTypeType_RuleRight', pyxb.binding.datatypes.string)
    __RuleRight._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2306, 8)
    __RuleRight._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2306, 8)
    
    RuleRight = property(__RuleRight.value, __RuleRight.set, None, None)

    
    # Attribute CellRotation uses Python identifier CellRotation
    __CellRotation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'CellRotation'), 'CellRotation', '__httpwww_stibosystems_comstep_ColumnTypeType_CellRotation', pyxb.binding.datatypes.string)
    __CellRotation._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2307, 8)
    __CellRotation._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2307, 8)
    
    CellRotation = property(__CellRotation.value, __CellRotation.set, None, None)

    
    # Attribute ProcessFlag uses Python identifier ProcessFlag
    __ProcessFlag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ProcessFlag'), 'ProcessFlag', '__httpwww_stibosystems_comstep_ColumnTypeType_ProcessFlag', pyxb.binding.datatypes.string)
    __ProcessFlag._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2308, 8)
    __ProcessFlag._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2308, 8)
    
    ProcessFlag = property(__ProcessFlag.value, __ProcessFlag.set, None, None)

    
    # Attribute CellVerticalStoryDirection uses Python identifier CellVerticalStoryDirection
    __CellVerticalStoryDirection = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'CellVerticalStoryDirection'), 'CellVerticalStoryDirection', '__httpwww_stibosystems_comstep_ColumnTypeType_CellVerticalStoryDirection', pyxb.binding.datatypes.string)
    __CellVerticalStoryDirection._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2309, 8)
    __CellVerticalStoryDirection._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2309, 8)
    
    CellVerticalStoryDirection = property(__CellVerticalStoryDirection.value, __CellVerticalStoryDirection.set, None, None)

    
    # Attribute CellImageScale uses Python identifier CellImageScale
    __CellImageScale = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'CellImageScale'), 'CellImageScale', '__httpwww_stibosystems_comstep_ColumnTypeType_CellImageScale', pyxb.binding.datatypes.string)
    __CellImageScale._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2310, 8)
    __CellImageScale._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2310, 8)
    
    CellImageScale = property(__CellImageScale.value, __CellImageScale.set, None, None)

    
    # Attribute HeadingLevel uses Python identifier HeadingLevel
    __HeadingLevel = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'HeadingLevel'), 'HeadingLevel', '__httpwww_stibosystems_comstep_ColumnTypeType_HeadingLevel', pyxb.binding.datatypes.integer)
    __HeadingLevel._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2311, 8)
    __HeadingLevel._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2311, 8)
    
    HeadingLevel = property(__HeadingLevel.value, __HeadingLevel.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_ColumnTypeType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2312, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2312, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_ColumnTypeType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2313, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2313, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_ColumnTypeType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2314, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2314, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __TableTypeLink.name() : __TableTypeLink,
        __PublicationTypeValidity.name() : __PublicationTypeValidity
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __ParentID.name() : __ParentID,
        __Width.name() : __Width,
        __WidthUnit.name() : __WidthUnit,
        __TextStyle.name() : __TextStyle,
        __BackgroundColor.name() : __BackgroundColor,
        __VerticalAlignment.name() : __VerticalAlignment,
        __RuleLeft.name() : __RuleLeft,
        __RuleRight.name() : __RuleRight,
        __CellRotation.name() : __CellRotation,
        __ProcessFlag.name() : __ProcessFlag,
        __CellVerticalStoryDirection.name() : __CellVerticalStoryDirection,
        __CellImageScale.name() : __CellImageScale,
        __HeadingLevel.name() : __HeadingLevel,
        __Referenced.name() : __Referenced,
        __Selected.name() : __Selected,
        __Changed.name() : __Changed
    })
_module_typeBindings.ColumnTypeType = ColumnTypeType
Namespace.addCategoryObject('typeBinding', 'ColumnTypeType', ColumnTypeType)


# Complex type {http://www.stibosystems.com/step}CommercialListType with content type ELEMENT_ONLY
class CommercialListType (pyxb.binding.basis.complexTypeDefinition):
    """
                A commercial list definition.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CommercialListType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2321, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_CommercialListType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2328, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_CommercialListType_httpwww_stibosystems_comstepMetaData', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2329, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_CommercialListType_ID', _module_typeBindings.StepTermsListID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2331, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2331, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    ID of the termslist.\n                ')

    
    # Attribute UserTypeID uses Python identifier UserTypeID
    __UserTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserTypeID'), 'UserTypeID', '__httpwww_stibosystems_comstep_CommercialListType_UserTypeID', _module_typeBindings.StepObjectTypeID)
    __UserTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2338, 8)
    __UserTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2338, 8)
    
    UserTypeID = property(__UserTypeID.value, __UserTypeID.set, None, '\n                    Determines what kind of commercial list this list is (price, etc.).\n                ')

    
    # Attribute ImportConfigurationID uses Python identifier ImportConfigurationID
    __ImportConfigurationID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ImportConfigurationID'), 'ImportConfigurationID', '__httpwww_stibosystems_comstep_CommercialListType_ImportConfigurationID', _module_typeBindings.StepAssetID)
    __ImportConfigurationID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2345, 8)
    __ImportConfigurationID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2345, 8)
    
    ImportConfigurationID = property(__ImportConfigurationID.value, __ImportConfigurationID.set, None, '\n                    Links to the import configuration used to import data to this commercial list.\n                ')

    
    # Attribute ExpiryDate uses Python identifier ExpiryDate
    __ExpiryDate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ExpiryDate'), 'ExpiryDate', '__httpwww_stibosystems_comstep_CommercialListType_ExpiryDate', pyxb.binding.datatypes.string)
    __ExpiryDate._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2352, 8)
    __ExpiryDate._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2352, 8)
    
    ExpiryDate = property(__ExpiryDate.value, __ExpiryDate.set, None, '\n                    Expiry date of the content in this list.\n                ')

    
    # Attribute UnitID uses Python identifier UnitID
    __UnitID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UnitID'), 'UnitID', '__httpwww_stibosystems_comstep_CommercialListType_UnitID', _module_typeBindings.StepUnitID)
    __UnitID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2359, 8)
    __UnitID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2359, 8)
    
    UnitID = property(__UnitID.value, __UnitID.set, None, '\n                    The currency of price lists.\n                ')

    
    # Attribute DefaultEndDate uses Python identifier DefaultEndDate
    __DefaultEndDate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DefaultEndDate'), 'DefaultEndDate', '__httpwww_stibosystems_comstep_CommercialListType_DefaultEndDate', pyxb.binding.datatypes.string)
    __DefaultEndDate._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2366, 8)
    __DefaultEndDate._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2366, 8)
    
    DefaultEndDate = property(__DefaultEndDate.value, __DefaultEndDate.set, None, '\n                    The default end date for new commercial content stored into this list.\n                ')

    
    # Attribute DefaultStartDate uses Python identifier DefaultStartDate
    __DefaultStartDate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DefaultStartDate'), 'DefaultStartDate', '__httpwww_stibosystems_comstep_CommercialListType_DefaultStartDate', pyxb.binding.datatypes.string)
    __DefaultStartDate._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2373, 8)
    __DefaultStartDate._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2373, 8)
    
    DefaultStartDate = property(__DefaultStartDate.value, __DefaultStartDate.set, None, '\n                    The default start date for new commercial content stored into this list.\n                ')

    
    # Attribute Immutable uses Python identifier Immutable
    __Immutable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Immutable'), 'Immutable', '__httpwww_stibosystems_comstep_CommercialListType_Immutable', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Immutable._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2380, 8)
    __Immutable._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2380, 8)
    
    Immutable = property(__Immutable.value, __Immutable.set, None, '\n                    Whether or not this commercial list is immutable.\n                ')

    
    # Attribute ActAsSelectionList uses Python identifier ActAsSelectionList
    __ActAsSelectionList = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ActAsSelectionList'), 'ActAsSelectionList', '__httpwww_stibosystems_comstep_CommercialListType_ActAsSelectionList', pyxb.binding.datatypes.boolean, unicode_default='false')
    __ActAsSelectionList._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2387, 8)
    __ActAsSelectionList._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2387, 8)
    
    ActAsSelectionList = property(__ActAsSelectionList.value, __ActAsSelectionList.set, None, '\n                    Whether or not this commercial list should act as selection list in eCatalog.\n                ')

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __UserTypeID.name() : __UserTypeID,
        __ImportConfigurationID.name() : __ImportConfigurationID,
        __ExpiryDate.name() : __ExpiryDate,
        __UnitID.name() : __UnitID,
        __DefaultEndDate.name() : __DefaultEndDate,
        __DefaultStartDate.name() : __DefaultStartDate,
        __Immutable.name() : __Immutable,
        __ActAsSelectionList.name() : __ActAsSelectionList
    })
_module_typeBindings.CommercialListType = CommercialListType
Namespace.addCategoryObject('typeBinding', 'CommercialListType', CommercialListType)


# Complex type {http://www.stibosystems.com/step}ContextCrossReferenceType with content type ELEMENT_ONLY
class ContextCrossReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}ContextCrossReferenceType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ContextCrossReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2395, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_ContextCrossReferenceType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2397, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_ContextCrossReferenceType_Type', _module_typeBindings.StepLinkTypeID, required=True)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2399, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2399, 8)
    
    Type = property(__Type.value, __Type.set, None, None)

    
    # Attribute ContextID uses Python identifier ContextID
    __ContextID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ContextID'), 'ContextID', '__httpwww_stibosystems_comstep_ContextCrossReferenceType_ContextID', _module_typeBindings.StepQualifierID, required=True)
    __ContextID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2400, 8)
    __ContextID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2400, 8)
    
    ContextID = property(__ContextID.value, __ContextID.set, None, None)

    
    # Attribute AnalyzerResult uses Python identifier AnalyzerResult
    __AnalyzerResult = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AnalyzerResult'), 'AnalyzerResult', '__httpwww_stibosystems_comstep_ContextCrossReferenceType_AnalyzerResult', pyxb.binding.datatypes.string)
    __AnalyzerResult._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2401, 8)
    __AnalyzerResult._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2401, 8)
    
    AnalyzerResult = property(__AnalyzerResult.value, __AnalyzerResult.set, None, '\n                    @Deprecated, to be removed in a future release.\n                ')

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_ContextCrossReferenceType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2408, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2408, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_ContextCrossReferenceType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2409, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2409, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, None)

    
    # Attribute Inherited uses Python identifier Inherited
    __Inherited = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Inherited'), 'Inherited', '__httpwww_stibosystems_comstep_ContextCrossReferenceType_Inherited', pyxb.binding.datatypes.integer)
    __Inherited._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2410, 8)
    __Inherited._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2410, 8)
    
    Inherited = property(__Inherited.value, __Inherited.set, None, '\n                    Only relevant during export when nested inside a partial hierarchy. If present during import,\n                    the link is simply ignored. If this attribute is present then link is inherited. Will not\n                    be exported for local links (thus only numbers 1 and upward will be exported - 1 indicating\n                    inherited from immediate parent).\n                    The integer value of this attribute indicates how far up this link is inherited from.\n                    In cross context exports it might be relevant to have this number to find the most relevant link\n                    for a given context.\n                    NOTE: will only inherit inside hierarchy of equal node types - ie. will not inherit from\n                    classification to product hierarchy.\n                ')

    _ElementMap.update({
        __MetaData.name() : __MetaData
    })
    _AttributeMap.update({
        __Type.name() : __Type,
        __ContextID.name() : __ContextID,
        __AnalyzerResult.name() : __AnalyzerResult,
        __Changed.name() : __Changed,
        __QualifierID.name() : __QualifierID,
        __Inherited.name() : __Inherited
    })
_module_typeBindings.ContextCrossReferenceType = ContextCrossReferenceType
Namespace.addCategoryObject('typeBinding', 'ContextCrossReferenceType', ContextCrossReferenceType)


# Complex type {http://www.stibosystems.com/step}ContextCrossReferenceTypeType with content type ELEMENT_ONLY
class ContextCrossReferenceTypeType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}ContextCrossReferenceTypeType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ContextCrossReferenceTypeType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2426, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_ContextCrossReferenceTypeType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2428, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_ContextCrossReferenceTypeType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2429, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeLink uses Python identifier AttributeLink
    __AttributeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink'), 'AttributeLink', '__httpwww_stibosystems_comstep_ContextCrossReferenceTypeType_httpwww_stibosystems_comstepAttributeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2430, 12), )

    
    AttributeLink = property(__AttributeLink.value, __AttributeLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DimensionLink uses Python identifier DimensionLink
    __DimensionLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink'), 'DimensionLink', '__httpwww_stibosystems_comstep_ContextCrossReferenceTypeType_httpwww_stibosystems_comstepDimensionLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2431, 12), )

    
    DimensionLink = property(__DimensionLink.value, __DimensionLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeGroupLink uses Python identifier AttributeGroupLink
    __AttributeGroupLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), 'AttributeGroupLink', '__httpwww_stibosystems_comstep_ContextCrossReferenceTypeType_httpwww_stibosystems_comstepAttributeGroupLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2432, 12), )

    
    AttributeGroupLink = property(__AttributeGroupLink.value, __AttributeGroupLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}UserTypeLink uses Python identifier UserTypeLink
    __UserTypeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink'), 'UserTypeLink', '__httpwww_stibosystems_comstep_ContextCrossReferenceTypeType_httpwww_stibosystems_comstepUserTypeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2433, 12), )

    
    UserTypeLink = property(__UserTypeLink.value, __UserTypeLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}TargetUserTypeLink uses Python identifier TargetUserTypeLink
    __TargetUserTypeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TargetUserTypeLink'), 'TargetUserTypeLink', '__httpwww_stibosystems_comstep_ContextCrossReferenceTypeType_httpwww_stibosystems_comstepTargetUserTypeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2434, 12), )

    
    TargetUserTypeLink = property(__TargetUserTypeLink.value, __TargetUserTypeLink.set, None, None)

    
    # Attribute Inherited uses Python identifier Inherited
    __Inherited = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Inherited'), 'Inherited', '__httpwww_stibosystems_comstep_ContextCrossReferenceTypeType_Inherited', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Inherited._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2436, 8)
    __Inherited._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2436, 8)
    
    Inherited = property(__Inherited.value, __Inherited.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_ContextCrossReferenceTypeType_ID', _module_typeBindings.StepLinkTypeID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2437, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2437, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute Revised uses Python identifier Revised
    __Revised = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Revised'), 'Revised', '__httpwww_stibosystems_comstep_ContextCrossReferenceTypeType_Revised', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Revised._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2438, 8)
    __Revised._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2438, 8)
    
    Revised = property(__Revised.value, __Revised.set, None, None)

    
    # Attribute Completeness uses Python identifier Completeness
    __Completeness = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Completeness'), 'Completeness', '__httpwww_stibosystems_comstep_ContextCrossReferenceTypeType_Completeness', pyxb.binding.datatypes.string)
    __Completeness._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2439, 8)
    __Completeness._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2439, 8)
    
    Completeness = property(__Completeness.value, __Completeness.set, None, '\n                    @Deprecated, not used anymore after the introduction of Completeness Metrics in STEP 7.4 (see\n                    documentation on Completeness Metrics and migration from old pre-7.4 completeness functionality).\n                ')

    
    # Attribute MultiValued uses Python identifier MultiValued
    __MultiValued = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MultiValued'), 'MultiValued', '__httpwww_stibosystems_comstep_ContextCrossReferenceTypeType_MultiValued', pyxb.binding.datatypes.boolean, unicode_default='true')
    __MultiValued._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2447, 8)
    __MultiValued._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2447, 8)
    
    MultiValued = property(__MultiValued.value, __MultiValued.set, None, None)

    
    # Attribute Mandatory uses Python identifier Mandatory
    __Mandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Mandatory'), 'Mandatory', '__httpwww_stibosystems_comstep_ContextCrossReferenceTypeType_Mandatory', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Mandatory._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2448, 8)
    __Mandatory._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2448, 8)
    
    Mandatory = property(__Mandatory.value, __Mandatory.set, None, None)

    
    # Attribute Accumulated uses Python identifier Accumulated
    __Accumulated = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Accumulated'), 'Accumulated', '__httpwww_stibosystems_comstep_ContextCrossReferenceTypeType_Accumulated', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Accumulated._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2449, 8)
    __Accumulated._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2449, 8)
    
    Accumulated = property(__Accumulated.value, __Accumulated.set, None, None)

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_ContextCrossReferenceTypeType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2450, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2450, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_ContextCrossReferenceTypeType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2451, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2451, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_ContextCrossReferenceTypeType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2452, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2452, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __AttributeLink.name() : __AttributeLink,
        __DimensionLink.name() : __DimensionLink,
        __AttributeGroupLink.name() : __AttributeGroupLink,
        __UserTypeLink.name() : __UserTypeLink,
        __TargetUserTypeLink.name() : __TargetUserTypeLink
    })
    _AttributeMap.update({
        __Inherited.name() : __Inherited,
        __ID.name() : __ID,
        __Revised.name() : __Revised,
        __Completeness.name() : __Completeness,
        __MultiValued.name() : __MultiValued,
        __Mandatory.name() : __Mandatory,
        __Accumulated.name() : __Accumulated,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed
    })
_module_typeBindings.ContextCrossReferenceTypeType = ContextCrossReferenceTypeType
Namespace.addCategoryObject('typeBinding', 'ContextCrossReferenceTypeType', ContextCrossReferenceTypeType)


# Complex type {http://www.stibosystems.com/step}ContextType with content type ELEMENT_ONLY
class ContextType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a context.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ContextType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2454, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_ContextType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2461, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DimensionPointLink uses Python identifier DimensionPointLink
    __DimensionPointLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DimensionPointLink'), 'DimensionPointLink', '__httpwww_stibosystems_comstep_ContextType_httpwww_stibosystems_comstepDimensionPointLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2462, 12), )

    
    DimensionPointLink = property(__DimensionPointLink.value, __DimensionPointLink.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_ContextType_ID', _module_typeBindings.StepQualifierID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2464, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2464, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    ID of the context.\n                ')

    
    # Attribute Priority uses Python identifier Priority
    __Priority = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Priority'), 'Priority', '__httpwww_stibosystems_comstep_ContextType_Priority', pyxb.binding.datatypes.string, unicode_default='0')
    __Priority._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2471, 8)
    __Priority._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2471, 8)
    
    Priority = property(__Priority.value, __Priority.set, None, '\n                    Cross-context priority.\n                ')

    
    # Attribute Locale uses Python identifier Locale
    __Locale = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Locale'), 'Locale', '__httpwww_stibosystems_comstep_ContextType_Locale', pyxb.binding.datatypes.string)
    __Locale._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2478, 8)
    __Locale._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2478, 8)
    
    Locale = property(__Locale.value, __Locale.set, None, '\n                    The locale stored for this context.\n                ')

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_ContextType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2485, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2485, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_ContextType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2486, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2486, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_ContextType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2487, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2487, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    
    # Attribute Deleted uses Python identifier Deleted
    __Deleted = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Deleted'), 'Deleted', '__httpwww_stibosystems_comstep_ContextType_Deleted', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Deleted._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2488, 8)
    __Deleted._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2488, 8)
    
    Deleted = property(__Deleted.value, __Deleted.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __DimensionPointLink.name() : __DimensionPointLink
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __Priority.name() : __Priority,
        __Locale.name() : __Locale,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed,
        __Deleted.name() : __Deleted
    })
_module_typeBindings.ContextType = ContextType
Namespace.addCategoryObject('typeBinding', 'ContextType', ContextType)


# Complex type {http://www.stibosystems.com/step}ContextLinkType with content type EMPTY
class ContextLinkType (pyxb.binding.basis.complexTypeDefinition):
    """
                A link to a context.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ContextLinkType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2527, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ContextID uses Python identifier ContextID
    __ContextID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ContextID'), 'ContextID', '__httpwww_stibosystems_comstep_ContextLinkType_ContextID', _module_typeBindings.StepQualifierID, required=True)
    __ContextID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2533, 8)
    __ContextID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2533, 8)
    
    ContextID = property(__ContextID.value, __ContextID.set, None, '\n                    The ID of the context.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ContextID.name() : __ContextID
    })
_module_typeBindings.ContextLinkType = ContextLinkType
Namespace.addCategoryObject('typeBinding', 'ContextLinkType', ContextLinkType)


# Complex type {http://www.stibosystems.com/step}DataContainerTypeLinkType with content type EMPTY
class DataContainerTypeLinkType (pyxb.binding.basis.complexTypeDefinition):
    """
                The DataContainerTypeLink element links a data container type into a classification or a product.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DataContainerTypeLinkType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2608, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_DataContainerTypeLinkType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2614, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2614, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    
    # Attribute Inherited uses Python identifier Inherited
    __Inherited = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Inherited'), 'Inherited', '__httpwww_stibosystems_comstep_DataContainerTypeLinkType_Inherited', pyxb.binding.datatypes.integer)
    __Inherited._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2616, 8)
    __Inherited._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2616, 8)
    
    Inherited = property(__Inherited.value, __Inherited.set, None, '\n                    Only relevant during export when nested inside a product or classification. If present during import,\n                    the link is simply ignored. If this attribute is present then link is inherited. Will not\n                    be exported for local links (thus only numbers 1 and upward will be exported - 1 indicating\n                    inherited from immediate parent).\n                    The integer value of this attribute indicates how far up this link is inherited from.\n                    In cross context exports it might be relevant to have this number to find the most relevant link\n                    for a given context.\n                    NOTE: will only inherit inside hierarchy of same equal node types - ie. will not inherit from\n                    classification to product hierarchy.\n                ')

    
    # Attribute DataContainerTypeID uses Python identifier DataContainerTypeID
    __DataContainerTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DataContainerTypeID'), 'DataContainerTypeID', '__httpwww_stibosystems_comstep_DataContainerTypeLinkType_DataContainerTypeID', _module_typeBindings.StepDataContainerTypeID, required=True)
    __DataContainerTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2631, 8)
    __DataContainerTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2631, 8)
    
    DataContainerTypeID = property(__DataContainerTypeID.value, __DataContainerTypeID.set, None, '\n                    The ID of the data container type.\n                ')

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_DataContainerTypeLinkType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2638, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2638, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Changed.name() : __Changed,
        __Inherited.name() : __Inherited,
        __DataContainerTypeID.name() : __DataContainerTypeID,
        __Referenced.name() : __Referenced
    })
_module_typeBindings.DataContainerTypeLinkType = DataContainerTypeLinkType
Namespace.addCategoryObject('typeBinding', 'DataContainerTypeLinkType', DataContainerTypeLinkType)


# Complex type {http://www.stibosystems.com/step}DataContainerTypeType with content type ELEMENT_ONLY
class DataContainerTypeType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a data container type.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DataContainerTypeType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2650, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_DataContainerTypeType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2657, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_DataContainerTypeType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2658, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeGroupLink uses Python identifier AttributeGroupLink
    __AttributeGroupLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), 'AttributeGroupLink', '__httpwww_stibosystems_comstep_DataContainerTypeType_httpwww_stibosystems_comstepAttributeGroupLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2659, 12), )

    
    AttributeGroupLink = property(__AttributeGroupLink.value, __AttributeGroupLink.set, None, '\n                        Link to the parent attribute group.\n                    ')

    
    # Element {http://www.stibosystems.com/step}AttributeLink uses Python identifier AttributeLink
    __AttributeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink'), 'AttributeLink', '__httpwww_stibosystems_comstep_DataContainerTypeType_httpwww_stibosystems_comstepAttributeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2666, 12), )

    
    AttributeLink = property(__AttributeLink.value, __AttributeLink.set, None, '\n                        Link to an attribute which is valid for this data container type.\n                    ')

    
    # Element {http://www.stibosystems.com/step}UserTypeLink uses Python identifier UserTypeLink
    __UserTypeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink'), 'UserTypeLink', '__httpwww_stibosystems_comstep_DataContainerTypeType_httpwww_stibosystems_comstepUserTypeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2673, 12), )

    
    UserTypeLink = property(__UserTypeLink.value, __UserTypeLink.set, None, '\n                        Link to an object type for which this data container type is valid.\n                    ')

    
    # Element {http://www.stibosystems.com/step}KeyDefinition uses Python identifier KeyDefinition
    __KeyDefinition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyDefinition'), 'KeyDefinition', '__httpwww_stibosystems_comstep_DataContainerTypeType_httpwww_stibosystems_comstepKeyDefinition', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2680, 12), )

    
    KeyDefinition = property(__KeyDefinition.value, __KeyDefinition.set, None, '\n                        Key definition of the data container type.\n                    ')

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_DataContainerTypeType_ID', _module_typeBindings.StepDataContainerTypeID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2688, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2688, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    The STEP ID. Not required for creation if auto IDs are configured for the object type.\n                ')

    
    # Attribute IDPattern uses Python identifier IDPattern
    __IDPattern = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IDPattern'), 'IDPattern', '__httpwww_stibosystems_comstep_DataContainerTypeType_IDPattern', pyxb.binding.datatypes.string)
    __IDPattern._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2695, 8)
    __IDPattern._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2695, 8)
    
    IDPattern = property(__IDPattern.value, __IDPattern.set, None, '\n                    The auto ID pattern for data container objects of this type.\n                ')

    
    # Attribute MultiValued uses Python identifier MultiValued
    __MultiValued = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MultiValued'), 'MultiValued', '__httpwww_stibosystems_comstep_DataContainerTypeType_MultiValued', pyxb.binding.datatypes.boolean)
    __MultiValued._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2702, 8)
    __MultiValued._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2702, 8)
    
    MultiValued = property(__MultiValued.value, __MultiValued.set, None, '\n                    Whether there can be more than one data container object of this type for each entity/product.\n                    Defaults to "false" if not supplied for creation.\n                ')

    
    # Attribute Inherited uses Python identifier Inherited
    __Inherited = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Inherited'), 'Inherited', '__httpwww_stibosystems_comstep_DataContainerTypeType_Inherited', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Inherited._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2710, 8)
    __Inherited._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2710, 8)
    
    Inherited = property(__Inherited.value, __Inherited.set, None, '\n                    Whether data container objects of this type should be hierarchically inherited.\n                    The inheritance feature is not available for data container types valid for entities.\n                ')

    
    # Attribute Restricted uses Python identifier Restricted
    __Restricted = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Restricted'), 'Restricted', '__httpwww_stibosystems_comstep_DataContainerTypeType_Restricted', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Restricted._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2718, 8)
    __Restricted._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2718, 8)
    
    Restricted = property(__Restricted.value, __Restricted.set, None, '\n                    Whether this type is restricted to certain branches of the product hierarchy or not.\n                    Feature not available for data container types valid for entities.\n                ')

    
    # Attribute Mandatory uses Python identifier Mandatory
    __Mandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Mandatory'), 'Mandatory', '__httpwww_stibosystems_comstep_DataContainerTypeType_Mandatory', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Mandatory._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2726, 8)
    __Mandatory._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2726, 8)
    
    Mandatory = property(__Mandatory.value, __Mandatory.set, None, '\n                    Whether the type is mandatory for approval or not.\n                ')

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_DataContainerTypeType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2733, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2733, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_DataContainerTypeType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2734, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2734, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_DataContainerTypeType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2735, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2735, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __AttributeGroupLink.name() : __AttributeGroupLink,
        __AttributeLink.name() : __AttributeLink,
        __UserTypeLink.name() : __UserTypeLink,
        __KeyDefinition.name() : __KeyDefinition
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __IDPattern.name() : __IDPattern,
        __MultiValued.name() : __MultiValued,
        __Inherited.name() : __Inherited,
        __Restricted.name() : __Restricted,
        __Mandatory.name() : __Mandatory,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed
    })
_module_typeBindings.DataContainerTypeType = DataContainerTypeType
Namespace.addCategoryObject('typeBinding', 'DataContainerTypeType', DataContainerTypeType)


# Complex type {http://www.stibosystems.com/step}DeletedLinkTypeType with content type EMPTY
class DeletedLinkTypeType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}DeletedLinkTypeType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeletedLinkTypeType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2737, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_DeletedLinkTypeType_ID', _module_typeBindings.StepLinkTypeID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2738, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2738, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute Deleted uses Python identifier Deleted
    __Deleted = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Deleted'), 'Deleted', '__httpwww_stibosystems_comstep_DeletedLinkTypeType_Deleted', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Deleted._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2739, 8)
    __Deleted._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2739, 8)
    
    Deleted = property(__Deleted.value, __Deleted.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __Deleted.name() : __Deleted
    })
_module_typeBindings.DeletedLinkTypeType = DeletedLinkTypeType
Namespace.addCategoryObject('typeBinding', 'DeletedLinkTypeType', DeletedLinkTypeType)


# Complex type {http://www.stibosystems.com/step}DeleteAssetCrossReferenceType with content type ELEMENT_ONLY
class DeleteAssetCrossReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """
                For exports this element informs downstream systems that a reference to an asset has been deleted for
                the containing object in the publishing workspace. Only present when the STEPXML has been produced by an
                event based outbound integration endpoint that uses the "Advanced STEPXML" format plugin with the
                'ExportDeletedData="true"' instruction in the output template.
                Ignored on import.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteAssetCrossReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2741, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_DeleteAssetCrossReferenceType_httpwww_stibosystems_comstepKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2752, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_DeleteAssetCrossReferenceType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2753, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_DeleteAssetCrossReferenceType_Type', _module_typeBindings.StepLinkTypeID)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2755, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2755, 8)
    
    Type = property(__Type.value, __Type.set, None, None)

    
    # Attribute AssetID uses Python identifier AssetID
    __AssetID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AssetID'), 'AssetID', '__httpwww_stibosystems_comstep_DeleteAssetCrossReferenceType_AssetID', _module_typeBindings.StepAssetID, required=True)
    __AssetID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2756, 8)
    __AssetID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2756, 8)
    
    AssetID = property(__AssetID.value, __AssetID.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_DeleteAssetCrossReferenceType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2757, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2757, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_DeleteAssetCrossReferenceType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2758, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2758, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __KeyValue.name() : __KeyValue,
        __MetaData.name() : __MetaData
    })
    _AttributeMap.update({
        __Type.name() : __Type,
        __AssetID.name() : __AssetID,
        __QualifierID.name() : __QualifierID,
        __Changed.name() : __Changed
    })
_module_typeBindings.DeleteAssetCrossReferenceType = DeleteAssetCrossReferenceType
Namespace.addCategoryObject('typeBinding', 'DeleteAssetCrossReferenceType', DeleteAssetCrossReferenceType)


# Complex type {http://www.stibosystems.com/step}DeleteAssetType with content type ELEMENT_ONLY
class DeleteAssetType (pyxb.binding.basis.complexTypeDefinition):
    """
                For exports this element informs downstream systems that an asset has been deleted from the publishing
                workspace. Only present when the STEPXML has been produced by an event based outbound integration
                endpoint that uses the "Advanced STEPXML" format plugin with the '' instruction
                in the output template.
                Can for imports be used to move an asset to the recycle bin.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteAssetType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2760, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_DeleteAssetType_httpwww_stibosystems_comstepKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2771, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_DeleteAssetType_ID', _module_typeBindings.StepAssetID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2773, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2773, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    ID of the asset that has been deleted / is to be deleted. Required for imports if no KeyValue is\n                    supplied.\n                ')

    _ElementMap.update({
        __KeyValue.name() : __KeyValue
    })
    _AttributeMap.update({
        __ID.name() : __ID
    })
_module_typeBindings.DeleteAssetType = DeleteAssetType
Namespace.addCategoryObject('typeBinding', 'DeleteAssetType', DeleteAssetType)


# Complex type {http://www.stibosystems.com/step}DeleteAttributeLinkType with content type EMPTY
class DeleteAttributeLinkType (pyxb.binding.basis.complexTypeDefinition):
    """
                For exports this element informs downstream systems that a link to an attribute has been deleted for
                the containing object in the publishing workspace. Only present when the STEPXML has been produced by an
                event based outbound integration endpoint that uses the "Advanced STEPXML" format plugin with the
                'ExportDeletedData="true"' instruction in the output template.
                Ignored on import.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteAttributeLinkType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2792, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute AttributeID uses Python identifier AttributeID
    __AttributeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AttributeID'), 'AttributeID', '__httpwww_stibosystems_comstep_DeleteAttributeLinkType_AttributeID', _module_typeBindings.StepAttributeID, required=True)
    __AttributeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2802, 8)
    __AttributeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2802, 8)
    
    AttributeID = property(__AttributeID.value, __AttributeID.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_DeleteAttributeLinkType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2803, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2803, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __AttributeID.name() : __AttributeID,
        __Changed.name() : __Changed
    })
_module_typeBindings.DeleteAttributeLinkType = DeleteAttributeLinkType
Namespace.addCategoryObject('typeBinding', 'DeleteAttributeLinkType', DeleteAttributeLinkType)


# Complex type {http://www.stibosystems.com/step}DeleteAttributeOrGroupType with content type EMPTY
class DeleteAttributeOrGroupType (pyxb.binding.basis.complexTypeDefinition):
    """
                For exports this element informs downstream systems that an attribute or attribute group has been
                deleted. Only present when the STEPXML has been produced by an event based outbound integration endpoint
                that uses the "Advanced STEPXML" format plugin with the '' instruction in the output
                template.
                Ignored on import.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteAttributeOrGroupType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2805, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_DeleteAttributeOrGroupType_ID', _module_typeBindings.StepAttributeID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2815, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2815, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ID.name() : __ID
    })
_module_typeBindings.DeleteAttributeOrGroupType = DeleteAttributeOrGroupType
Namespace.addCategoryObject('typeBinding', 'DeleteAttributeOrGroupType', DeleteAttributeOrGroupType)


# Complex type {http://www.stibosystems.com/step}DeleteAttributeType with content type EMPTY
class DeleteAttributeType (pyxb.binding.basis.complexTypeDefinition):
    """
                This element allows deleting attributes by ID. Note that it is currently only used in imports. For
                exports, see "DeleteAttributeOrGroup".

                In case the attribute to delete is in use (has values), the deletion will fail. In order to forcefully
                delete the attribute the "Force" attribute can be set to true. This will result in all the attribute's
                values getting deleted as well.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteAttributeType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2817, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_DeleteAttributeType_ID', _module_typeBindings.StepAttributeID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2828, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2828, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute Force uses Python identifier Force
    __Force = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Force'), 'Force', '__httpwww_stibosystems_comstep_DeleteAttributeType_Force', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Force._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2829, 8)
    __Force._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2829, 8)
    
    Force = property(__Force.value, __Force.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __Force.name() : __Force
    })
_module_typeBindings.DeleteAttributeType = DeleteAttributeType
Namespace.addCategoryObject('typeBinding', 'DeleteAttributeType', DeleteAttributeType)


# Complex type {http://www.stibosystems.com/step}DeleteClassificationCrossReferenceType with content type ELEMENT_ONLY
class DeleteClassificationCrossReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """
                For exports this element informs downstream systems that a reference to an classification has been
                deleted for the containing object in the publishing workspace. Only present when the STEPXML has been
                produced by an event based outbound integration endpoint that uses the "Advanced STEPXML" format plugin
                with the 'ExportDeletedData="true"' instruction in the output template.
                Ignored on import.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteClassificationCrossReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2844, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_DeleteClassificationCrossReferenceType_httpwww_stibosystems_comstepKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2855, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_DeleteClassificationCrossReferenceType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2856, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_DeleteClassificationCrossReferenceType_Type', _module_typeBindings.StepLinkTypeID)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2858, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2858, 8)
    
    Type = property(__Type.value, __Type.set, None, None)

    
    # Attribute ClassificationID uses Python identifier ClassificationID
    __ClassificationID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ClassificationID'), 'ClassificationID', '__httpwww_stibosystems_comstep_DeleteClassificationCrossReferenceType_ClassificationID', _module_typeBindings.StepClassificationID, required=True)
    __ClassificationID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2859, 8)
    __ClassificationID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2859, 8)
    
    ClassificationID = property(__ClassificationID.value, __ClassificationID.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_DeleteClassificationCrossReferenceType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2860, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2860, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_DeleteClassificationCrossReferenceType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2861, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2861, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __KeyValue.name() : __KeyValue,
        __MetaData.name() : __MetaData
    })
    _AttributeMap.update({
        __Type.name() : __Type,
        __ClassificationID.name() : __ClassificationID,
        __QualifierID.name() : __QualifierID,
        __Changed.name() : __Changed
    })
_module_typeBindings.DeleteClassificationCrossReferenceType = DeleteClassificationCrossReferenceType
Namespace.addCategoryObject('typeBinding', 'DeleteClassificationCrossReferenceType', DeleteClassificationCrossReferenceType)


# Complex type {http://www.stibosystems.com/step}DeleteClassificationReferenceType with content type ELEMENT_ONLY
class DeleteClassificationReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """
                For exports this element informs downstream systems that a link to an classification has been deleted
                for the containing object in the publishing workspace. Only present when the STEPXML has been produced
                by an event based outbound integration endpoint that uses the "Advanced STEPXML" format plugin with the
                'ExportDeletedData="true"' instruction in the output template.
                Ignored on import.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteClassificationReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2863, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_DeleteClassificationReferenceType_httpwww_stibosystems_comstepKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2874, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_DeleteClassificationReferenceType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2875, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_DeleteClassificationReferenceType_Type', _module_typeBindings.StepLinkTypeID)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2877, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2877, 8)
    
    Type = property(__Type.value, __Type.set, None, None)

    
    # Attribute ClassificationID uses Python identifier ClassificationID
    __ClassificationID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ClassificationID'), 'ClassificationID', '__httpwww_stibosystems_comstep_DeleteClassificationReferenceType_ClassificationID', _module_typeBindings.StepClassificationID, required=True)
    __ClassificationID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2878, 8)
    __ClassificationID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2878, 8)
    
    ClassificationID = property(__ClassificationID.value, __ClassificationID.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_DeleteClassificationReferenceType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2879, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2879, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_DeleteClassificationReferenceType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2880, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2880, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __KeyValue.name() : __KeyValue,
        __MetaData.name() : __MetaData
    })
    _AttributeMap.update({
        __Type.name() : __Type,
        __ClassificationID.name() : __ClassificationID,
        __QualifierID.name() : __QualifierID,
        __Changed.name() : __Changed
    })
_module_typeBindings.DeleteClassificationReferenceType = DeleteClassificationReferenceType
Namespace.addCategoryObject('typeBinding', 'DeleteClassificationReferenceType', DeleteClassificationReferenceType)


# Complex type {http://www.stibosystems.com/step}DeleteClassificationType with content type ELEMENT_ONLY
class DeleteClassificationType (pyxb.binding.basis.complexTypeDefinition):
    """
                For exports this element informs downstream systems that a classification has been deleted from the
                publishing workspace. Only present when the STEPXML has been produced by an event based outbound
                integration endpoint that uses the "Advanced STEPXML" format plugin with the ''
                instruction in the output template.
                Can for imports be used to move a classification to the recycle bin.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteClassificationType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2893, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_DeleteClassificationType_httpwww_stibosystems_comstepKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2904, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_DeleteClassificationType_ID', _module_typeBindings.StepClassificationID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2906, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2906, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    ID of the classification that has been deleted / is to be deleted. Required for imports if no\n                    KeyValue is supplied.\n                ')

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_DeleteClassificationType_Type', _module_typeBindings.STD_ANON_6, unicode_default='1')
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2914, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2914, 8)
    
    Type = property(__Type.value, __Type.set, None, '\n                    @Deprecated, may be removed in future release.\n                ')

    _ElementMap.update({
        __KeyValue.name() : __KeyValue
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __Type.name() : __Type
    })
_module_typeBindings.DeleteClassificationType = DeleteClassificationType
Namespace.addCategoryObject('typeBinding', 'DeleteClassificationType', DeleteClassificationType)


# Complex type {http://www.stibosystems.com/step}DeleteDataContainerTypeLinkType with content type EMPTY
class DeleteDataContainerTypeLinkType (pyxb.binding.basis.complexTypeDefinition):
    """
                For exports this element informs downstream systems that a link to a data container type has been
                deleted for the containing object in the publishing workspace. Only present when the STEPXML has been
                produced by an event based outbound integration endpoint that uses the "Advanced STEPXML" format plugin
                with the 'ExportDeletedData="true"' instruction in the output template.
                Ignored on import.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteDataContainerTypeLinkType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2950, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute DataContainerTypeID uses Python identifier DataContainerTypeID
    __DataContainerTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DataContainerTypeID'), 'DataContainerTypeID', '__httpwww_stibosystems_comstep_DeleteDataContainerTypeLinkType_DataContainerTypeID', _module_typeBindings.StepDataContainerTypeID, required=True)
    __DataContainerTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2960, 8)
    __DataContainerTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2960, 8)
    
    DataContainerTypeID = property(__DataContainerTypeID.value, __DataContainerTypeID.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_DeleteDataContainerTypeLinkType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2961, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2961, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __DataContainerTypeID.name() : __DataContainerTypeID,
        __Changed.name() : __Changed
    })
_module_typeBindings.DeleteDataContainerTypeLinkType = DeleteDataContainerTypeLinkType
Namespace.addCategoryObject('typeBinding', 'DeleteDataContainerTypeLinkType', DeleteDataContainerTypeLinkType)


# Complex type {http://www.stibosystems.com/step}DeleteEntityCrossReferenceType with content type ELEMENT_ONLY
class DeleteEntityCrossReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """
                For exports this element informs downstream systems that a reference to an entity has been deleted for
                the containing object in the publishing workspace. Only present when the STEPXML has been produced by an
                event based outbound integration endpoint that uses the "Advanced STEPXML" format plugin with the
                'ExportDeletedData="true"' instruction in the output template.
                Ignored on import.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteEntityCrossReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2963, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_DeleteEntityCrossReferenceType_httpwww_stibosystems_comstepKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2974, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_DeleteEntityCrossReferenceType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2975, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_DeleteEntityCrossReferenceType_Type', _module_typeBindings.StepLinkTypeID)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2977, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2977, 8)
    
    Type = property(__Type.value, __Type.set, None, None)

    
    # Attribute EntityID uses Python identifier EntityID
    __EntityID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'EntityID'), 'EntityID', '__httpwww_stibosystems_comstep_DeleteEntityCrossReferenceType_EntityID', _module_typeBindings.StepEntityID, required=True)
    __EntityID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2978, 8)
    __EntityID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2978, 8)
    
    EntityID = property(__EntityID.value, __EntityID.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_DeleteEntityCrossReferenceType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2979, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2979, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_DeleteEntityCrossReferenceType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2980, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2980, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __KeyValue.name() : __KeyValue,
        __MetaData.name() : __MetaData
    })
    _AttributeMap.update({
        __Type.name() : __Type,
        __EntityID.name() : __EntityID,
        __QualifierID.name() : __QualifierID,
        __Changed.name() : __Changed
    })
_module_typeBindings.DeleteEntityCrossReferenceType = DeleteEntityCrossReferenceType
Namespace.addCategoryObject('typeBinding', 'DeleteEntityCrossReferenceType', DeleteEntityCrossReferenceType)


# Complex type {http://www.stibosystems.com/step}DeleteEntityType with content type ELEMENT_ONLY
class DeleteEntityType (pyxb.binding.basis.complexTypeDefinition):
    """
                For exports this element informs downstream systems that an entity has been deleted from the publishing
                workspace. Only present when the STEPXML has been produced by an event based outbound integration
                endpoint that uses the "Advanced STEPXML" format plugin with the '' instruction
                in the output template.
                Can for imports be used to move an entity to the recycle bin.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteEntityType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2982, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_DeleteEntityType_httpwww_stibosystems_comstepKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2993, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_DeleteEntityType_ID', _module_typeBindings.StepEntityID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2995, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2995, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    ID of the entity that has been deleted / is to be deleted. Required for imports if no KeyValue is\n                    supplied.\n                ')

    _ElementMap.update({
        __KeyValue.name() : __KeyValue
    })
    _AttributeMap.update({
        __ID.name() : __ID
    })
_module_typeBindings.DeleteEntityType = DeleteEntityType
Namespace.addCategoryObject('typeBinding', 'DeleteEntityType', DeleteEntityType)


# Complex type {http://www.stibosystems.com/step}DeleteListOfValueType with content type EMPTY
class DeleteListOfValueType (pyxb.binding.basis.complexTypeDefinition):
    """
                For exports this element informs downstream systems that an LOV has been deleted. Only present when the
                STEPXML has been produced by an event based outbound integration endpoint that uses the "Advanced
                STEPXML" format plugin with the '' instruction in the output template.
                Ignored on import.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteListOfValueType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3024, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_DeleteListOfValueType_ID', _module_typeBindings.StepLOVID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3033, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3033, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ID.name() : __ID
    })
_module_typeBindings.DeleteListOfValueType = DeleteListOfValueType
Namespace.addCategoryObject('typeBinding', 'DeleteListOfValueType', DeleteListOfValueType)


# Complex type {http://www.stibosystems.com/step}DeleteProductCrossReferenceType with content type ELEMENT_ONLY
class DeleteProductCrossReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """
                For exports this element informs downstream systems that a reference to a product has been deleted for
                the containing object in the publishing workspace. Only present when the STEPXML has been produced by an
                event based outbound integration endpoint that uses the "Advanced STEPXML" format plugin with the
                'ExportDeletedData="true"' instruction in the output template.
                Ignored on import.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteProductCrossReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3035, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_DeleteProductCrossReferenceType_httpwww_stibosystems_comstepKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3046, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_DeleteProductCrossReferenceType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3047, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_DeleteProductCrossReferenceType_Type', _module_typeBindings.StepLinkTypeID)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3049, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3049, 8)
    
    Type = property(__Type.value, __Type.set, None, None)

    
    # Attribute ProductID uses Python identifier ProductID
    __ProductID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ProductID'), 'ProductID', '__httpwww_stibosystems_comstep_DeleteProductCrossReferenceType_ProductID', _module_typeBindings.StepProductID, required=True)
    __ProductID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3050, 8)
    __ProductID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3050, 8)
    
    ProductID = property(__ProductID.value, __ProductID.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_DeleteProductCrossReferenceType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3051, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3051, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, None)

    
    # Attribute MountLocation uses Python identifier MountLocation
    __MountLocation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MountLocation'), 'MountLocation', '__httpwww_stibosystems_comstep_DeleteProductCrossReferenceType_MountLocation', pyxb.binding.datatypes.string)
    __MountLocation._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3052, 8)
    __MountLocation._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3052, 8)
    
    MountLocation = property(__MountLocation.value, __MountLocation.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_DeleteProductCrossReferenceType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3053, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3053, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __KeyValue.name() : __KeyValue,
        __MetaData.name() : __MetaData
    })
    _AttributeMap.update({
        __Type.name() : __Type,
        __ProductID.name() : __ProductID,
        __QualifierID.name() : __QualifierID,
        __MountLocation.name() : __MountLocation,
        __Changed.name() : __Changed
    })
_module_typeBindings.DeleteProductCrossReferenceType = DeleteProductCrossReferenceType
Namespace.addCategoryObject('typeBinding', 'DeleteProductCrossReferenceType', DeleteProductCrossReferenceType)


# Complex type {http://www.stibosystems.com/step}DeleteProductReferenceType with content type ELEMENT_ONLY
class DeleteProductReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """
                For exports this element informs downstream systems that a link to a product has been deleted for the
                containing object in the publishing workspace. Only present when the STEPXML has been produced by an
                event based outbound integration endpoint that uses the "Advanced STEPXML" format plugin with the
                'ExportDeletedData="true"' instruction in the output template.
                Ignored on import.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteProductReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3065, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_DeleteProductReferenceType_httpwww_stibosystems_comstepKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3076, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_DeleteProductReferenceType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3077, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_DeleteProductReferenceType_Type', _module_typeBindings.StepLinkTypeID)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3079, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3079, 8)
    
    Type = property(__Type.value, __Type.set, None, None)

    
    # Attribute ProductID uses Python identifier ProductID
    __ProductID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ProductID'), 'ProductID', '__httpwww_stibosystems_comstep_DeleteProductReferenceType_ProductID', _module_typeBindings.StepProductID, required=True)
    __ProductID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3080, 8)
    __ProductID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3080, 8)
    
    ProductID = property(__ProductID.value, __ProductID.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_DeleteProductReferenceType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3081, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3081, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, None)

    _ElementMap.update({
        __KeyValue.name() : __KeyValue,
        __MetaData.name() : __MetaData
    })
    _AttributeMap.update({
        __Type.name() : __Type,
        __ProductID.name() : __ProductID,
        __QualifierID.name() : __QualifierID
    })
_module_typeBindings.DeleteProductReferenceType = DeleteProductReferenceType
Namespace.addCategoryObject('typeBinding', 'DeleteProductReferenceType', DeleteProductReferenceType)


# Complex type {http://www.stibosystems.com/step}DeleteProductType with content type ELEMENT_ONLY
class DeleteProductType (pyxb.binding.basis.complexTypeDefinition):
    """
                For exports this element informs downstream systems that a product has been deleted from the
                publishing workspace. Only present when the STEPXML has been produced by an event based outbound
                integration endpoint that uses the "Advanced STEPXML" format plugin with the ''
                instruction in the output template.
                Can for imports be used to move a product to the recycle bin.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteProductType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3083, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_DeleteProductType_httpwww_stibosystems_comstepKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3094, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_DeleteProductType_ID', _module_typeBindings.StepProductID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3096, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3096, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    ID of the product that has been deleted / is to be deleted. Required for imports if no KeyValue is\n                    supplied.\n                ')

    _ElementMap.update({
        __KeyValue.name() : __KeyValue
    })
    _AttributeMap.update({
        __ID.name() : __ID
    })
_module_typeBindings.DeleteProductType = DeleteProductType
Namespace.addCategoryObject('typeBinding', 'DeleteProductType', DeleteProductType)


# Complex type {http://www.stibosystems.com/step}DeleteSingleDataContainerType with content type ELEMENT_ONLY
class DeleteSingleDataContainerType (pyxb.binding.basis.complexTypeDefinition):
    """
                Import instruction that can be used to delete a data container object for a single-valued data
                container, either by data container object ID, by data container type or by data container type key.
                Never exported.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteSingleDataContainerType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3105, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Values uses Python identifier Values
    __Values = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Values'), 'Values', '__httpwww_stibosystems_comstep_DeleteSingleDataContainerType_httpwww_stibosystems_comstepValues', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3114, 12), )

    
    Values = property(__Values.value, __Values.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AssetCrossReference uses Python identifier AssetCrossReference
    __AssetCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssetCrossReference'), 'AssetCrossReference', '__httpwww_stibosystems_comstep_DeleteSingleDataContainerType_httpwww_stibosystems_comstepAssetCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3115, 12), )

    
    AssetCrossReference = property(__AssetCrossReference.value, __AssetCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ClassificationCrossReference uses Python identifier ClassificationCrossReference
    __ClassificationCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClassificationCrossReference'), 'ClassificationCrossReference', '__httpwww_stibosystems_comstep_DeleteSingleDataContainerType_httpwww_stibosystems_comstepClassificationCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3116, 12), )

    
    ClassificationCrossReference = property(__ClassificationCrossReference.value, __ClassificationCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}EntityCrossReference uses Python identifier EntityCrossReference
    __EntityCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EntityCrossReference'), 'EntityCrossReference', '__httpwww_stibosystems_comstep_DeleteSingleDataContainerType_httpwww_stibosystems_comstepEntityCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3117, 12), )

    
    EntityCrossReference = property(__EntityCrossReference.value, __EntityCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ProductCrossReference uses Python identifier ProductCrossReference
    __ProductCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ProductCrossReference'), 'ProductCrossReference', '__httpwww_stibosystems_comstep_DeleteSingleDataContainerType_httpwww_stibosystems_comstepProductCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3118, 12), )

    
    ProductCrossReference = property(__ProductCrossReference.value, __ProductCrossReference.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_DeleteSingleDataContainerType_ID', _module_typeBindings.StepID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3120, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3120, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    The ID of the data container object to delete. Either ID or Type must be supplied.\n                ')

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_DeleteSingleDataContainerType_Type', _module_typeBindings.StepDataContainerTypeID)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3127, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3127, 8)
    
    Type = property(__Type.value, __Type.set, None, '\n                    Data container type ID for the single valued data container object that should be deleted.\n                    Either ID or Type must be supplied.\n                ')

    _ElementMap.update({
        __Values.name() : __Values,
        __AssetCrossReference.name() : __AssetCrossReference,
        __ClassificationCrossReference.name() : __ClassificationCrossReference,
        __EntityCrossReference.name() : __EntityCrossReference,
        __ProductCrossReference.name() : __ProductCrossReference
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __Type.name() : __Type
    })
_module_typeBindings.DeleteSingleDataContainerType = DeleteSingleDataContainerType
Namespace.addCategoryObject('typeBinding', 'DeleteSingleDataContainerType', DeleteSingleDataContainerType)


# Complex type {http://www.stibosystems.com/step}DeleteSuppressedClassificationCrossReferenceType with content type ELEMENT_ONLY
class DeleteSuppressedClassificationCrossReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents the deletion of a suppressed reference to a classification. Only present when the STEPXML has
                been produced by an event based outbound integration endpoint that exports data from multiple contexts
                and uses the "Advanced STEPXML" format plugin with the 'ExportDeletedData="true"' instruction in the
                output template. Ignored on import.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedClassificationCrossReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3136, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_DeleteSuppressedClassificationCrossReferenceType_httpwww_stibosystems_comstepKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3146, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_DeleteSuppressedClassificationCrossReferenceType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3147, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_DeleteSuppressedClassificationCrossReferenceType_Type', _module_typeBindings.StepLinkTypeID)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3149, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3149, 8)
    
    Type = property(__Type.value, __Type.set, None, None)

    
    # Attribute ClassificationID uses Python identifier ClassificationID
    __ClassificationID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ClassificationID'), 'ClassificationID', '__httpwww_stibosystems_comstep_DeleteSuppressedClassificationCrossReferenceType_ClassificationID', _module_typeBindings.StepClassificationID, required=True)
    __ClassificationID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3150, 8)
    __ClassificationID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3150, 8)
    
    ClassificationID = property(__ClassificationID.value, __ClassificationID.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_DeleteSuppressedClassificationCrossReferenceType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3151, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3151, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_DeleteSuppressedClassificationCrossReferenceType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3152, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3152, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __KeyValue.name() : __KeyValue,
        __MetaData.name() : __MetaData
    })
    _AttributeMap.update({
        __Type.name() : __Type,
        __ClassificationID.name() : __ClassificationID,
        __QualifierID.name() : __QualifierID,
        __Changed.name() : __Changed
    })
_module_typeBindings.DeleteSuppressedClassificationCrossReferenceType = DeleteSuppressedClassificationCrossReferenceType
Namespace.addCategoryObject('typeBinding', 'DeleteSuppressedClassificationCrossReferenceType', DeleteSuppressedClassificationCrossReferenceType)


# Complex type {http://www.stibosystems.com/step}DeleteSuppressedClassificationReferenceType with content type ELEMENT_ONLY
class DeleteSuppressedClassificationReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents the deletion of a suppressed link from a product to a classification. Only present when the
                STEPXML has been produced by an event based outbound integration endpoint that exports data from
                multiple contexts and uses the "Advanced STEPXML" format plugin with the 'ExportDeletedData="true"'
                instruction in the output template. Ignored on import.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedClassificationReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3154, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_DeleteSuppressedClassificationReferenceType_httpwww_stibosystems_comstepKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3164, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_DeleteSuppressedClassificationReferenceType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3165, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_DeleteSuppressedClassificationReferenceType_Type', _module_typeBindings.StepLinkTypeID)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3167, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3167, 8)
    
    Type = property(__Type.value, __Type.set, None, None)

    
    # Attribute ClassificationID uses Python identifier ClassificationID
    __ClassificationID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ClassificationID'), 'ClassificationID', '__httpwww_stibosystems_comstep_DeleteSuppressedClassificationReferenceType_ClassificationID', _module_typeBindings.StepClassificationID, required=True)
    __ClassificationID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3168, 8)
    __ClassificationID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3168, 8)
    
    ClassificationID = property(__ClassificationID.value, __ClassificationID.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_DeleteSuppressedClassificationReferenceType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3169, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3169, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_DeleteSuppressedClassificationReferenceType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3170, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3170, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __KeyValue.name() : __KeyValue,
        __MetaData.name() : __MetaData
    })
    _AttributeMap.update({
        __Type.name() : __Type,
        __ClassificationID.name() : __ClassificationID,
        __QualifierID.name() : __QualifierID,
        __Changed.name() : __Changed
    })
_module_typeBindings.DeleteSuppressedClassificationReferenceType = DeleteSuppressedClassificationReferenceType
Namespace.addCategoryObject('typeBinding', 'DeleteSuppressedClassificationReferenceType', DeleteSuppressedClassificationReferenceType)


# Complex type {http://www.stibosystems.com/step}DeleteSuppressedProductReferenceType with content type ELEMENT_ONLY
class DeleteSuppressedProductReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents the deletion of a suppressed link from a classification to a product. Only present when the
                STEPXML has been produced by an event based outbound integration endpoint that exports data from
                multiple contexts and uses the "Advanced STEPXML" format plugin with the 'ExportDeletedData="true"'
                instruction in the output template. Ignored on import.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedProductReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3172, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_DeleteSuppressedProductReferenceType_httpwww_stibosystems_comstepKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3182, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_DeleteSuppressedProductReferenceType_Type', _module_typeBindings.StepLinkTypeID)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3184, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3184, 8)
    
    Type = property(__Type.value, __Type.set, None, None)

    
    # Attribute ProductID uses Python identifier ProductID
    __ProductID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ProductID'), 'ProductID', '__httpwww_stibosystems_comstep_DeleteSuppressedProductReferenceType_ProductID', _module_typeBindings.StepProductID, required=True)
    __ProductID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3185, 8)
    __ProductID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3185, 8)
    
    ProductID = property(__ProductID.value, __ProductID.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_DeleteSuppressedProductReferenceType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3186, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3186, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_DeleteSuppressedProductReferenceType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3187, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3187, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __KeyValue.name() : __KeyValue
    })
    _AttributeMap.update({
        __Type.name() : __Type,
        __ProductID.name() : __ProductID,
        __QualifierID.name() : __QualifierID,
        __Changed.name() : __Changed
    })
_module_typeBindings.DeleteSuppressedProductReferenceType = DeleteSuppressedProductReferenceType
Namespace.addCategoryObject('typeBinding', 'DeleteSuppressedProductReferenceType', DeleteSuppressedProductReferenceType)


# Complex type {http://www.stibosystems.com/step}DeleteSuppressedProductCrossReferenceType with content type ELEMENT_ONLY
class DeleteSuppressedProductCrossReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents the deletion of a suppressed reference to a product. Only present when the STEPXML has
                been produced by an event based outbound integration endpoint that exports data from multiple contexts
                and uses the "Advanced STEPXML" format plugin with the 'ExportDeletedData="true"' instruction in the
                output template.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedProductCrossReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3189, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_DeleteSuppressedProductCrossReferenceType_httpwww_stibosystems_comstepKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3199, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_DeleteSuppressedProductCrossReferenceType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3200, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_DeleteSuppressedProductCrossReferenceType_Type', _module_typeBindings.StepLinkTypeID)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3202, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3202, 8)
    
    Type = property(__Type.value, __Type.set, None, None)

    
    # Attribute ProductID uses Python identifier ProductID
    __ProductID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ProductID'), 'ProductID', '__httpwww_stibosystems_comstep_DeleteSuppressedProductCrossReferenceType_ProductID', _module_typeBindings.StepProductID, required=True)
    __ProductID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3203, 8)
    __ProductID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3203, 8)
    
    ProductID = property(__ProductID.value, __ProductID.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_DeleteSuppressedProductCrossReferenceType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3204, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3204, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, None)

    
    # Attribute MountLocation uses Python identifier MountLocation
    __MountLocation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MountLocation'), 'MountLocation', '__httpwww_stibosystems_comstep_DeleteSuppressedProductCrossReferenceType_MountLocation', pyxb.binding.datatypes.string)
    __MountLocation._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3205, 8)
    __MountLocation._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3205, 8)
    
    MountLocation = property(__MountLocation.value, __MountLocation.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_DeleteSuppressedProductCrossReferenceType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3206, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3206, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __KeyValue.name() : __KeyValue,
        __MetaData.name() : __MetaData
    })
    _AttributeMap.update({
        __Type.name() : __Type,
        __ProductID.name() : __ProductID,
        __QualifierID.name() : __QualifierID,
        __MountLocation.name() : __MountLocation,
        __Changed.name() : __Changed
    })
_module_typeBindings.DeleteSuppressedProductCrossReferenceType = DeleteSuppressedProductCrossReferenceType
Namespace.addCategoryObject('typeBinding', 'DeleteSuppressedProductCrossReferenceType', DeleteSuppressedProductCrossReferenceType)


# Complex type {http://www.stibosystems.com/step}DeleteSuppressedEntityCrossReferenceType with content type ELEMENT_ONLY
class DeleteSuppressedEntityCrossReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents the deletion of a suppressed reference to an entity. Only present when the STEPXML has
                been produced by an event based outbound integration endpoint that exports data from multiple contexts
                and uses the "Advanced STEPXML" format plugin with the 'ExportDeletedData="true"' instruction in the
                output template. Ignored on import.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedEntityCrossReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3208, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_DeleteSuppressedEntityCrossReferenceType_httpwww_stibosystems_comstepKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3218, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_DeleteSuppressedEntityCrossReferenceType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3219, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_DeleteSuppressedEntityCrossReferenceType_Type', _module_typeBindings.StepLinkTypeID)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3221, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3221, 8)
    
    Type = property(__Type.value, __Type.set, None, None)

    
    # Attribute EntityID uses Python identifier EntityID
    __EntityID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'EntityID'), 'EntityID', '__httpwww_stibosystems_comstep_DeleteSuppressedEntityCrossReferenceType_EntityID', _module_typeBindings.StepEntityID, required=True)
    __EntityID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3222, 8)
    __EntityID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3222, 8)
    
    EntityID = property(__EntityID.value, __EntityID.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_DeleteSuppressedEntityCrossReferenceType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3223, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3223, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_DeleteSuppressedEntityCrossReferenceType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3224, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3224, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __KeyValue.name() : __KeyValue,
        __MetaData.name() : __MetaData
    })
    _AttributeMap.update({
        __Type.name() : __Type,
        __EntityID.name() : __EntityID,
        __QualifierID.name() : __QualifierID,
        __Changed.name() : __Changed
    })
_module_typeBindings.DeleteSuppressedEntityCrossReferenceType = DeleteSuppressedEntityCrossReferenceType
Namespace.addCategoryObject('typeBinding', 'DeleteSuppressedEntityCrossReferenceType', DeleteSuppressedEntityCrossReferenceType)


# Complex type {http://www.stibosystems.com/step}DeleteSuppressedAssetCrossReferenceType with content type ELEMENT_ONLY
class DeleteSuppressedAssetCrossReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents the deletion of a suppressed reference to an asset. Only present when the STEPXML has
                been produced by an event based outbound integration endpoint that exports data from multiple contexts
                and uses the "Advanced STEPXML" format plugin with the 'ExportDeletedData="true"' instruction in the
                output template. Ignored on import.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedAssetCrossReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3226, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_DeleteSuppressedAssetCrossReferenceType_httpwww_stibosystems_comstepKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3236, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_DeleteSuppressedAssetCrossReferenceType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3237, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_DeleteSuppressedAssetCrossReferenceType_Type', _module_typeBindings.StepLinkTypeID)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3239, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3239, 8)
    
    Type = property(__Type.value, __Type.set, None, None)

    
    # Attribute AssetID uses Python identifier AssetID
    __AssetID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AssetID'), 'AssetID', '__httpwww_stibosystems_comstep_DeleteSuppressedAssetCrossReferenceType_AssetID', _module_typeBindings.StepAssetID, required=True)
    __AssetID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3240, 8)
    __AssetID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3240, 8)
    
    AssetID = property(__AssetID.value, __AssetID.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_DeleteSuppressedAssetCrossReferenceType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3241, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3241, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_DeleteSuppressedAssetCrossReferenceType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3242, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3242, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __KeyValue.name() : __KeyValue,
        __MetaData.name() : __MetaData
    })
    _AttributeMap.update({
        __Type.name() : __Type,
        __AssetID.name() : __AssetID,
        __QualifierID.name() : __QualifierID,
        __Changed.name() : __Changed
    })
_module_typeBindings.DeleteSuppressedAssetCrossReferenceType = DeleteSuppressedAssetCrossReferenceType
Namespace.addCategoryObject('typeBinding', 'DeleteSuppressedAssetCrossReferenceType', DeleteSuppressedAssetCrossReferenceType)


# Complex type {http://www.stibosystems.com/step}DimensionType with content type ELEMENT_ONLY
class DimensionType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a dimension that holds a number of dimension point.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DimensionType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3313, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_DimensionType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3320, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_DimensionType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3321, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DimensionPoint uses Python identifier DimensionPoint
    __DimensionPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DimensionPoint'), 'DimensionPoint', '__httpwww_stibosystems_comstep_DimensionType_httpwww_stibosystems_comstepDimensionPoint', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3322, 12), )

    
    DimensionPoint = property(__DimensionPoint.value, __DimensionPoint.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_DimensionType_ID', _module_typeBindings.StepQualifierID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3324, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3324, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    ID of the dimension.\n                ')

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_DimensionType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3331, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3331, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_DimensionType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3332, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3332, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_DimensionType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3333, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3333, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __DimensionPoint.name() : __DimensionPoint
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed
    })
_module_typeBindings.DimensionType = DimensionType
Namespace.addCategoryObject('typeBinding', 'DimensionType', DimensionType)


# Complex type {http://www.stibosystems.com/step}DimensionLinkType with content type EMPTY
class DimensionLinkType (pyxb.binding.basis.complexTypeDefinition):
    """
                A link to a dimension.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DimensionLinkType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3335, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute DimensionID uses Python identifier DimensionID
    __DimensionID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DimensionID'), 'DimensionID', '__httpwww_stibosystems_comstep_DimensionLinkType_DimensionID', _module_typeBindings.StepQualifierID, required=True)
    __DimensionID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3341, 8)
    __DimensionID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3341, 8)
    
    DimensionID = property(__DimensionID.value, __DimensionID.set, None, '\n                    ID of the dimension.\n                ')

    
    # Attribute DimensionPointID uses Python identifier DimensionPointID
    __DimensionPointID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DimensionPointID'), 'DimensionPointID', '__httpwww_stibosystems_comstep_DimensionLinkType_DimensionPointID', _module_typeBindings.StepQualifierID)
    __DimensionPointID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3348, 8)
    __DimensionPointID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3348, 8)
    
    DimensionPointID = property(__DimensionPointID.value, __DimensionPointID.set, None, '\n                    Only used during import, in which case this will represent the default dimension point to use in the\n                    linked dimension if required (required if adding a dimension dependency to values).\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __DimensionID.name() : __DimensionID,
        __DimensionPointID.name() : __DimensionPointID
    })
_module_typeBindings.DimensionLinkType = DimensionLinkType
Namespace.addCategoryObject('typeBinding', 'DimensionLinkType', DimensionLinkType)


# Complex type {http://www.stibosystems.com/step}DimensionPointType with content type ELEMENT_ONLY
class DimensionPointType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represent a dimension point.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DimensionPointType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3367, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_DimensionPointType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3374, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_DimensionPointType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3375, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DimensionPointLink uses Python identifier DimensionPointLink
    __DimensionPointLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DimensionPointLink'), 'DimensionPointLink', '__httpwww_stibosystems_comstep_DimensionPointType_httpwww_stibosystems_comstepDimensionPointLink', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3376, 12), )

    
    DimensionPointLink = property(__DimensionPointLink.value, __DimensionPointLink.set, None, '\n                        The parent dimension point.\n                    ')

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_DimensionPointType_ID', _module_typeBindings.StepQualifierID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3384, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3384, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    ID of the dimension point.\n                ')

    
    # Attribute GDSNLanguageID uses Python identifier GDSNLanguageID
    __GDSNLanguageID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'GDSNLanguageID'), 'GDSNLanguageID', '__httpwww_stibosystems_comstep_DimensionPointType_GDSNLanguageID', pyxb.binding.datatypes.string)
    __GDSNLanguageID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3391, 8)
    __GDSNLanguageID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3391, 8)
    
    GDSNLanguageID = property(__GDSNLanguageID.value, __GDSNLanguageID.set, None, '\n                    GDSN language ID corresponding to this dimension point.\n                ')

    
    # Attribute DictionaryID uses Python identifier DictionaryID
    __DictionaryID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DictionaryID'), 'DictionaryID', '__httpwww_stibosystems_comstep_DimensionPointType_DictionaryID', pyxb.binding.datatypes.string)
    __DictionaryID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3398, 8)
    __DictionaryID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3398, 8)
    
    DictionaryID = property(__DictionaryID.value, __DictionaryID.set, None, '\n                    ID of the dictionary to use. Only relevant for language dimension points.\n                ')

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_DimensionPointType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3405, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3405, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_DimensionPointType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3406, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3406, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_DimensionPointType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3407, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3407, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __DimensionPointLink.name() : __DimensionPointLink
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __GDSNLanguageID.name() : __GDSNLanguageID,
        __DictionaryID.name() : __DictionaryID,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed
    })
_module_typeBindings.DimensionPointType = DimensionPointType
Namespace.addCategoryObject('typeBinding', 'DimensionPointType', DimensionPointType)


# Complex type {http://www.stibosystems.com/step}DimensionPointLinkType with content type EMPTY
class DimensionPointLinkType (pyxb.binding.basis.complexTypeDefinition):
    """
                A link to a dimension point.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DimensionPointLinkType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3409, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute DimensionPointID uses Python identifier DimensionPointID
    __DimensionPointID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DimensionPointID'), 'DimensionPointID', '__httpwww_stibosystems_comstep_DimensionPointLinkType_DimensionPointID', _module_typeBindings.StepQualifierID, required=True)
    __DimensionPointID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3415, 8)
    __DimensionPointID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3415, 8)
    
    DimensionPointID = property(__DimensionPointID.value, __DimensionPointID.set, None, '\n                    ID of the dimension point.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __DimensionPointID.name() : __DimensionPointID
    })
_module_typeBindings.DimensionPointLinkType = DimensionPointLinkType
Namespace.addCategoryObject('typeBinding', 'DimensionPointLinkType', DimensionPointLinkType)


# Complex type {http://www.stibosystems.com/step}ECatalogType with content type ELEMENT_ONLY
class ECatalogType (pyxb.binding.basis.complexTypeDefinition):
    """
                The eCatalog element lists its names, configuration, commercial lists and sub eCatalogs.
                This recursive definition of eCatalogs spans the eCatalog hierarchy
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ECatalogType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3423, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_ECatalogType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3431, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Configuration uses Python identifier Configuration
    __Configuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), 'Configuration', '__httpwww_stibosystems_comstep_ECatalogType_httpwww_stibosystems_comstepConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3432, 12), )

    
    Configuration = property(__Configuration.value, __Configuration.set, None, None)

    
    # Element {http://www.stibosystems.com/step}CommercialList uses Python identifier CommercialList
    __CommercialList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CommercialList'), 'CommercialList', '__httpwww_stibosystems_comstep_ECatalogType_httpwww_stibosystems_comstepCommercialList', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3433, 12), )

    
    CommercialList = property(__CommercialList.value, __CommercialList.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SelectionList uses Python identifier SelectionList
    __SelectionList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SelectionList'), 'SelectionList', '__httpwww_stibosystems_comstep_ECatalogType_httpwww_stibosystems_comstepSelectionList', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3434, 12), )

    
    SelectionList = property(__SelectionList.value, __SelectionList.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Collection uses Python identifier Collection
    __Collection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Collection'), 'Collection', '__httpwww_stibosystems_comstep_ECatalogType_httpwww_stibosystems_comstepCollection', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3435, 12), )

    
    Collection = property(__Collection.value, __Collection.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ECatalog uses Python identifier ECatalog
    __ECatalog = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ECatalog'), 'ECatalog', '__httpwww_stibosystems_comstep_ECatalogType_httpwww_stibosystems_comstepECatalog', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3436, 12), )

    
    ECatalog = property(__ECatalog.value, __ECatalog.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_ECatalogType_ID', _module_typeBindings.StepTradingTermsID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3438, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3438, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    Global identification of the object. Not required during import, in which case new object is created\n                    using auto IDs.\n                ')

    
    # Attribute ParentID uses Python identifier ParentID
    __ParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ParentID'), 'ParentID', '__httpwww_stibosystems_comstep_ECatalogType_ParentID', _module_typeBindings.StepTradingTermsID)
    __ParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3446, 8)
    __ParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3446, 8)
    
    ParentID = property(__ParentID.value, __ParentID.set, None, '\n                    The parent eCatalog of this eCatalog. Only required if not nested inside another eCatalog element.\n                ')

    _ElementMap.update({
        __Name.name() : __Name,
        __Configuration.name() : __Configuration,
        __CommercialList.name() : __CommercialList,
        __SelectionList.name() : __SelectionList,
        __Collection.name() : __Collection,
        __ECatalog.name() : __ECatalog
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __ParentID.name() : __ParentID
    })
_module_typeBindings.ECatalogType = ECatalogType
Namespace.addCategoryObject('typeBinding', 'ECatalogType', ECatalogType)


# Complex type {http://www.stibosystems.com/step}EntitiesType with content type ELEMENT_ONLY
class EntitiesType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for entities.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EntitiesType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3519, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Entity uses Python identifier Entity
    __Entity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Entity'), 'Entity', '__httpwww_stibosystems_comstep_EntitiesType_httpwww_stibosystems_comstepEntity', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3526, 12), )

    
    Entity = property(__Entity.value, __Entity.set, None, None)

    
    # Attribute RejectNewEntities uses Python identifier RejectNewEntities
    __RejectNewEntities = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'RejectNewEntities'), 'RejectNewEntities', '__httpwww_stibosystems_comstep_EntitiesType_RejectNewEntities', pyxb.binding.datatypes.boolean, unicode_default='false')
    __RejectNewEntities._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3528, 8)
    __RejectNewEntities._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3528, 8)
    
    RejectNewEntities = property(__RejectNewEntities.value, __RejectNewEntities.set, None, '\n                    Instruction that can be used during import to prevent the creation of new entities.\n                ')

    
    # Attribute DefaultParentID uses Python identifier DefaultParentID
    __DefaultParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DefaultParentID'), 'DefaultParentID', '__httpwww_stibosystems_comstep_EntitiesType_DefaultParentID', _module_typeBindings.StepEntityID)
    __DefaultParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3535, 8)
    __DefaultParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3535, 8)
    
    DefaultParentID = property(__DefaultParentID.value, __DefaultParentID.set, None, '\n                    Import instruction. The default parent entity for new entities for which no parent information is\n                    supplied.\n                ')

    
    # Attribute DefaultUserTypeID uses Python identifier DefaultUserTypeID
    __DefaultUserTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DefaultUserTypeID'), 'DefaultUserTypeID', '__httpwww_stibosystems_comstep_EntitiesType_DefaultUserTypeID', _module_typeBindings.StepObjectTypeID)
    __DefaultUserTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3543, 8)
    __DefaultUserTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3543, 8)
    
    DefaultUserTypeID = property(__DefaultUserTypeID.value, __DefaultUserTypeID.set, None, '\n                    Import instruction. The default object type for new entities for which no object type is supplied.\n                ')

    _ElementMap.update({
        __Entity.name() : __Entity
    })
    _AttributeMap.update({
        __RejectNewEntities.name() : __RejectNewEntities,
        __DefaultParentID.name() : __DefaultParentID,
        __DefaultUserTypeID.name() : __DefaultUserTypeID
    })
_module_typeBindings.EntitiesType = EntitiesType
Namespace.addCategoryObject('typeBinding', 'EntitiesType', EntitiesType)


# Complex type {http://www.stibosystems.com/step}EntityCrossReferenceType with content type ELEMENT_ONLY
class EntityCrossReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """
                A reference to an entity.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EntityCrossReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3551, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_EntityCrossReferenceType_httpwww_stibosystems_comstepKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3558, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_EntityCrossReferenceType_httpwww_stibosystems_comstepMetaData', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3560, 16), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Entity uses Python identifier Entity
    __Entity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Entity'), 'Entity', '__httpwww_stibosystems_comstep_EntityCrossReferenceType_httpwww_stibosystems_comstepEntity', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3561, 16), )

    
    Entity = property(__Entity.value, __Entity.set, None, '\n                            Embedded reference target. Has no effect during import.\n                        ')

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_EntityCrossReferenceType_Type', _module_typeBindings.StepLinkTypeID, required=True)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3570, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3570, 8)
    
    Type = property(__Type.value, __Type.set, None, '\n                    ID of the reference type.\n                ')

    
    # Attribute EntityID uses Python identifier EntityID
    __EntityID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'EntityID'), 'EntityID', '__httpwww_stibosystems_comstep_EntityCrossReferenceType_EntityID', _module_typeBindings.StepEntityID)
    __EntityID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3577, 8)
    __EntityID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3577, 8)
    
    EntityID = property(__EntityID.value, __EntityID.set, None, '\n                    ID of the referenced entity. Required if a KeyValue is not supplied.\n                ')

    
    # Attribute AnalyzerResult uses Python identifier AnalyzerResult
    __AnalyzerResult = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AnalyzerResult'), 'AnalyzerResult', '__httpwww_stibosystems_comstep_EntityCrossReferenceType_AnalyzerResult', pyxb.binding.datatypes.string)
    __AnalyzerResult._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3584, 8)
    __AnalyzerResult._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3584, 8)
    
    AnalyzerResult = property(__AnalyzerResult.value, __AnalyzerResult.set, None, '\n                    @Deprecated, to be removed in a future release.\n                ')

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_EntityCrossReferenceType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3591, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3591, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_EntityCrossReferenceType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3592, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3592, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, '\n                    Identifies which contexts this reference is visible in. If not specified the current context is used.\n                ')

    
    # Attribute Inherited uses Python identifier Inherited
    __Inherited = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Inherited'), 'Inherited', '__httpwww_stibosystems_comstep_EntityCrossReferenceType_Inherited', pyxb.binding.datatypes.integer)
    __Inherited._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3599, 8)
    __Inherited._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3599, 8)
    
    Inherited = property(__Inherited.value, __Inherited.set, None, '\n                    Only relevant during export when nested inside a partial hierarchy. If present during import,\n                    the link is simply ignored. If this attribute is present then link is inherited. Will not\n                    be exported for local links (thus only numbers 1 and upward will be exported - 1 indicating\n                    inherited from immediate parent).\n                    The integer value of this attribute indicates how far up this link is inherited from.\n                    In cross context exports it might be relevant to have this number to find the most relevant link\n                    for a given context.\n                    NOTE: will only inherit inside hierarchy of equal node types - ie. will not inherit from\n                    classification to product hierarchy.\n                ')

    _ElementMap.update({
        __KeyValue.name() : __KeyValue,
        __MetaData.name() : __MetaData,
        __Entity.name() : __Entity
    })
    _AttributeMap.update({
        __Type.name() : __Type,
        __EntityID.name() : __EntityID,
        __AnalyzerResult.name() : __AnalyzerResult,
        __Changed.name() : __Changed,
        __QualifierID.name() : __QualifierID,
        __Inherited.name() : __Inherited
    })
_module_typeBindings.EntityCrossReferenceType = EntityCrossReferenceType
Namespace.addCategoryObject('typeBinding', 'EntityCrossReferenceType', EntityCrossReferenceType)


# Complex type {http://www.stibosystems.com/step}EntityCrossReferenceTypeType with content type ELEMENT_ONLY
class EntityCrossReferenceTypeType (pyxb.binding.basis.complexTypeDefinition):
    """
                The definition of a reference type for which references point to entities.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EntityCrossReferenceTypeType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3615, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_EntityCrossReferenceTypeType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3622, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_EntityCrossReferenceTypeType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3623, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeLink uses Python identifier AttributeLink
    __AttributeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink'), 'AttributeLink', '__httpwww_stibosystems_comstep_EntityCrossReferenceTypeType_httpwww_stibosystems_comstepAttributeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3624, 12), )

    
    AttributeLink = property(__AttributeLink.value, __AttributeLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DimensionLink uses Python identifier DimensionLink
    __DimensionLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink'), 'DimensionLink', '__httpwww_stibosystems_comstep_EntityCrossReferenceTypeType_httpwww_stibosystems_comstepDimensionLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3625, 12), )

    
    DimensionLink = property(__DimensionLink.value, __DimensionLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeGroupLink uses Python identifier AttributeGroupLink
    __AttributeGroupLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), 'AttributeGroupLink', '__httpwww_stibosystems_comstep_EntityCrossReferenceTypeType_httpwww_stibosystems_comstepAttributeGroupLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3626, 12), )

    
    AttributeGroupLink = property(__AttributeGroupLink.value, __AttributeGroupLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}UserTypeLink uses Python identifier UserTypeLink
    __UserTypeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink'), 'UserTypeLink', '__httpwww_stibosystems_comstep_EntityCrossReferenceTypeType_httpwww_stibosystems_comstepUserTypeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3627, 12), )

    
    UserTypeLink = property(__UserTypeLink.value, __UserTypeLink.set, None, '\n                        Link to a valid source type. Notice that this source can be a DataContainerType.\n                    ')

    
    # Element {http://www.stibosystems.com/step}TargetUserTypeLink uses Python identifier TargetUserTypeLink
    __TargetUserTypeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TargetUserTypeLink'), 'TargetUserTypeLink', '__httpwww_stibosystems_comstep_EntityCrossReferenceTypeType_httpwww_stibosystems_comstepTargetUserTypeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3634, 12), )

    
    TargetUserTypeLink = property(__TargetUserTypeLink.value, __TargetUserTypeLink.set, None, None)

    
    # Attribute Inherited uses Python identifier Inherited
    __Inherited = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Inherited'), 'Inherited', '__httpwww_stibosystems_comstep_EntityCrossReferenceTypeType_Inherited', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Inherited._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3636, 8)
    __Inherited._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3636, 8)
    
    Inherited = property(__Inherited.value, __Inherited.set, None, '\n                    Specifies whether or not references of this type are hierarchically inherited. Cannot be "false" if\n                    the value for the Accumulated attribute is "true".\n                ')

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_EntityCrossReferenceTypeType_ID', _module_typeBindings.StepLinkTypeID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3644, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3644, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute Revised uses Python identifier Revised
    __Revised = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Revised'), 'Revised', '__httpwww_stibosystems_comstep_EntityCrossReferenceTypeType_Revised', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Revised._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3645, 8)
    __Revised._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3645, 8)
    
    Revised = property(__Revised.value, __Revised.set, None, '\n                    Specifies whether references of this type are under revision control or not (externally maintained).\n                    During import, for existing reference types for which references exist, the value can be changed\n                    from "false" to "true" if the import runs in single update mode but cannot be changed from "true"\n                    to "false".\n                ')

    
    # Attribute Completeness uses Python identifier Completeness
    __Completeness = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Completeness'), 'Completeness', '__httpwww_stibosystems_comstep_EntityCrossReferenceTypeType_Completeness', pyxb.binding.datatypes.string)
    __Completeness._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3655, 8)
    __Completeness._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3655, 8)
    
    Completeness = property(__Completeness.value, __Completeness.set, None, '\n                    @Deprecated, not used anymore after the introduction of Completeness Metrics in STEP 7.4 (see\n                    documentation on Completeness Metrics and migration from old pre-7.4 completeness functionality).\n                ')

    
    # Attribute MultiValued uses Python identifier MultiValued
    __MultiValued = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MultiValued'), 'MultiValued', '__httpwww_stibosystems_comstep_EntityCrossReferenceTypeType_MultiValued', pyxb.binding.datatypes.boolean, unicode_default='true')
    __MultiValued._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3663, 8)
    __MultiValued._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3663, 8)
    
    MultiValued = property(__MultiValued.value, __MultiValued.set, None, '\n                    Whether the type allows for multiple references from the same source or not. Can for existing\n                    reference types be changed from "false" to "true". Changing from "true" to "false" requires that no\n                    present source has multiple references.\n                ')

    
    # Attribute Mandatory uses Python identifier Mandatory
    __Mandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Mandatory'), 'Mandatory', '__httpwww_stibosystems_comstep_EntityCrossReferenceTypeType_Mandatory', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Mandatory._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3672, 8)
    __Mandatory._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3672, 8)
    
    Mandatory = property(__Mandatory.value, __Mandatory.set, None, '\n                    Specifies whether or not this reference type is mandatory for approval.\n                ')

    
    # Attribute ParentChildRelation uses Python identifier ParentChildRelation
    __ParentChildRelation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ParentChildRelation'), 'ParentChildRelation', '__httpwww_stibosystems_comstep_EntityCrossReferenceTypeType_ParentChildRelation', _module_typeBindings.ParentChildRelationType)
    __ParentChildRelation._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3679, 8)
    __ParentChildRelation._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3679, 8)
    
    ParentChildRelation = property(__ParentChildRelation.value, __ParentChildRelation.set, None, None)

    
    # Attribute Accumulated uses Python identifier Accumulated
    __Accumulated = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Accumulated'), 'Accumulated', '__httpwww_stibosystems_comstep_EntityCrossReferenceTypeType_Accumulated', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Accumulated._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3680, 8)
    __Accumulated._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3680, 8)
    
    Accumulated = property(__Accumulated.value, __Accumulated.set, None, '\n                    Specifies whether or not reference inheritance should be accumulated. Can only be "true" if\n                    the value for the MultiValued attribute is "true".\n                ')

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_EntityCrossReferenceTypeType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3688, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3688, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_EntityCrossReferenceTypeType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3689, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3689, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_EntityCrossReferenceTypeType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3690, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3690, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __AttributeLink.name() : __AttributeLink,
        __DimensionLink.name() : __DimensionLink,
        __AttributeGroupLink.name() : __AttributeGroupLink,
        __UserTypeLink.name() : __UserTypeLink,
        __TargetUserTypeLink.name() : __TargetUserTypeLink
    })
    _AttributeMap.update({
        __Inherited.name() : __Inherited,
        __ID.name() : __ID,
        __Revised.name() : __Revised,
        __Completeness.name() : __Completeness,
        __MultiValued.name() : __MultiValued,
        __Mandatory.name() : __Mandatory,
        __ParentChildRelation.name() : __ParentChildRelation,
        __Accumulated.name() : __Accumulated,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed
    })
_module_typeBindings.EntityCrossReferenceTypeType = EntityCrossReferenceTypeType
Namespace.addCategoryObject('typeBinding', 'EntityCrossReferenceTypeType', EntityCrossReferenceTypeType)


# Complex type {http://www.stibosystems.com/step}EntityElementType with content type ELEMENT_ONLY
class EntityElementType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}EntityElementType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EntityElementType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3692, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}RuleBasedLayout uses Python identifier RuleBasedLayout
    __RuleBasedLayout = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RuleBasedLayout'), 'RuleBasedLayout', '__httpwww_stibosystems_comstep_EntityElementType_httpwww_stibosystems_comstepRuleBasedLayout', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3694, 12), )

    
    RuleBasedLayout = property(__RuleBasedLayout.value, __RuleBasedLayout.set, None, None)

    
    # Element {http://www.stibosystems.com/step}TemplateLayout uses Python identifier TemplateLayout
    __TemplateLayout = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TemplateLayout'), 'TemplateLayout', '__httpwww_stibosystems_comstep_EntityElementType_httpwww_stibosystems_comstepTemplateLayout', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3695, 12), )

    
    TemplateLayout = property(__TemplateLayout.value, __TemplateLayout.set, None, None)

    
    # Element {http://www.stibosystems.com/step}PickupLayout uses Python identifier PickupLayout
    __PickupLayout = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PickupLayout'), 'PickupLayout', '__httpwww_stibosystems_comstep_EntityElementType_httpwww_stibosystems_comstepPickupLayout', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3696, 12), )

    
    PickupLayout = property(__PickupLayout.value, __PickupLayout.set, None, None)

    
    # Attribute OfferType uses Python identifier OfferType
    __OfferType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OfferType'), 'OfferType', '__httpwww_stibosystems_comstep_EntityElementType_OfferType', pyxb.binding.datatypes.string)
    __OfferType._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3698, 8)
    __OfferType._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3698, 8)
    
    OfferType = property(__OfferType.value, __OfferType.set, None, None)

    
    # Attribute ExtendToFrameID uses Python identifier ExtendToFrameID
    __ExtendToFrameID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ExtendToFrameID'), 'ExtendToFrameID', '__httpwww_stibosystems_comstep_EntityElementType_ExtendToFrameID', _module_typeBindings.StepID)
    __ExtendToFrameID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3699, 8)
    __ExtendToFrameID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3699, 8)
    
    ExtendToFrameID = property(__ExtendToFrameID.value, __ExtendToFrameID.set, None, None)

    
    # Attribute FrameID uses Python identifier FrameID
    __FrameID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'FrameID'), 'FrameID', '__httpwww_stibosystems_comstep_EntityElementType_FrameID', _module_typeBindings.StepID, required=True)
    __FrameID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3700, 8)
    __FrameID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3700, 8)
    
    FrameID = property(__FrameID.value, __FrameID.set, None, None)

    
    # Attribute EntityID uses Python identifier EntityID
    __EntityID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'EntityID'), 'EntityID', '__httpwww_stibosystems_comstep_EntityElementType_EntityID', _module_typeBindings.StepEntityID, required=True)
    __EntityID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3701, 8)
    __EntityID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3701, 8)
    
    EntityID = property(__EntityID.value, __EntityID.set, None, None)

    _ElementMap.update({
        __RuleBasedLayout.name() : __RuleBasedLayout,
        __TemplateLayout.name() : __TemplateLayout,
        __PickupLayout.name() : __PickupLayout
    })
    _AttributeMap.update({
        __OfferType.name() : __OfferType,
        __ExtendToFrameID.name() : __ExtendToFrameID,
        __FrameID.name() : __FrameID,
        __EntityID.name() : __EntityID
    })
_module_typeBindings.EntityElementType = EntityElementType
Namespace.addCategoryObject('typeBinding', 'EntityElementType', EntityElementType)


# Complex type {http://www.stibosystems.com/step}EntityOriginType with content type EMPTY
class EntityOriginType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}EntityOriginType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EntityOriginType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3703, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_EntityOriginType_ID', pyxb.binding.datatypes.string)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3704, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3704, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute AttributeID uses Python identifier AttributeID
    __AttributeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AttributeID'), 'AttributeID', '__httpwww_stibosystems_comstep_EntityOriginType_AttributeID', _module_typeBindings.StepAttributeID)
    __AttributeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3705, 8)
    __AttributeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3705, 8)
    
    AttributeID = property(__AttributeID.value, __AttributeID.set, None, None)

    
    # Attribute Pull uses Python identifier Pull
    __Pull = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Pull'), 'Pull', '__httpwww_stibosystems_comstep_EntityOriginType_Pull', pyxb.binding.datatypes.string)
    __Pull._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3706, 8)
    __Pull._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3706, 8)
    
    Pull = property(__Pull.value, __Pull.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __AttributeID.name() : __AttributeID,
        __Pull.name() : __Pull
    })
_module_typeBindings.EntityOriginType = EntityOriginType
Namespace.addCategoryObject('typeBinding', 'EntityOriginType', EntityOriginType)


# Complex type {http://www.stibosystems.com/step}EntityType with content type ELEMENT_ONLY
class EntityType (pyxb.binding.basis.complexTypeDefinition):
    """
                Describes an entity in STEP.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EntityType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3708, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_EntityType_httpwww_stibosystems_comstepKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3715, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ParentKeyValue uses Python identifier ParentKeyValue
    __ParentKeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ParentKeyValue'), 'ParentKeyValue', '__httpwww_stibosystems_comstep_EntityType_httpwww_stibosystems_comstepParentKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3716, 12), )

    
    ParentKeyValue = property(__ParentKeyValue.value, __ParentKeyValue.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_EntityType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3717, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Entity uses Python identifier Entity
    __Entity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Entity'), 'Entity', '__httpwww_stibosystems_comstep_EntityType_httpwww_stibosystems_comstepEntity', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3719, 16), )

    
    Entity = property(__Entity.value, __Entity.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteSuppressedClassificationCrossReference uses Python identifier DeleteSuppressedClassificationCrossReference
    __DeleteSuppressedClassificationCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedClassificationCrossReference'), 'DeleteSuppressedClassificationCrossReference', '__httpwww_stibosystems_comstep_EntityType_httpwww_stibosystems_comstepDeleteSuppressedClassificationCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3721, 20), )

    
    DeleteSuppressedClassificationCrossReference = property(__DeleteSuppressedClassificationCrossReference.value, __DeleteSuppressedClassificationCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteClassificationCrossReference uses Python identifier DeleteClassificationCrossReference
    __DeleteClassificationCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteClassificationCrossReference'), 'DeleteClassificationCrossReference', '__httpwww_stibosystems_comstep_EntityType_httpwww_stibosystems_comstepDeleteClassificationCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3724, 20), )

    
    DeleteClassificationCrossReference = property(__DeleteClassificationCrossReference.value, __DeleteClassificationCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SuppressedClassificationCrossReference uses Python identifier SuppressedClassificationCrossReference
    __SuppressedClassificationCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SuppressedClassificationCrossReference'), 'SuppressedClassificationCrossReference', '__httpwww_stibosystems_comstep_EntityType_httpwww_stibosystems_comstepSuppressedClassificationCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3726, 20), )

    
    SuppressedClassificationCrossReference = property(__SuppressedClassificationCrossReference.value, __SuppressedClassificationCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ClassificationCrossReference uses Python identifier ClassificationCrossReference
    __ClassificationCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClassificationCrossReference'), 'ClassificationCrossReference', '__httpwww_stibosystems_comstep_EntityType_httpwww_stibosystems_comstepClassificationCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3728, 20), )

    
    ClassificationCrossReference = property(__ClassificationCrossReference.value, __ClassificationCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteSuppressedProductCrossReference uses Python identifier DeleteSuppressedProductCrossReference
    __DeleteSuppressedProductCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedProductCrossReference'), 'DeleteSuppressedProductCrossReference', '__httpwww_stibosystems_comstep_EntityType_httpwww_stibosystems_comstepDeleteSuppressedProductCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3732, 20), )

    
    DeleteSuppressedProductCrossReference = property(__DeleteSuppressedProductCrossReference.value, __DeleteSuppressedProductCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteProductCrossReference uses Python identifier DeleteProductCrossReference
    __DeleteProductCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteProductCrossReference'), 'DeleteProductCrossReference', '__httpwww_stibosystems_comstep_EntityType_httpwww_stibosystems_comstepDeleteProductCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3734, 20), )

    
    DeleteProductCrossReference = property(__DeleteProductCrossReference.value, __DeleteProductCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SuppressedProductCrossReference uses Python identifier SuppressedProductCrossReference
    __SuppressedProductCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SuppressedProductCrossReference'), 'SuppressedProductCrossReference', '__httpwww_stibosystems_comstep_EntityType_httpwww_stibosystems_comstepSuppressedProductCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3736, 20), )

    
    SuppressedProductCrossReference = property(__SuppressedProductCrossReference.value, __SuppressedProductCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ProductCrossReference uses Python identifier ProductCrossReference
    __ProductCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ProductCrossReference'), 'ProductCrossReference', '__httpwww_stibosystems_comstep_EntityType_httpwww_stibosystems_comstepProductCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3738, 20), )

    
    ProductCrossReference = property(__ProductCrossReference.value, __ProductCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteSuppressedAssetCrossReference uses Python identifier DeleteSuppressedAssetCrossReference
    __DeleteSuppressedAssetCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedAssetCrossReference'), 'DeleteSuppressedAssetCrossReference', '__httpwww_stibosystems_comstep_EntityType_httpwww_stibosystems_comstepDeleteSuppressedAssetCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3742, 20), )

    
    DeleteSuppressedAssetCrossReference = property(__DeleteSuppressedAssetCrossReference.value, __DeleteSuppressedAssetCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteAssetCrossReference uses Python identifier DeleteAssetCrossReference
    __DeleteAssetCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteAssetCrossReference'), 'DeleteAssetCrossReference', '__httpwww_stibosystems_comstep_EntityType_httpwww_stibosystems_comstepDeleteAssetCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3744, 20), )

    
    DeleteAssetCrossReference = property(__DeleteAssetCrossReference.value, __DeleteAssetCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SuppressedAssetCrossReference uses Python identifier SuppressedAssetCrossReference
    __SuppressedAssetCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SuppressedAssetCrossReference'), 'SuppressedAssetCrossReference', '__httpwww_stibosystems_comstep_EntityType_httpwww_stibosystems_comstepSuppressedAssetCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3746, 20), )

    
    SuppressedAssetCrossReference = property(__SuppressedAssetCrossReference.value, __SuppressedAssetCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AssetCrossReference uses Python identifier AssetCrossReference
    __AssetCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssetCrossReference'), 'AssetCrossReference', '__httpwww_stibosystems_comstep_EntityType_httpwww_stibosystems_comstepAssetCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3748, 20), )

    
    AssetCrossReference = property(__AssetCrossReference.value, __AssetCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteSuppressedEntityCrossReference uses Python identifier DeleteSuppressedEntityCrossReference
    __DeleteSuppressedEntityCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedEntityCrossReference'), 'DeleteSuppressedEntityCrossReference', '__httpwww_stibosystems_comstep_EntityType_httpwww_stibosystems_comstepDeleteSuppressedEntityCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3751, 20), )

    
    DeleteSuppressedEntityCrossReference = property(__DeleteSuppressedEntityCrossReference.value, __DeleteSuppressedEntityCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteEntityCrossReference uses Python identifier DeleteEntityCrossReference
    __DeleteEntityCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteEntityCrossReference'), 'DeleteEntityCrossReference', '__httpwww_stibosystems_comstep_EntityType_httpwww_stibosystems_comstepDeleteEntityCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3753, 20), )

    
    DeleteEntityCrossReference = property(__DeleteEntityCrossReference.value, __DeleteEntityCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SuppressedEntityCrossReference uses Python identifier SuppressedEntityCrossReference
    __SuppressedEntityCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SuppressedEntityCrossReference'), 'SuppressedEntityCrossReference', '__httpwww_stibosystems_comstep_EntityType_httpwww_stibosystems_comstepSuppressedEntityCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3755, 20), )

    
    SuppressedEntityCrossReference = property(__SuppressedEntityCrossReference.value, __SuppressedEntityCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}EntityCrossReference uses Python identifier EntityCrossReference
    __EntityCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EntityCrossReference'), 'EntityCrossReference', '__httpwww_stibosystems_comstep_EntityType_httpwww_stibosystems_comstepEntityCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3757, 20), )

    
    EntityCrossReference = property(__EntityCrossReference.value, __EntityCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SuppressedContextCrossReference uses Python identifier SuppressedContextCrossReference
    __SuppressedContextCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SuppressedContextCrossReference'), 'SuppressedContextCrossReference', '__httpwww_stibosystems_comstep_EntityType_httpwww_stibosystems_comstepSuppressedContextCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3761, 20), )

    
    SuppressedContextCrossReference = property(__SuppressedContextCrossReference.value, __SuppressedContextCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ContextCrossReference uses Python identifier ContextCrossReference
    __ContextCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ContextCrossReference'), 'ContextCrossReference', '__httpwww_stibosystems_comstep_EntityType_httpwww_stibosystems_comstepContextCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3763, 20), )

    
    ContextCrossReference = property(__ContextCrossReference.value, __ContextCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SuppressedWorkspaceCrossReference uses Python identifier SuppressedWorkspaceCrossReference
    __SuppressedWorkspaceCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SuppressedWorkspaceCrossReference'), 'SuppressedWorkspaceCrossReference', '__httpwww_stibosystems_comstep_EntityType_httpwww_stibosystems_comstepSuppressedWorkspaceCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3767, 20), )

    
    SuppressedWorkspaceCrossReference = property(__SuppressedWorkspaceCrossReference.value, __SuppressedWorkspaceCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}WorkspaceCrossReference uses Python identifier WorkspaceCrossReference
    __WorkspaceCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'WorkspaceCrossReference'), 'WorkspaceCrossReference', '__httpwww_stibosystems_comstep_EntityType_httpwww_stibosystems_comstepWorkspaceCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3769, 20), )

    
    WorkspaceCrossReference = property(__WorkspaceCrossReference.value, __WorkspaceCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Values uses Python identifier Values
    __Values = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Values'), 'Values', '__httpwww_stibosystems_comstep_EntityType_httpwww_stibosystems_comstepValues', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3772, 16), )

    
    Values = property(__Values.value, __Values.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DataContainers uses Python identifier DataContainers
    __DataContainers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DataContainers'), 'DataContainers', '__httpwww_stibosystems_comstep_EntityType_httpwww_stibosystems_comstepDataContainers', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3773, 16), )

    
    DataContainers = property(__DataContainers.value, __DataContainers.set, None, None)

    
    # Element {http://www.stibosystems.com/step}CurrentTasks uses Python identifier CurrentTasks
    __CurrentTasks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CurrentTasks'), 'CurrentTasks', '__httpwww_stibosystems_comstep_EntityType_httpwww_stibosystems_comstepCurrentTasks', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3774, 16), )

    
    CurrentTasks = property(__CurrentTasks.value, __CurrentTasks.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Terms uses Python identifier Terms
    __Terms = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Terms'), 'Terms', '__httpwww_stibosystems_comstep_EntityType_httpwww_stibosystems_comstepTerms', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3775, 16), )

    
    Terms = property(__Terms.value, __Terms.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_EntityType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3778, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3778, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    
    # Attribute SourcePos uses Python identifier SourcePos
    __SourcePos = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SourcePos'), 'SourcePos', '__httpwww_stibosystems_comstep_EntityType_SourcePos', pyxb.binding.datatypes.string)
    __SourcePos._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3779, 8)
    __SourcePos._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3779, 8)
    
    SourcePos = property(__SourcePos.value, __SourcePos.set, None, None)

    
    # Attribute AnalyzerResult uses Python identifier AnalyzerResult
    __AnalyzerResult = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AnalyzerResult'), 'AnalyzerResult', '__httpwww_stibosystems_comstep_EntityType_AnalyzerResult', pyxb.binding.datatypes.string)
    __AnalyzerResult._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3780, 8)
    __AnalyzerResult._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3780, 8)
    
    AnalyzerResult = property(__AnalyzerResult.value, __AnalyzerResult.set, None, '\n                    @Deprecated, to be removed in a future release.\n                ')

    
    # Attribute ParentID uses Python identifier ParentID
    __ParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ParentID'), 'ParentID', '__httpwww_stibosystems_comstep_EntityType_ParentID', _module_typeBindings.StepEntityID)
    __ParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3787, 8)
    __ParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3787, 8)
    
    ParentID = property(__ParentID.value, __ParentID.set, None, '\n                    The parent entity of this entity. Required for creation if no ParentKeyValue is supplied and if the\n                    entity is not nested inside another entity element.\n                ')

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_EntityType_ID', _module_typeBindings.StepEntityID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3795, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3795, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    ID of the entity. Not required for creation if auto IDs are configured for the entity object type.\n                    Not required for updates if a KeyValue is supplied.\n                ')

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_EntityType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3803, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3803, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, '\n                    Identifies which contexts this object is visible in. If not specified the current context is used.\n                ')

    
    # Attribute Republished uses Python identifier Republished
    __Republished = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Republished'), 'Republished', '__httpwww_stibosystems_comstep_EntityType_Republished', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Republished._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3810, 8)
    __Republished._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3810, 8)
    
    Republished = property(__Republished.value, __Republished.set, None, None)

    
    # Attribute UserTypeID uses Python identifier UserTypeID
    __UserTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserTypeID'), 'UserTypeID', '__httpwww_stibosystems_comstep_EntityType_UserTypeID', _module_typeBindings.StepObjectTypeID)
    __UserTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3812, 8)
    __UserTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3812, 8)
    
    UserTypeID = property(__UserTypeID.value, __UserTypeID.set, None, '\n                    The object type ID. Required for creation unless a DefaultUserTypeID has been specified.\n                ')

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_EntityType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3819, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3819, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_EntityType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3820, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3820, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    _ElementMap.update({
        __KeyValue.name() : __KeyValue,
        __ParentKeyValue.name() : __ParentKeyValue,
        __Name.name() : __Name,
        __Entity.name() : __Entity,
        __DeleteSuppressedClassificationCrossReference.name() : __DeleteSuppressedClassificationCrossReference,
        __DeleteClassificationCrossReference.name() : __DeleteClassificationCrossReference,
        __SuppressedClassificationCrossReference.name() : __SuppressedClassificationCrossReference,
        __ClassificationCrossReference.name() : __ClassificationCrossReference,
        __DeleteSuppressedProductCrossReference.name() : __DeleteSuppressedProductCrossReference,
        __DeleteProductCrossReference.name() : __DeleteProductCrossReference,
        __SuppressedProductCrossReference.name() : __SuppressedProductCrossReference,
        __ProductCrossReference.name() : __ProductCrossReference,
        __DeleteSuppressedAssetCrossReference.name() : __DeleteSuppressedAssetCrossReference,
        __DeleteAssetCrossReference.name() : __DeleteAssetCrossReference,
        __SuppressedAssetCrossReference.name() : __SuppressedAssetCrossReference,
        __AssetCrossReference.name() : __AssetCrossReference,
        __DeleteSuppressedEntityCrossReference.name() : __DeleteSuppressedEntityCrossReference,
        __DeleteEntityCrossReference.name() : __DeleteEntityCrossReference,
        __SuppressedEntityCrossReference.name() : __SuppressedEntityCrossReference,
        __EntityCrossReference.name() : __EntityCrossReference,
        __SuppressedContextCrossReference.name() : __SuppressedContextCrossReference,
        __ContextCrossReference.name() : __ContextCrossReference,
        __SuppressedWorkspaceCrossReference.name() : __SuppressedWorkspaceCrossReference,
        __WorkspaceCrossReference.name() : __WorkspaceCrossReference,
        __Values.name() : __Values,
        __DataContainers.name() : __DataContainers,
        __CurrentTasks.name() : __CurrentTasks,
        __Terms.name() : __Terms
    })
    _AttributeMap.update({
        __Changed.name() : __Changed,
        __SourcePos.name() : __SourcePos,
        __AnalyzerResult.name() : __AnalyzerResult,
        __ParentID.name() : __ParentID,
        __ID.name() : __ID,
        __QualifierID.name() : __QualifierID,
        __Republished.name() : __Republished,
        __UserTypeID.name() : __UserTypeID,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced
    })
_module_typeBindings.EntityType = EntityType
Namespace.addCategoryObject('typeBinding', 'EntityType', EntityType)


# Complex type {http://www.stibosystems.com/step}EventProcessorType with content type ELEMENT_ONLY
class EventProcessorType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents an event processor.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EventProcessorType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3832, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}SetupGroupLink uses Python identifier SetupGroupLink
    __SetupGroupLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink'), 'SetupGroupLink', '__httpwww_stibosystems_comstep_EventProcessorType_httpwww_stibosystems_comstepSetupGroupLink', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3839, 12), )

    
    SetupGroupLink = property(__SetupGroupLink.value, __SetupGroupLink.set, None, '\n                        The setup group the event processor is located in.\n                    ')

    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_EventProcessorType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3846, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_EventProcessorType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3847, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Configuration uses Python identifier Configuration
    __Configuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), 'Configuration', '__httpwww_stibosystems_comstep_EventProcessorType_httpwww_stibosystems_comstepConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3848, 12), )

    
    Configuration = property(__Configuration.value, __Configuration.set, None, '\n                        The configuration in encoded form.\n                    ')

    
    # Element {http://www.stibosystems.com/step}EventQueue uses Python identifier EventQueue
    __EventQueue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EventQueue'), 'EventQueue', '__httpwww_stibosystems_comstep_EventProcessorType_httpwww_stibosystems_comstepEventQueue', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3855, 12), )

    
    EventQueue = property(__EventQueue.value, __EventQueue.set, None, '\n                        The behind-the-scenes event queue of the event processor. This event queue is privately owned by\n                        this event processor and thus not accessible from anywhere else.\n                    ')

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_EventProcessorType_ID', _module_typeBindings.StepEventProcessorID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3864, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3864, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute UserTypeID uses Python identifier UserTypeID
    __UserTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserTypeID'), 'UserTypeID', '__httpwww_stibosystems_comstep_EventProcessorType_UserTypeID', _module_typeBindings.StepObjectTypeID)
    __UserTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3865, 8)
    __UserTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3865, 8)
    
    UserTypeID = property(__UserTypeID.value, __UserTypeID.set, None, '\n                    Determines what kind of event processor this is.\n                ')

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_EventProcessorType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3872, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3872, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_EventProcessorType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3873, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3873, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_EventProcessorType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3874, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3874, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __SetupGroupLink.name() : __SetupGroupLink,
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __Configuration.name() : __Configuration,
        __EventQueue.name() : __EventQueue
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __UserTypeID.name() : __UserTypeID,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed
    })
_module_typeBindings.EventProcessorType = EventProcessorType
Namespace.addCategoryObject('typeBinding', 'EventProcessorType', EventProcessorType)


# Complex type {http://www.stibosystems.com/step}EventQueueLinkType with content type EMPTY
class EventQueueLinkType (pyxb.binding.basis.complexTypeDefinition):
    """
                A link to an event queue.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EventQueueLinkType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3876, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute EventQueueID uses Python identifier EventQueueID
    __EventQueueID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'EventQueueID'), 'EventQueueID', '__httpwww_stibosystems_comstep_EventQueueLinkType_EventQueueID', _module_typeBindings.StepEventQueueID, required=True)
    __EventQueueID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3882, 8)
    __EventQueueID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3882, 8)
    
    EventQueueID = property(__EventQueueID.value, __EventQueueID.set, None, '\n                    ID of the event queue.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __EventQueueID.name() : __EventQueueID
    })
_module_typeBindings.EventQueueLinkType = EventQueueLinkType
Namespace.addCategoryObject('typeBinding', 'EventQueueLinkType', EventQueueLinkType)


# Complex type {http://www.stibosystems.com/step}EventQueueType with content type ELEMENT_ONLY
class EventQueueType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents an event queue.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EventQueueType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3890, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_EventQueueType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3897, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_EventQueueType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3898, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Configuration uses Python identifier Configuration
    __Configuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), 'Configuration', '__httpwww_stibosystems_comstep_EventQueueType_httpwww_stibosystems_comstepConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3899, 12), )

    
    Configuration = property(__Configuration.value, __Configuration.set, None, '\n                        Configuration in encoded form.\n                    ')

    
    # Attribute DaysRetained uses Python identifier DaysRetained
    __DaysRetained = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DaysRetained'), 'DaysRetained', '__httpwww_stibosystems_comstep_EventQueueType_DaysRetained', pyxb.binding.datatypes.string)
    __DaysRetained._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3907, 8)
    __DaysRetained._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3907, 8)
    
    DaysRetained = property(__DaysRetained.value, __DaysRetained.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_EventQueueType_ID', _module_typeBindings.StepEventQueueID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3908, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3908, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute QueueStatus uses Python identifier QueueStatus
    __QueueStatus = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QueueStatus'), 'QueueStatus', '__httpwww_stibosystems_comstep_EventQueueType_QueueStatus', _module_typeBindings.STD_ANON_9, unicode_default='Read')
    __QueueStatus._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3909, 8)
    __QueueStatus._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3909, 8)
    
    QueueStatus = property(__QueueStatus.value, __QueueStatus.set, None, None)

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_EventQueueType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3917, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3917, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_EventQueueType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3918, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3918, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_EventQueueType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3919, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3919, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    
    # Attribute Deleted uses Python identifier Deleted
    __Deleted = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Deleted'), 'Deleted', '__httpwww_stibosystems_comstep_EventQueueType_Deleted', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Deleted._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3920, 8)
    __Deleted._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3920, 8)
    
    Deleted = property(__Deleted.value, __Deleted.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __Configuration.name() : __Configuration
    })
    _AttributeMap.update({
        __DaysRetained.name() : __DaysRetained,
        __ID.name() : __ID,
        __QueueStatus.name() : __QueueStatus,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed,
        __Deleted.name() : __Deleted
    })
_module_typeBindings.EventQueueType = EventQueueType
Namespace.addCategoryObject('typeBinding', 'EventQueueType', EventQueueType)


# Complex type {http://www.stibosystems.com/step}ExportConfigurationType with content type ELEMENT_ONLY
class ExportConfigurationType (pyxb.binding.basis.complexTypeDefinition):
    """
                An export configuration.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ExportConfigurationType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3933, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_ExportConfigurationType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3940, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_ExportConfigurationType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3941, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ClassificationReference uses Python identifier ClassificationReference
    __ClassificationReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClassificationReference'), 'ClassificationReference', '__httpwww_stibosystems_comstep_ExportConfigurationType_httpwww_stibosystems_comstepClassificationReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3942, 12), )

    
    ClassificationReference = property(__ClassificationReference.value, __ClassificationReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Configuration uses Python identifier Configuration
    __Configuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), 'Configuration', '__httpwww_stibosystems_comstep_ExportConfigurationType_httpwww_stibosystems_comstepConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3944, 12), )

    
    Configuration = property(__Configuration.value, __Configuration.set, None, '\n                        The configuration in encoded form.\n                    ')

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_ExportConfigurationType_ID', _module_typeBindings.StepAssetID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3952, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3952, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    Export configuration ID. Not required for creation if auto IDs are configured for the object type.\n                ')

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __ClassificationReference.name() : __ClassificationReference,
        __Configuration.name() : __Configuration
    })
    _AttributeMap.update({
        __ID.name() : __ID
    })
_module_typeBindings.ExportConfigurationType = ExportConfigurationType
Namespace.addCategoryObject('typeBinding', 'ExportConfigurationType', ExportConfigurationType)


# Complex type {http://www.stibosystems.com/step}TranslationConfigurationType with content type ELEMENT_ONLY
class TranslationConfigurationType (pyxb.binding.basis.complexTypeDefinition):
    """
                A translation configuration.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TranslationConfigurationType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3960, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_TranslationConfigurationType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3967, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_TranslationConfigurationType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3968, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ClassificationReference uses Python identifier ClassificationReference
    __ClassificationReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClassificationReference'), 'ClassificationReference', '__httpwww_stibosystems_comstep_TranslationConfigurationType_httpwww_stibosystems_comstepClassificationReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3969, 12), )

    
    ClassificationReference = property(__ClassificationReference.value, __ClassificationReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Configuration uses Python identifier Configuration
    __Configuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), 'Configuration', '__httpwww_stibosystems_comstep_TranslationConfigurationType_httpwww_stibosystems_comstepConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3971, 12), )

    
    Configuration = property(__Configuration.value, __Configuration.set, None, '\n                        The configuration in encoded form.\n                    ')

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_TranslationConfigurationType_ID', _module_typeBindings.StepAssetID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3979, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3979, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    Translation configuration ID. Not required for creation if auto IDs are configured for the object type.\n                ')

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __ClassificationReference.name() : __ClassificationReference,
        __Configuration.name() : __Configuration
    })
    _AttributeMap.update({
        __ID.name() : __ID
    })
_module_typeBindings.TranslationConfigurationType = TranslationConfigurationType
Namespace.addCategoryObject('typeBinding', 'TranslationConfigurationType', TranslationConfigurationType)


# Complex type {http://www.stibosystems.com/step}FootnoteTagType with content type ELEMENT_ONLY
class FootnoteTagType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a footnote tag.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FootnoteTagType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4037, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}TagFormat uses Python identifier TagFormat
    __TagFormat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TagFormat'), 'TagFormat', '__httpwww_stibosystems_comstep_FootnoteTagType_httpwww_stibosystems_comstepTagFormat', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4044, 12), )

    
    TagFormat = property(__TagFormat.value, __TagFormat.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_FootnoteTagType_ID', _module_typeBindings.TagID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4046, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4046, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    ID of tag - in STEP GUI presented as Name of tag. Must be unique across all tag types.\n                ')

    
    # Attribute Tag uses Python identifier Tag
    __Tag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Tag'), 'Tag', '__httpwww_stibosystems_comstep_FootnoteTagType_Tag', pyxb.binding.datatypes.string, required=True)
    __Tag._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4053, 8)
    __Tag._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4053, 8)
    
    Tag = property(__Tag.value, __Tag.set, None, '\n                    Tag name. Must be unique across all tag types.\n                ')

    
    # Attribute ParentID uses Python identifier ParentID
    __ParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ParentID'), 'ParentID', '__httpwww_stibosystems_comstep_FootnoteTagType_ParentID', _module_typeBindings.StepTagGroupID)
    __ParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4060, 8)
    __ParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4060, 8)
    
    ParentID = property(__ParentID.value, __ParentID.set, None, '\n                    ID of the parent tag group. If not supplied and tag not already exists it will be created on top\n                    level.\n                ')

    _ElementMap.update({
        __TagFormat.name() : __TagFormat
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __Tag.name() : __Tag,
        __ParentID.name() : __ParentID
    })
_module_typeBindings.FootnoteTagType = FootnoteTagType
Namespace.addCategoryObject('typeBinding', 'FootnoteTagType', FootnoteTagType)


# Complex type {http://www.stibosystems.com/step}FrameType with content type ELEMENT_ONLY
class FrameType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}FrameType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FrameType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4083, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}ProductElement uses Python identifier ProductElement
    __ProductElement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ProductElement'), 'ProductElement', '__httpwww_stibosystems_comstep_FrameType_httpwww_stibosystems_comstepProductElement', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4085, 12), )

    
    ProductElement = property(__ProductElement.value, __ProductElement.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AssetElement uses Python identifier AssetElement
    __AssetElement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssetElement'), 'AssetElement', '__httpwww_stibosystems_comstep_FrameType_httpwww_stibosystems_comstepAssetElement', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4086, 12), )

    
    AssetElement = property(__AssetElement.value, __AssetElement.set, None, None)

    
    # Element {http://www.stibosystems.com/step}TextElement uses Python identifier TextElement
    __TextElement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TextElement'), 'TextElement', '__httpwww_stibosystems_comstep_FrameType_httpwww_stibosystems_comstepTextElement', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4087, 12), )

    
    TextElement = property(__TextElement.value, __TextElement.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ClassificationElement uses Python identifier ClassificationElement
    __ClassificationElement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClassificationElement'), 'ClassificationElement', '__httpwww_stibosystems_comstep_FrameType_httpwww_stibosystems_comstepClassificationElement', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4088, 12), )

    
    ClassificationElement = property(__ClassificationElement.value, __ClassificationElement.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_FrameType_ID', _module_typeBindings.StepID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4090, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4090, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute X uses Python identifier X
    __X = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'X'), 'X', '__httpwww_stibosystems_comstep_FrameType_X', _module_typeBindings.TwoDecimalValueType)
    __X._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4091, 8)
    __X._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4091, 8)
    
    X = property(__X.value, __X.set, None, None)

    
    # Attribute Y uses Python identifier Y
    __Y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Y'), 'Y', '__httpwww_stibosystems_comstep_FrameType_Y', _module_typeBindings.TwoDecimalValueType)
    __Y._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4092, 8)
    __Y._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4092, 8)
    
    Y = property(__Y.value, __Y.set, None, None)

    
    # Attribute Width uses Python identifier Width
    __Width = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Width'), 'Width', '__httpwww_stibosystems_comstep_FrameType_Width', _module_typeBindings.TwoDecimalValueType)
    __Width._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4093, 8)
    __Width._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4093, 8)
    
    Width = property(__Width.value, __Width.set, None, None)

    
    # Attribute Height uses Python identifier Height
    __Height = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Height'), 'Height', '__httpwww_stibosystems_comstep_FrameType_Height', _module_typeBindings.TwoDecimalValueType)
    __Height._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4094, 8)
    __Height._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4094, 8)
    
    Height = property(__Height.value, __Height.set, None, None)

    
    # Attribute ZOrder uses Python identifier ZOrder
    __ZOrder = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ZOrder'), 'ZOrder', '__httpwww_stibosystems_comstep_FrameType_ZOrder', pyxb.binding.datatypes.integer)
    __ZOrder._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4095, 8)
    __ZOrder._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4095, 8)
    
    ZOrder = property(__ZOrder.value, __ZOrder.set, None, None)

    
    # Attribute UnitID uses Python identifier UnitID
    __UnitID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UnitID'), 'UnitID', '__httpwww_stibosystems_comstep_FrameType_UnitID', _module_typeBindings.StepUnitID)
    __UnitID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4096, 8)
    __UnitID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4096, 8)
    
    UnitID = property(__UnitID.value, __UnitID.set, None, None)

    _ElementMap.update({
        __ProductElement.name() : __ProductElement,
        __AssetElement.name() : __AssetElement,
        __TextElement.name() : __TextElement,
        __ClassificationElement.name() : __ClassificationElement
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __X.name() : __X,
        __Y.name() : __Y,
        __Width.name() : __Width,
        __Height.name() : __Height,
        __ZOrder.name() : __ZOrder,
        __UnitID.name() : __UnitID
    })
_module_typeBindings.FrameType = FrameType
Namespace.addCategoryObject('typeBinding', 'FrameType', FrameType)


# Complex type {http://www.stibosystems.com/step}GalleyElementType with content type ELEMENT_ONLY
class GalleyElementType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}GalleyElementType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GalleyElementType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4098, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}ProductElement uses Python identifier ProductElement
    __ProductElement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ProductElement'), 'ProductElement', '__httpwww_stibosystems_comstep_GalleyElementType_httpwww_stibosystems_comstepProductElement', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4100, 12), )

    
    ProductElement = property(__ProductElement.value, __ProductElement.set, None, None)

    
    # Attribute TemplateID uses Python identifier TemplateID
    __TemplateID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TemplateID'), 'TemplateID', '__httpwww_stibosystems_comstep_GalleyElementType_TemplateID', _module_typeBindings.StepID, required=True)
    __TemplateID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4102, 8)
    __TemplateID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4102, 8)
    
    TemplateID = property(__TemplateID.value, __TemplateID.set, None, None)

    
    # Attribute ProductID uses Python identifier ProductID
    __ProductID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ProductID'), 'ProductID', '__httpwww_stibosystems_comstep_GalleyElementType_ProductID', _module_typeBindings.StepProductID)
    __ProductID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4103, 8)
    __ProductID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4103, 8)
    
    ProductID = property(__ProductID.value, __ProductID.set, None, None)

    
    # Attribute FrameID uses Python identifier FrameID
    __FrameID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'FrameID'), 'FrameID', '__httpwww_stibosystems_comstep_GalleyElementType_FrameID', _module_typeBindings.StepID)
    __FrameID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4104, 8)
    __FrameID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4104, 8)
    
    FrameID = property(__FrameID.value, __FrameID.set, None, None)

    _ElementMap.update({
        __ProductElement.name() : __ProductElement
    })
    _AttributeMap.update({
        __TemplateID.name() : __TemplateID,
        __ProductID.name() : __ProductID,
        __FrameID.name() : __FrameID
    })
_module_typeBindings.GalleyElementType = GalleyElementType
Namespace.addCategoryObject('typeBinding', 'GalleyElementType', GalleyElementType)


# Complex type {http://www.stibosystems.com/step}GalleyFrameType with content type ELEMENT_ONLY
class GalleyFrameType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}GalleyFrameType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GalleyFrameType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4106, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}ProductElement uses Python identifier ProductElement
    __ProductElement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ProductElement'), 'ProductElement', '__httpwww_stibosystems_comstep_GalleyFrameType_httpwww_stibosystems_comstepProductElement', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4108, 12), )

    
    ProductElement = property(__ProductElement.value, __ProductElement.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_GalleyFrameType_ID', _module_typeBindings.StepID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4110, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4110, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute TemplateID uses Python identifier TemplateID
    __TemplateID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TemplateID'), 'TemplateID', '__httpwww_stibosystems_comstep_GalleyFrameType_TemplateID', _module_typeBindings.StepID)
    __TemplateID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4111, 8)
    __TemplateID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4111, 8)
    
    TemplateID = property(__TemplateID.value, __TemplateID.set, None, None)

    
    # Attribute X uses Python identifier X
    __X = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'X'), 'X', '__httpwww_stibosystems_comstep_GalleyFrameType_X', _module_typeBindings.TwoDecimalValueType)
    __X._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4112, 8)
    __X._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4112, 8)
    
    X = property(__X.value, __X.set, None, None)

    
    # Attribute Y uses Python identifier Y
    __Y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Y'), 'Y', '__httpwww_stibosystems_comstep_GalleyFrameType_Y', _module_typeBindings.TwoDecimalValueType)
    __Y._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4113, 8)
    __Y._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4113, 8)
    
    Y = property(__Y.value, __Y.set, None, None)

    
    # Attribute Width uses Python identifier Width
    __Width = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Width'), 'Width', '__httpwww_stibosystems_comstep_GalleyFrameType_Width', _module_typeBindings.TwoDecimalValueType)
    __Width._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4114, 8)
    __Width._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4114, 8)
    
    Width = property(__Width.value, __Width.set, None, None)

    
    # Attribute Height uses Python identifier Height
    __Height = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Height'), 'Height', '__httpwww_stibosystems_comstep_GalleyFrameType_Height', _module_typeBindings.TwoDecimalValueType)
    __Height._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4115, 8)
    __Height._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4115, 8)
    
    Height = property(__Height.value, __Height.set, None, None)

    
    # Attribute ZOrder uses Python identifier ZOrder
    __ZOrder = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ZOrder'), 'ZOrder', '__httpwww_stibosystems_comstep_GalleyFrameType_ZOrder', pyxb.binding.datatypes.integer)
    __ZOrder._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4116, 8)
    __ZOrder._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4116, 8)
    
    ZOrder = property(__ZOrder.value, __ZOrder.set, None, None)

    
    # Attribute UnitID uses Python identifier UnitID
    __UnitID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UnitID'), 'UnitID', '__httpwww_stibosystems_comstep_GalleyFrameType_UnitID', _module_typeBindings.StepUnitID)
    __UnitID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4117, 8)
    __UnitID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4117, 8)
    
    UnitID = property(__UnitID.value, __UnitID.set, None, None)

    _ElementMap.update({
        __ProductElement.name() : __ProductElement
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __TemplateID.name() : __TemplateID,
        __X.name() : __X,
        __Y.name() : __Y,
        __Width.name() : __Width,
        __Height.name() : __Height,
        __ZOrder.name() : __ZOrder,
        __UnitID.name() : __UnitID
    })
_module_typeBindings.GalleyFrameType = GalleyFrameType
Namespace.addCategoryObject('typeBinding', 'GalleyFrameType', GalleyFrameType)


# Complex type {http://www.stibosystems.com/step}GatewayIntegrationEndpointType with content type ELEMENT_ONLY
class GatewayIntegrationEndpointType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents an integration endpoint used for communication with external systems.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GatewayIntegrationEndpointType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4119, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}SetupGroupLink uses Python identifier SetupGroupLink
    __SetupGroupLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink'), 'SetupGroupLink', '__httpwww_stibosystems_comstep_GatewayIntegrationEndpointType_httpwww_stibosystems_comstepSetupGroupLink', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4126, 12), )

    
    SetupGroupLink = property(__SetupGroupLink.value, __SetupGroupLink.set, None, '\n                        The setup group the endpoint is located in.\n                    ')

    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_GatewayIntegrationEndpointType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4133, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_GatewayIntegrationEndpointType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4134, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Configuration uses Python identifier Configuration
    __Configuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), 'Configuration', '__httpwww_stibosystems_comstep_GatewayIntegrationEndpointType_httpwww_stibosystems_comstepConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4135, 12), )

    
    Configuration = property(__Configuration.value, __Configuration.set, None, '\n                        The configuration in encoded form.\n                    ')

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_GatewayIntegrationEndpointType_ID', _module_typeBindings.StepGatewayEndPointID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4143, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4143, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute UserTypeID uses Python identifier UserTypeID
    __UserTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserTypeID'), 'UserTypeID', '__httpwww_stibosystems_comstep_GatewayIntegrationEndpointType_UserTypeID', _module_typeBindings.StepObjectTypeID)
    __UserTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4144, 8)
    __UserTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4144, 8)
    
    UserTypeID = property(__UserTypeID.value, __UserTypeID.set, None, '\n                    Determines what kind of integration endpoint this is.\n                ')

    
    # Attribute Description uses Python identifier Description
    __Description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Description'), 'Description', '__httpwww_stibosystems_comstep_GatewayIntegrationEndpointType_Description', pyxb.binding.datatypes.string)
    __Description._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4151, 8)
    __Description._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4151, 8)
    
    Description = property(__Description.value, __Description.set, None, None)

    
    # Attribute Enabled uses Python identifier Enabled
    __Enabled = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Enabled'), 'Enabled', '__httpwww_stibosystems_comstep_GatewayIntegrationEndpointType_Enabled', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Enabled._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4152, 8)
    __Enabled._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4152, 8)
    
    Enabled = property(__Enabled.value, __Enabled.set, None, '\n                    Whether or not gateway integration endpoint is enabled. This setting cannot be updated via import.\n                ')

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_GatewayIntegrationEndpointType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4159, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4159, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_GatewayIntegrationEndpointType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4160, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4160, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_GatewayIntegrationEndpointType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4161, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4161, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __SetupGroupLink.name() : __SetupGroupLink,
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __Configuration.name() : __Configuration
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __UserTypeID.name() : __UserTypeID,
        __Description.name() : __Description,
        __Enabled.name() : __Enabled,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed
    })
_module_typeBindings.GatewayIntegrationEndpointType = GatewayIntegrationEndpointType
Namespace.addCategoryObject('typeBinding', 'GatewayIntegrationEndpointType', GatewayIntegrationEndpointType)


# Complex type {http://www.stibosystems.com/step}HyperlinkTagType with content type ELEMENT_ONLY
class HyperlinkTagType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a hyperlink tag.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HyperlinkTagType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4223, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Configuration uses Python identifier Configuration
    __Configuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), 'Configuration', '__httpwww_stibosystems_comstep_HyperlinkTagType_httpwww_stibosystems_comstepConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4230, 12), )

    
    Configuration = property(__Configuration.value, __Configuration.set, None, '\n                        How tag content should be styled in STEP GUI.\n                    ')

    
    # Element {http://www.stibosystems.com/step}TagFormat uses Python identifier TagFormat
    __TagFormat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TagFormat'), 'TagFormat', '__httpwww_stibosystems_comstep_HyperlinkTagType_httpwww_stibosystems_comstepTagFormat', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4237, 12), )

    
    TagFormat = property(__TagFormat.value, __TagFormat.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_HyperlinkTagType_ID', _module_typeBindings.TagID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4239, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4239, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    ID of tag - in STEP GUI presented as Name of tag. Must be unique across all tag types.\n                ')

    
    # Attribute Tag uses Python identifier Tag
    __Tag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Tag'), 'Tag', '__httpwww_stibosystems_comstep_HyperlinkTagType_Tag', pyxb.binding.datatypes.string, required=True)
    __Tag._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4246, 8)
    __Tag._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4246, 8)
    
    Tag = property(__Tag.value, __Tag.set, None, '\n                    Tag name. Must be unique across all tag types.\n                ')

    
    # Attribute ParentID uses Python identifier ParentID
    __ParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ParentID'), 'ParentID', '__httpwww_stibosystems_comstep_HyperlinkTagType_ParentID', _module_typeBindings.StepTagGroupID)
    __ParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4253, 8)
    __ParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4253, 8)
    
    ParentID = property(__ParentID.value, __ParentID.set, None, '\n                    ID of the parent tag group. If not supplied and tag not already exists it will be created on top level.\n                ')

    _ElementMap.update({
        __Configuration.name() : __Configuration,
        __TagFormat.name() : __TagFormat
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __Tag.name() : __Tag,
        __ParentID.name() : __ParentID
    })
_module_typeBindings.HyperlinkTagType = HyperlinkTagType
Namespace.addCategoryObject('typeBinding', 'HyperlinkTagType', HyperlinkTagType)


# Complex type {http://www.stibosystems.com/step}ImportConfigurationType with content type ELEMENT_ONLY
class ImportConfigurationType (pyxb.binding.basis.complexTypeDefinition):
    """
                An import configuration.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ImportConfigurationType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4261, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_ImportConfigurationType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4268, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_ImportConfigurationType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4269, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ClassificationReference uses Python identifier ClassificationReference
    __ClassificationReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClassificationReference'), 'ClassificationReference', '__httpwww_stibosystems_comstep_ImportConfigurationType_httpwww_stibosystems_comstepClassificationReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4270, 12), )

    
    ClassificationReference = property(__ClassificationReference.value, __ClassificationReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Configuration uses Python identifier Configuration
    __Configuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), 'Configuration', '__httpwww_stibosystems_comstep_ImportConfigurationType_httpwww_stibosystems_comstepConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4272, 12), )

    
    Configuration = property(__Configuration.value, __Configuration.set, None, '\n                        The configuration in encoded form.\n                    ')

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_ImportConfigurationType_ID', _module_typeBindings.StepAssetID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4280, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4280, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    Export configuration ID. Not required for creation if auto IDs are configured for the object type.\n                ')

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __ClassificationReference.name() : __ClassificationReference,
        __Configuration.name() : __Configuration
    })
    _AttributeMap.update({
        __ID.name() : __ID
    })
_module_typeBindings.ImportConfigurationType = ImportConfigurationType
Namespace.addCategoryObject('typeBinding', 'ImportConfigurationType', ImportConfigurationType)


# Complex type {http://www.stibosystems.com/step}ImageConversionConfigurationType with content type ELEMENT_ONLY
class ImageConversionConfigurationType (pyxb.binding.basis.complexTypeDefinition):
    """
                An image conversion configuration.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ImageConversionConfigurationType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4288, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_ImageConversionConfigurationType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4295, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_ImageConversionConfigurationType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4296, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ClassificationReference uses Python identifier ClassificationReference
    __ClassificationReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClassificationReference'), 'ClassificationReference', '__httpwww_stibosystems_comstep_ImageConversionConfigurationType_httpwww_stibosystems_comstepClassificationReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4297, 12), )

    
    ClassificationReference = property(__ClassificationReference.value, __ClassificationReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Configuration uses Python identifier Configuration
    __Configuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), 'Configuration', '__httpwww_stibosystems_comstep_ImageConversionConfigurationType_httpwww_stibosystems_comstepConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4299, 12), )

    
    Configuration = property(__Configuration.value, __Configuration.set, None, '\n                        The configuration in encoded form.\n                    ')

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_ImageConversionConfigurationType_ID', _module_typeBindings.StepAssetID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4307, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4307, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    Image conversion configuration ID. Not required for creation if auto IDs are configured for the\n                    object type.\n                ')

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __ClassificationReference.name() : __ClassificationReference,
        __Configuration.name() : __Configuration
    })
    _AttributeMap.update({
        __ID.name() : __ID
    })
_module_typeBindings.ImageConversionConfigurationType = ImageConversionConfigurationType
Namespace.addCategoryObject('typeBinding', 'ImageConversionConfigurationType', ImageConversionConfigurationType)


# Complex type {http://www.stibosystems.com/step}InBoundIntegrationEndpointType with content type ELEMENT_ONLY
class InBoundIntegrationEndpointType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents an integration endpoint for inbound communication. When created via import, the endpoint will
                be disabled.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InBoundIntegrationEndpointType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4337, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}SetupGroupLink uses Python identifier SetupGroupLink
    __SetupGroupLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink'), 'SetupGroupLink', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_httpwww_stibosystems_comstepSetupGroupLink', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4345, 12), )

    
    SetupGroupLink = property(__SetupGroupLink.value, __SetupGroupLink.set, None, '\n                        The setup group the endpoint is located in.\n                    ')

    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4352, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4353, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ScheduleSpecification uses Python identifier ScheduleSpecification
    __ScheduleSpecification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScheduleSpecification'), 'ScheduleSpecification', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_httpwww_stibosystems_comstepScheduleSpecification', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4354, 12), )

    
    ScheduleSpecification = property(__ScheduleSpecification.value, __ScheduleSpecification.set, None, '\n                        The encoded schedule specification.\n                    ')

    
    # Element {http://www.stibosystems.com/step}PreProcessorPluginConfiguration uses Python identifier PreProcessorPluginConfiguration
    __PreProcessorPluginConfiguration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PreProcessorPluginConfiguration'), 'PreProcessorPluginConfiguration', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_httpwww_stibosystems_comstepPreProcessorPluginConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4361, 12), )

    
    PreProcessorPluginConfiguration = property(__PreProcessorPluginConfiguration.value, __PreProcessorPluginConfiguration.set, None, '\n                        The encoded preprocessor plugin configuration.\n                    ')

    
    # Element {http://www.stibosystems.com/step}PostProcessorPluginConfiguration uses Python identifier PostProcessorPluginConfiguration
    __PostProcessorPluginConfiguration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PostProcessorPluginConfiguration'), 'PostProcessorPluginConfiguration', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_httpwww_stibosystems_comstepPostProcessorPluginConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4368, 12), )

    
    PostProcessorPluginConfiguration = property(__PostProcessorPluginConfiguration.value, __PostProcessorPluginConfiguration.set, None, '\n                        The encoded postprocessor plugin configuration.\n                    ')

    
    # Element {http://www.stibosystems.com/step}ReceiverPluginConfiguration uses Python identifier ReceiverPluginConfiguration
    __ReceiverPluginConfiguration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReceiverPluginConfiguration'), 'ReceiverPluginConfiguration', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_httpwww_stibosystems_comstepReceiverPluginConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4375, 12), )

    
    ReceiverPluginConfiguration = property(__ReceiverPluginConfiguration.value, __ReceiverPluginConfiguration.set, None, '\n                        The encoded receiver plugin configuration.\n                    ')

    
    # Element {http://www.stibosystems.com/step}ProcessPluginConfiguration uses Python identifier ProcessPluginConfiguration
    __ProcessPluginConfiguration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ProcessPluginConfiguration'), 'ProcessPluginConfiguration', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_httpwww_stibosystems_comstepProcessPluginConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4382, 12), )

    
    ProcessPluginConfiguration = property(__ProcessPluginConfiguration.value, __ProcessPluginConfiguration.set, None, '\n                        The encoded process plugin configuration.\n                    ')

    
    # Element {http://www.stibosystems.com/step}SampleFileConfiguration uses Python identifier SampleFileConfiguration
    __SampleFileConfiguration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SampleFileConfiguration'), 'SampleFileConfiguration', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_httpwww_stibosystems_comstepSampleFileConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4389, 12), )

    
    SampleFileConfiguration = property(__SampleFileConfiguration.value, __SampleFileConfiguration.set, None, '\n                        Encoded sample file content.\n                    ')

    
    # Element {http://www.stibosystems.com/step}ErrorReporterPluginConfiguration uses Python identifier ErrorReporterPluginConfiguration
    __ErrorReporterPluginConfiguration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ErrorReporterPluginConfiguration'), 'ErrorReporterPluginConfiguration', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_httpwww_stibosystems_comstepErrorReporterPluginConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4396, 12), )

    
    ErrorReporterPluginConfiguration = property(__ErrorReporterPluginConfiguration.value, __ErrorReporterPluginConfiguration.set, None, '\n                        The encoded error reporter plugin configuration.\n                    ')

    
    # Element {http://www.stibosystems.com/step}ContextLink uses Python identifier ContextLink
    __ContextLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ContextLink'), 'ContextLink', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_httpwww_stibosystems_comstepContextLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4403, 12), )

    
    ContextLink = property(__ContextLink.value, __ContextLink.set, None, '\n                        ID of the default import context.\n                    ')

    
    # Element {http://www.stibosystems.com/step}WorkspaceID uses Python identifier WorkspaceID
    __WorkspaceID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'WorkspaceID'), 'WorkspaceID', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_httpwww_stibosystems_comstepWorkspaceID', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4410, 12), )

    
    WorkspaceID = property(__WorkspaceID.value, __WorkspaceID.set, None, '\n                        ID of the default import workspace.\n                    ')

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_ID', _module_typeBindings.StepInboundEndPointID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4418, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4418, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute UserTypeID uses Python identifier UserTypeID
    __UserTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserTypeID'), 'UserTypeID', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_UserTypeID', _module_typeBindings.StepObjectTypeID)
    __UserTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4419, 8)
    __UserTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4419, 8)
    
    UserTypeID = property(__UserTypeID.value, __UserTypeID.set, None, '\n                    Determines what kind of integration endpoint this is.\n                ')

    
    # Attribute Description uses Python identifier Description
    __Description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Description'), 'Description', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_Description', pyxb.binding.datatypes.string)
    __Description._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4426, 8)
    __Description._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4426, 8)
    
    Description = property(__Description.value, __Description.set, None, None)

    
    # Attribute ResponsibleUserID uses Python identifier ResponsibleUserID
    __ResponsibleUserID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ResponsibleUserID'), 'ResponsibleUserID', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_ResponsibleUserID', _module_typeBindings.StepUserID, required=True)
    __ResponsibleUserID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4427, 8)
    __ResponsibleUserID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4427, 8)
    
    ResponsibleUserID = property(__ResponsibleUserID.value, __ResponsibleUserID.set, None, '\n                    ID of the user the endpoint is run as.\n                ')

    
    # Attribute MaximumNumberOfFailedBackgroundProcesses uses Python identifier MaximumNumberOfFailedBackgroundProcesses
    __MaximumNumberOfFailedBackgroundProcesses = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MaximumNumberOfFailedBackgroundProcesses'), 'MaximumNumberOfFailedBackgroundProcesses', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_MaximumNumberOfFailedBackgroundProcesses', pyxb.binding.datatypes.string)
    __MaximumNumberOfFailedBackgroundProcesses._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4434, 8)
    __MaximumNumberOfFailedBackgroundProcesses._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4434, 8)
    
    MaximumNumberOfFailedBackgroundProcesses = property(__MaximumNumberOfFailedBackgroundProcesses.value, __MaximumNumberOfFailedBackgroundProcesses.set, None, '\n                    The maximum number of failed background processes to keep for this endpoint. When the limit is reached,\n                    the oldest endpoints will be pruned at regular intervals.\n                ')

    
    # Attribute MaximumAgeOfFailedBackgroundProcesses uses Python identifier MaximumAgeOfFailedBackgroundProcesses
    __MaximumAgeOfFailedBackgroundProcesses = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MaximumAgeOfFailedBackgroundProcesses'), 'MaximumAgeOfFailedBackgroundProcesses', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_MaximumAgeOfFailedBackgroundProcesses', pyxb.binding.datatypes.string)
    __MaximumAgeOfFailedBackgroundProcesses._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4442, 8)
    __MaximumAgeOfFailedBackgroundProcesses._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4442, 8)
    
    MaximumAgeOfFailedBackgroundProcesses = property(__MaximumAgeOfFailedBackgroundProcesses.value, __MaximumAgeOfFailedBackgroundProcesses.set, None, '\n                    The maximum age of failed background processes to keep for this endpoint. All older endpoints will be\n                    deleted at regular intervals. Age should be specified in milliseconds.\n                ')

    
    # Attribute MaximumNumberOfSucceededBackgroundProcesses uses Python identifier MaximumNumberOfSucceededBackgroundProcesses
    __MaximumNumberOfSucceededBackgroundProcesses = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MaximumNumberOfSucceededBackgroundProcesses'), 'MaximumNumberOfSucceededBackgroundProcesses', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_MaximumNumberOfSucceededBackgroundProcesses', pyxb.binding.datatypes.string)
    __MaximumNumberOfSucceededBackgroundProcesses._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4450, 8)
    __MaximumNumberOfSucceededBackgroundProcesses._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4450, 8)
    
    MaximumNumberOfSucceededBackgroundProcesses = property(__MaximumNumberOfSucceededBackgroundProcesses.value, __MaximumNumberOfSucceededBackgroundProcesses.set, None, '\n                    The maximum number of succeeded background processes to keep for this endpoint. When the limit is reached,\n                    the oldest endpoints will be pruned at regular intervals.\n                ')

    
    # Attribute MaximumAgeOfSucceededBackgroundProcesses uses Python identifier MaximumAgeOfSucceededBackgroundProcesses
    __MaximumAgeOfSucceededBackgroundProcesses = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MaximumAgeOfSucceededBackgroundProcesses'), 'MaximumAgeOfSucceededBackgroundProcesses', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_MaximumAgeOfSucceededBackgroundProcesses', pyxb.binding.datatypes.string)
    __MaximumAgeOfSucceededBackgroundProcesses._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4458, 8)
    __MaximumAgeOfSucceededBackgroundProcesses._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4458, 8)
    
    MaximumAgeOfSucceededBackgroundProcesses = property(__MaximumAgeOfSucceededBackgroundProcesses.value, __MaximumAgeOfSucceededBackgroundProcesses.set, None, '\n                    The maximum age of succeeded background processes to keep for this endpoint. All older endpoints will be\n                    deleted at regular intervals. Age should be specified in milliseconds.\n                ')

    
    # Attribute MaxNumberOfActiveBackgroundProcesses uses Python identifier MaxNumberOfActiveBackgroundProcesses
    __MaxNumberOfActiveBackgroundProcesses = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MaxNumberOfActiveBackgroundProcesses'), 'MaxNumberOfActiveBackgroundProcesses', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_MaxNumberOfActiveBackgroundProcesses', pyxb.binding.datatypes.string)
    __MaxNumberOfActiveBackgroundProcesses._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4466, 8)
    __MaxNumberOfActiveBackgroundProcesses._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4466, 8)
    
    MaxNumberOfActiveBackgroundProcesses = property(__MaxNumberOfActiveBackgroundProcesses.value, __MaxNumberOfActiveBackgroundProcesses.set, None, '\n                    The maximum number of active background processes.\n                ')

    
    # Attribute PollInterval uses Python identifier PollInterval
    __PollInterval = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PollInterval'), 'PollInterval', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_PollInterval', pyxb.binding.datatypes.string)
    __PollInterval._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4473, 8)
    __PollInterval._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4473, 8)
    
    PollInterval = property(__PollInterval.value, __PollInterval.set, None, '\n                    The time interval between an endpoint has handled the last requests in the receiver and the endpoint\n                    checks the receiver for new content. The poll interval is assumed to be in seconds and defaults to\n                    30 seconds.\n                ')

    
    # Attribute ReceiverPluginID uses Python identifier ReceiverPluginID
    __ReceiverPluginID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ReceiverPluginID'), 'ReceiverPluginID', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_ReceiverPluginID', pyxb.binding.datatypes.string)
    __ReceiverPluginID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4482, 8)
    __ReceiverPluginID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4482, 8)
    
    ReceiverPluginID = property(__ReceiverPluginID.value, __ReceiverPluginID.set, None, '\n                    The ID of the receiver plugin.\n                ')

    
    # Attribute ProcessPluginID uses Python identifier ProcessPluginID
    __ProcessPluginID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ProcessPluginID'), 'ProcessPluginID', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_ProcessPluginID', pyxb.binding.datatypes.string)
    __ProcessPluginID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4489, 8)
    __ProcessPluginID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4489, 8)
    
    ProcessPluginID = property(__ProcessPluginID.value, __ProcessPluginID.set, None, '\n                    The ID of the process plugin.\n                ')

    
    # Attribute PreProcessorPluginID uses Python identifier PreProcessorPluginID
    __PreProcessorPluginID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PreProcessorPluginID'), 'PreProcessorPluginID', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_PreProcessorPluginID', pyxb.binding.datatypes.string)
    __PreProcessorPluginID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4496, 8)
    __PreProcessorPluginID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4496, 8)
    
    PreProcessorPluginID = property(__PreProcessorPluginID.value, __PreProcessorPluginID.set, None, '\n                    The ID of the preprocessor plugin.\n                ')

    
    # Attribute PostProcessorPluginID uses Python identifier PostProcessorPluginID
    __PostProcessorPluginID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PostProcessorPluginID'), 'PostProcessorPluginID', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_PostProcessorPluginID', pyxb.binding.datatypes.string)
    __PostProcessorPluginID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4503, 8)
    __PostProcessorPluginID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4503, 8)
    
    PostProcessorPluginID = property(__PostProcessorPluginID.value, __PostProcessorPluginID.set, None, '\n                    The ID of the postprocessor plugin.\n                ')

    
    # Attribute ErrorReporterPluginID uses Python identifier ErrorReporterPluginID
    __ErrorReporterPluginID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ErrorReporterPluginID'), 'ErrorReporterPluginID', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_ErrorReporterPluginID', pyxb.binding.datatypes.string)
    __ErrorReporterPluginID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4510, 8)
    __ErrorReporterPluginID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4510, 8)
    
    ErrorReporterPluginID = property(__ErrorReporterPluginID.value, __ErrorReporterPluginID.set, None, '\n                    The ID of the error reporter plugin.\n                ')

    
    # Attribute QueueForEndpoint uses Python identifier QueueForEndpoint
    __QueueForEndpoint = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QueueForEndpoint'), 'QueueForEndpoint', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_QueueForEndpoint', _module_typeBindings.StepEventQueueID)
    __QueueForEndpoint._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4517, 8)
    __QueueForEndpoint._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4517, 8)
    
    QueueForEndpoint = property(__QueueForEndpoint.value, __QueueForEndpoint.set, None, '\n                    The queue the endpoint poller background process for this endpoint is started in.\n                ')

    
    # Attribute QueueForProcssing uses Python identifier QueueForProcssing
    __QueueForProcssing = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QueueForProcssing'), 'QueueForProcssing', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_QueueForProcssing', _module_typeBindings.StepEventQueueID)
    __QueueForProcssing._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4524, 8)
    __QueueForProcssing._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4524, 8)
    
    QueueForProcssing = property(__QueueForProcssing.value, __QueueForProcssing.set, None, '\n                    The queue used when a background process is started to handle the processing part of the endpoint.\n                    The processing part in the endpoint is where data is exported.\n                ')

    
    # Attribute TransactionType uses Python identifier TransactionType
    __TransactionType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TransactionType'), 'TransactionType', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_TransactionType', pyxb.binding.datatypes.string)
    __TransactionType._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4532, 8)
    __TransactionType._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4532, 8)
    
    TransactionType = property(__TransactionType.value, __TransactionType.set, None, '\n                    The transactional setting for this endpoint.\n                ')

    
    # Attribute MessagesPerBackgroundProcess uses Python identifier MessagesPerBackgroundProcess
    __MessagesPerBackgroundProcess = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MessagesPerBackgroundProcess'), 'MessagesPerBackgroundProcess', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_MessagesPerBackgroundProcess', pyxb.binding.datatypes.string)
    __MessagesPerBackgroundProcess._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4539, 8)
    __MessagesPerBackgroundProcess._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4539, 8)
    
    MessagesPerBackgroundProcess = property(__MessagesPerBackgroundProcess.value, __MessagesPerBackgroundProcess.set, None, '\n                    Controls the number of messages to handle per background process when the endpoint is run in\n                    "Strict" mode.\n                ')

    
    # Attribute EnableRetry uses Python identifier EnableRetry
    __EnableRetry = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'EnableRetry'), 'EnableRetry', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_EnableRetry', pyxb.binding.datatypes.boolean, unicode_default='false')
    __EnableRetry._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4547, 8)
    __EnableRetry._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4547, 8)
    
    EnableRetry = property(__EnableRetry.value, __EnableRetry.set, None, '\n                    Allow retry of Receiver plugin on FailAndRetryException.\n                ')

    
    # Attribute RetryDuration uses Python identifier RetryDuration
    __RetryDuration = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'RetryDuration'), 'RetryDuration', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_RetryDuration', pyxb.binding.datatypes.string)
    __RetryDuration._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4554, 8)
    __RetryDuration._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4554, 8)
    
    RetryDuration = property(__RetryDuration.value, __RetryDuration.set, None, '\n                    Max duration of retries before letting the endpoint fail.\n                ')

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4561, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4561, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4562, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4562, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_InBoundIntegrationEndpointType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4563, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4563, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __SetupGroupLink.name() : __SetupGroupLink,
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __ScheduleSpecification.name() : __ScheduleSpecification,
        __PreProcessorPluginConfiguration.name() : __PreProcessorPluginConfiguration,
        __PostProcessorPluginConfiguration.name() : __PostProcessorPluginConfiguration,
        __ReceiverPluginConfiguration.name() : __ReceiverPluginConfiguration,
        __ProcessPluginConfiguration.name() : __ProcessPluginConfiguration,
        __SampleFileConfiguration.name() : __SampleFileConfiguration,
        __ErrorReporterPluginConfiguration.name() : __ErrorReporterPluginConfiguration,
        __ContextLink.name() : __ContextLink,
        __WorkspaceID.name() : __WorkspaceID
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __UserTypeID.name() : __UserTypeID,
        __Description.name() : __Description,
        __ResponsibleUserID.name() : __ResponsibleUserID,
        __MaximumNumberOfFailedBackgroundProcesses.name() : __MaximumNumberOfFailedBackgroundProcesses,
        __MaximumAgeOfFailedBackgroundProcesses.name() : __MaximumAgeOfFailedBackgroundProcesses,
        __MaximumNumberOfSucceededBackgroundProcesses.name() : __MaximumNumberOfSucceededBackgroundProcesses,
        __MaximumAgeOfSucceededBackgroundProcesses.name() : __MaximumAgeOfSucceededBackgroundProcesses,
        __MaxNumberOfActiveBackgroundProcesses.name() : __MaxNumberOfActiveBackgroundProcesses,
        __PollInterval.name() : __PollInterval,
        __ReceiverPluginID.name() : __ReceiverPluginID,
        __ProcessPluginID.name() : __ProcessPluginID,
        __PreProcessorPluginID.name() : __PreProcessorPluginID,
        __PostProcessorPluginID.name() : __PostProcessorPluginID,
        __ErrorReporterPluginID.name() : __ErrorReporterPluginID,
        __QueueForEndpoint.name() : __QueueForEndpoint,
        __QueueForProcssing.name() : __QueueForProcssing,
        __TransactionType.name() : __TransactionType,
        __MessagesPerBackgroundProcess.name() : __MessagesPerBackgroundProcess,
        __EnableRetry.name() : __EnableRetry,
        __RetryDuration.name() : __RetryDuration,
        __Referenced.name() : __Referenced,
        __Selected.name() : __Selected,
        __Changed.name() : __Changed
    })
_module_typeBindings.InBoundIntegrationEndpointType = InBoundIntegrationEndpointType
Namespace.addCategoryObject('typeBinding', 'InBoundIntegrationEndpointType', InBoundIntegrationEndpointType)


# Complex type {http://www.stibosystems.com/step}KeyValueType with content type MIXED
class KeyValueType (pyxb.binding.basis.complexTypeDefinition):
    """
                The key value for an object in a specific key. Used as an alternative to IDs for identifying objects.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'KeyValueType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4577, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute KeyID uses Python identifier KeyID
    __KeyID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'KeyID'), 'KeyID', '__httpwww_stibosystems_comstep_KeyValueType_KeyID', _module_typeBindings.StepKeyID, required=True)
    __KeyID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4583, 8)
    __KeyID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4583, 8)
    
    KeyID = property(__KeyID.value, __KeyID.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __KeyID.name() : __KeyID
    })
_module_typeBindings.KeyValueType = KeyValueType
Namespace.addCategoryObject('typeBinding', 'KeyValueType', KeyValueType)


# Complex type {http://www.stibosystems.com/step}KeyType with content type ELEMENT_ONLY
class KeyType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a key definition.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'KeyType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4585, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_KeyType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4592, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}KeyFormula uses Python identifier KeyFormula
    __KeyFormula = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyFormula'), 'KeyFormula', '__httpwww_stibosystems_comstep_KeyType_httpwww_stibosystems_comstepKeyFormula', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4593, 12), )

    
    KeyFormula = property(__KeyFormula.value, __KeyFormula.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_KeyType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4594, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}UserTypeLink uses Python identifier UserTypeLink
    __UserTypeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink'), 'UserTypeLink', '__httpwww_stibosystems_comstep_KeyType_httpwww_stibosystems_comstepUserTypeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4595, 12), )

    
    UserTypeLink = property(__UserTypeLink.value, __UserTypeLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeLink uses Python identifier AttributeLink
    __AttributeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink'), 'AttributeLink', '__httpwww_stibosystems_comstep_KeyType_httpwww_stibosystems_comstepAttributeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4596, 12), )

    
    AttributeLink = property(__AttributeLink.value, __AttributeLink.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_KeyType_ID', _module_typeBindings.StepKeyID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4598, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4598, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute State uses Python identifier State
    __State = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'State'), 'State', '__httpwww_stibosystems_comstep_KeyType_State', _module_typeBindings.STD_ANON_10, required=True)
    __State._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4599, 8)
    __State._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4599, 8)
    
    State = property(__State.value, __State.set, None, None)

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_KeyType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4614, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4614, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_KeyType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4615, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4615, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_KeyType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4616, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4616, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    
    # Attribute Deleted uses Python identifier Deleted
    __Deleted = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Deleted'), 'Deleted', '__httpwww_stibosystems_comstep_KeyType_Deleted', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Deleted._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4617, 8)
    __Deleted._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4617, 8)
    
    Deleted = property(__Deleted.value, __Deleted.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __KeyFormula.name() : __KeyFormula,
        __MetaData.name() : __MetaData,
        __UserTypeLink.name() : __UserTypeLink,
        __AttributeLink.name() : __AttributeLink
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __State.name() : __State,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed,
        __Deleted.name() : __Deleted
    })
_module_typeBindings.KeyType = KeyType
Namespace.addCategoryObject('typeBinding', 'KeyType', KeyType)


# Complex type {http://www.stibosystems.com/step}ListOfValuesGroupType with content type ELEMENT_ONLY
class ListOfValuesGroupType (pyxb.binding.basis.complexTypeDefinition):
    """
                An LOV group holding a number of LOVs and LOV groups.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ListOfValuesGroupType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4672, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_ListOfValuesGroupType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4679, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_ListOfValuesGroupType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4680, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeGroupLink uses Python identifier AttributeGroupLink
    __AttributeGroupLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), 'AttributeGroupLink', '__httpwww_stibosystems_comstep_ListOfValuesGroupType_httpwww_stibosystems_comstepAttributeGroupLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4681, 12), )

    
    AttributeGroupLink = property(__AttributeGroupLink.value, __AttributeGroupLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ListOfValuesGroup uses Python identifier ListOfValuesGroup
    __ListOfValuesGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ListOfValuesGroup'), 'ListOfValuesGroup', '__httpwww_stibosystems_comstep_ListOfValuesGroupType_httpwww_stibosystems_comstepListOfValuesGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4682, 12), )

    
    ListOfValuesGroup = property(__ListOfValuesGroup.value, __ListOfValuesGroup.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_ListOfValuesGroupType_ID', _module_typeBindings.StepLOVID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4684, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4684, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    ID of the LOV group object. Not required for creation if auto IDs are configured for the object\n                    type.\n                ')

    
    # Attribute ParentID uses Python identifier ParentID
    __ParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ParentID'), 'ParentID', '__httpwww_stibosystems_comstep_ListOfValuesGroupType_ParentID', _module_typeBindings.StepLOVID)
    __ParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4692, 8)
    __ParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4692, 8)
    
    ParentID = property(__ParentID.value, __ParentID.set, None, '\n                    ID of the parent LOV group. Required if this group is not nested inside a parent LOV group element.\n                ')

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_ListOfValuesGroupType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4699, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4699, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_ListOfValuesGroupType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4700, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4700, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_ListOfValuesGroupType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4701, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4701, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __AttributeGroupLink.name() : __AttributeGroupLink,
        __ListOfValuesGroup.name() : __ListOfValuesGroup
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __ParentID.name() : __ParentID,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed
    })
_module_typeBindings.ListOfValuesGroupType = ListOfValuesGroupType
Namespace.addCategoryObject('typeBinding', 'ListOfValuesGroupType', ListOfValuesGroupType)


# Complex type {http://www.stibosystems.com/step}ListOfValueType with content type ELEMENT_ONLY
class ListOfValueType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents an LOV. Values in the LOV have the dimension dependencies described by the dimension links
                and must conform to the validation rules described in Validation. The list of values is described by the
                nested Value and/or ValueGroup elements.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ListOfValueType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4713, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_ListOfValueType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4722, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Validation uses Python identifier Validation
    __Validation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Validation'), 'Validation', '__httpwww_stibosystems_comstep_ListOfValueType_httpwww_stibosystems_comstepValidation', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4723, 12), )

    
    Validation = property(__Validation.value, __Validation.set, None, '\n                        Validation specification. During import, for existing LOVs, the validation can be modified if\n                        the import is running in single update mode and no conflicting values exist.\n                    ')

    
    # Element {http://www.stibosystems.com/step}DimensionLink uses Python identifier DimensionLink
    __DimensionLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink'), 'DimensionLink', '__httpwww_stibosystems_comstep_ListOfValueType_httpwww_stibosystems_comstepDimensionLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4731, 12), )

    
    DimensionLink = property(__DimensionLink.value, __DimensionLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_ListOfValueType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4732, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeGroupLink uses Python identifier AttributeGroupLink
    __AttributeGroupLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), 'AttributeGroupLink', '__httpwww_stibosystems_comstep_ListOfValueType_httpwww_stibosystems_comstepAttributeGroupLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4733, 12), )

    
    AttributeGroupLink = property(__AttributeGroupLink.value, __AttributeGroupLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Value uses Python identifier Value
    __Value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Value'), 'Value', '__httpwww_stibosystems_comstep_ListOfValueType_httpwww_stibosystems_comstepValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4735, 16), )

    
    Value = property(__Value.value, __Value.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ValueGroup uses Python identifier ValueGroup
    __ValueGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValueGroup'), 'ValueGroup', '__httpwww_stibosystems_comstep_ListOfValueType_httpwww_stibosystems_comstepValueGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4736, 16), )

    
    ValueGroup = property(__ValueGroup.value, __ValueGroup.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteValue uses Python identifier DeleteValue
    __DeleteValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteValue'), 'DeleteValue', '__httpwww_stibosystems_comstep_ListOfValueType_httpwww_stibosystems_comstepDeleteValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4738, 12), )

    
    DeleteValue = property(__DeleteValue.value, __DeleteValue.set, None, '\n                        Allows for the deletion of a specific value in the LOV.\n                    ')

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_ListOfValueType_ID', _module_typeBindings.StepLOVID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4746, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4746, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    ID of the LOV object. Not required for creation if auto IDs are configured for the object type.\n                ')

    
    # Attribute ParentID uses Python identifier ParentID
    __ParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ParentID'), 'ParentID', '__httpwww_stibosystems_comstep_ListOfValueType_ParentID', _module_typeBindings.StepLOVID)
    __ParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4753, 8)
    __ParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4753, 8)
    
    ParentID = property(__ParentID.value, __ParentID.set, None, '\n                    ID of the parent LOV group. If not supplied during creation, LOV will be created at the top level.\n                ')

    
    # Attribute AllowUserValueAddition uses Python identifier AllowUserValueAddition
    __AllowUserValueAddition = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AllowUserValueAddition'), 'AllowUserValueAddition', '__httpwww_stibosystems_comstep_ListOfValueType_AllowUserValueAddition', pyxb.binding.datatypes.boolean, unicode_default='false')
    __AllowUserValueAddition._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4760, 8)
    __AllowUserValueAddition._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4760, 8)
    
    AllowUserValueAddition = property(__AllowUserValueAddition.value, __AllowUserValueAddition.set, None, '\n                    Whether or not users are allowed to add values to the LOV while maintaining attribute values.\n                ')

    
    # Attribute UseValueID uses Python identifier UseValueID
    __UseValueID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UseValueID'), 'UseValueID', '__httpwww_stibosystems_comstep_ListOfValueType_UseValueID', pyxb.binding.datatypes.boolean, unicode_default='false')
    __UseValueID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4767, 8)
    __UseValueID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4767, 8)
    
    UseValueID = property(__UseValueID.value, __UseValueID.set, None, '\n                    Whether value IDs are used for values in this LOV. Can only be "true" if the value for\n                    "AllowUserValueAddition" is "false".\n                ')

    
    # Attribute IDPattern uses Python identifier IDPattern
    __IDPattern = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IDPattern'), 'IDPattern', '__httpwww_stibosystems_comstep_ListOfValueType_IDPattern', pyxb.binding.datatypes.string)
    __IDPattern._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4775, 8)
    __IDPattern._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4775, 8)
    
    IDPattern = property(__IDPattern.value, __IDPattern.set, None, '\n                    The pattern used for auto generated value IDs.\n                ')

    
    # Attribute ReplaceListOfValuesValues uses Python identifier ReplaceListOfValuesValues
    __ReplaceListOfValuesValues = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ReplaceListOfValuesValues'), 'ReplaceListOfValuesValues', '__httpwww_stibosystems_comstep_ListOfValueType_ReplaceListOfValuesValues', pyxb.binding.datatypes.boolean, unicode_default='false')
    __ReplaceListOfValuesValues._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4782, 8)
    __ReplaceListOfValuesValues._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4782, 8)
    
    ReplaceListOfValuesValues = property(__ReplaceListOfValuesValues.value, __ReplaceListOfValuesValues.set, None, '\n                    Determines whether the contained list of values should replace all the existing contents of this\n                    LOV, or whether a value-element should add missing values and delete-value-elements remove existing\n                    values incrementally. When replacing, missing values in this LOV will only be deleted if they have\n                    no present usage (and events will/need not be generated).\n                    Relevant only for import; this is not a feature of the LOV that will be persisted or exported.\n                ')

    
    # Attribute DefaultUnitID uses Python identifier DefaultUnitID
    __DefaultUnitID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DefaultUnitID'), 'DefaultUnitID', '__httpwww_stibosystems_comstep_ListOfValueType_DefaultUnitID', _module_typeBindings.StepUnitID)
    __DefaultUnitID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4793, 8)
    __DefaultUnitID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4793, 8)
    
    DefaultUnitID = property(__DefaultUnitID.value, __DefaultUnitID.set, None, '\n                    The ID of the default unit for values of this LOV.\n                ')

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_ListOfValueType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4800, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4800, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_ListOfValueType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4801, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4801, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_ListOfValueType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4802, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4802, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __Validation.name() : __Validation,
        __DimensionLink.name() : __DimensionLink,
        __MetaData.name() : __MetaData,
        __AttributeGroupLink.name() : __AttributeGroupLink,
        __Value.name() : __Value,
        __ValueGroup.name() : __ValueGroup,
        __DeleteValue.name() : __DeleteValue
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __ParentID.name() : __ParentID,
        __AllowUserValueAddition.name() : __AllowUserValueAddition,
        __UseValueID.name() : __UseValueID,
        __IDPattern.name() : __IDPattern,
        __ReplaceListOfValuesValues.name() : __ReplaceListOfValuesValues,
        __DefaultUnitID.name() : __DefaultUnitID,
        __Referenced.name() : __Referenced,
        __Selected.name() : __Selected,
        __Changed.name() : __Changed
    })
_module_typeBindings.ListOfValueType = ListOfValueType
Namespace.addCategoryObject('typeBinding', 'ListOfValueType', ListOfValueType)


# Complex type {http://www.stibosystems.com/step}ListOfValueLinkType with content type EMPTY
class ListOfValueLinkType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a link to an LOV.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ListOfValueLinkType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4804, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ListOfValueID uses Python identifier ListOfValueID
    __ListOfValueID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ListOfValueID'), 'ListOfValueID', '__httpwww_stibosystems_comstep_ListOfValueLinkType_ListOfValueID', _module_typeBindings.StepLOVID, required=True)
    __ListOfValueID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4810, 8)
    __ListOfValueID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4810, 8)
    
    ListOfValueID = property(__ListOfValueID.value, __ListOfValueID.set, None, '\n                    The ID of the LOV.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ListOfValueID.name() : __ListOfValueID
    })
_module_typeBindings.ListOfValueLinkType = ListOfValueLinkType
Namespace.addCategoryObject('typeBinding', 'ListOfValueLinkType', ListOfValueLinkType)


# Complex type {http://www.stibosystems.com/step}LocalBusinessRuleType with content type ELEMENT_ONLY
class LocalBusinessRuleType (pyxb.binding.basis.complexTypeDefinition):
    """
                A configuration of a local business rule used within other objects. Only actions and conditions can be
                local. Setup-groups and approval-info is superfluous.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LocalBusinessRuleType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4828, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_LocalBusinessRuleType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4836, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Description'), 'Description', '__httpwww_stibosystems_comstep_LocalBusinessRuleType_httpwww_stibosystems_comstepDescription', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4837, 12), )

    
    Description = property(__Description.value, __Description.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Dependency uses Python identifier Dependency
    __Dependency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Dependency'), 'Dependency', '__httpwww_stibosystems_comstep_LocalBusinessRuleType_httpwww_stibosystems_comstepDependency', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4838, 12), )

    
    Dependency = property(__Dependency.value, __Dependency.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Configuration uses Python identifier Configuration
    __Configuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), 'Configuration', '__httpwww_stibosystems_comstep_LocalBusinessRuleType_httpwww_stibosystems_comstepConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4839, 12), )

    
    Configuration = property(__Configuration.value, __Configuration.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ValidObjectTypes uses Python identifier ValidObjectTypes
    __ValidObjectTypes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValidObjectTypes'), 'ValidObjectTypes', '__httpwww_stibosystems_comstep_LocalBusinessRuleType_httpwww_stibosystems_comstepValidObjectTypes', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4840, 12), )

    
    ValidObjectTypes = property(__ValidObjectTypes.value, __ValidObjectTypes.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_LocalBusinessRuleType_ID', _module_typeBindings.StepBusinessRuleID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4842, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4842, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    The ID of the business rule.\n                ')

    
    # Attribute Scope uses Python identifier Scope
    __Scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Scope'), 'Scope', '__httpwww_stibosystems_comstep_LocalBusinessRuleType_Scope', _module_typeBindings.STD_ANON_12, required=True)
    __Scope._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4849, 8)
    __Scope._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4849, 8)
    
    Scope = property(__Scope.value, __Scope.set, None, '\n                    The scope of the business rule. Always "Local".\n                ')

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_LocalBusinessRuleType_Type', _module_typeBindings.STD_ANON_13)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4862, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4862, 8)
    
    Type = property(__Type.value, __Type.set, None, '\n                    The type of the business rule.\n                ')

    
    # Attribute RunPrivileged uses Python identifier RunPrivileged
    __RunPrivileged = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'RunPrivileged'), 'RunPrivileged', '__httpwww_stibosystems_comstep_LocalBusinessRuleType_RunPrivileged', pyxb.binding.datatypes.boolean, unicode_default='false')
    __RunPrivileged._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4875, 8)
    __RunPrivileged._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4875, 8)
    
    RunPrivileged = property(__RunPrivileged.value, __RunPrivileged.set, None, '\n                    Run privileged - without privilege check. Ignored for business rules of type Library.\n                ')

    _ElementMap.update({
        __Name.name() : __Name,
        __Description.name() : __Description,
        __Dependency.name() : __Dependency,
        __Configuration.name() : __Configuration,
        __ValidObjectTypes.name() : __ValidObjectTypes
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __Scope.name() : __Scope,
        __Type.name() : __Type,
        __RunPrivileged.name() : __RunPrivileged
    })
_module_typeBindings.LocalBusinessRuleType = LocalBusinessRuleType
Namespace.addCategoryObject('typeBinding', 'LocalBusinessRuleType', LocalBusinessRuleType)


# Complex type {http://www.stibosystems.com/step}MatchCodeType with content type ELEMENT_ONLY
class MatchCodeType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a match code configuration.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MatchCodeType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4910, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}SetupGroupLink uses Python identifier SetupGroupLink
    __SetupGroupLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink'), 'SetupGroupLink', '__httpwww_stibosystems_comstep_MatchCodeType_httpwww_stibosystems_comstepSetupGroupLink', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4917, 12), )

    
    SetupGroupLink = property(__SetupGroupLink.value, __SetupGroupLink.set, None, '\n                        The setup group that the match code is located in.\n                    ')

    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_MatchCodeType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4924, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_MatchCodeType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4925, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ValidObjectType uses Python identifier ValidObjectType
    __ValidObjectType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValidObjectType'), 'ValidObjectType', '__httpwww_stibosystems_comstep_MatchCodeType_httpwww_stibosystems_comstepValidObjectType', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4926, 12), )

    
    ValidObjectType = property(__ValidObjectType.value, __ValidObjectType.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ValidForProductHierarchy uses Python identifier ValidForProductHierarchy
    __ValidForProductHierarchy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValidForProductHierarchy'), 'ValidForProductHierarchy', '__httpwww_stibosystems_comstep_MatchCodeType_httpwww_stibosystems_comstepValidForProductHierarchy', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4928, 16), )

    
    ValidForProductHierarchy = property(__ValidForProductHierarchy.value, __ValidForProductHierarchy.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ValidForClassificationHierarchy uses Python identifier ValidForClassificationHierarchy
    __ValidForClassificationHierarchy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValidForClassificationHierarchy'), 'ValidForClassificationHierarchy', '__httpwww_stibosystems_comstep_MatchCodeType_httpwww_stibosystems_comstepValidForClassificationHierarchy', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4929, 16), )

    
    ValidForClassificationHierarchy = property(__ValidForClassificationHierarchy.value, __ValidForClassificationHierarchy.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ValidForEntityHierarchy uses Python identifier ValidForEntityHierarchy
    __ValidForEntityHierarchy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValidForEntityHierarchy'), 'ValidForEntityHierarchy', '__httpwww_stibosystems_comstep_MatchCodeType_httpwww_stibosystems_comstepValidForEntityHierarchy', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4930, 16), )

    
    ValidForEntityHierarchy = property(__ValidForEntityHierarchy.value, __ValidForEntityHierarchy.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ValidForCollection uses Python identifier ValidForCollection
    __ValidForCollection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValidForCollection'), 'ValidForCollection', '__httpwww_stibosystems_comstep_MatchCodeType_httpwww_stibosystems_comstepValidForCollection', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4931, 16), )

    
    ValidForCollection = property(__ValidForCollection.value, __ValidForCollection.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Template uses Python identifier Template
    __Template = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Template'), 'Template', '__httpwww_stibosystems_comstep_MatchCodeType_httpwww_stibosystems_comstepTemplate', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4933, 12), )

    
    Template = property(__Template.value, __Template.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_MatchCodeType_ID', _module_typeBindings.StepMatchCodeID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4935, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4935, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    The ID of the match code.\n                ')

    
    # Attribute WorkspaceID uses Python identifier WorkspaceID
    __WorkspaceID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'WorkspaceID'), 'WorkspaceID', '__httpwww_stibosystems_comstep_MatchCodeType_WorkspaceID', _module_typeBindings.StepID)
    __WorkspaceID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4942, 8)
    __WorkspaceID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4942, 8)
    
    WorkspaceID = property(__WorkspaceID.value, __WorkspaceID.set, None, '\n                    ID of the workspace in which match codes should be calculated.\n                ')

    
    # Attribute ContextID uses Python identifier ContextID
    __ContextID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ContextID'), 'ContextID', '__httpwww_stibosystems_comstep_MatchCodeType_ContextID', _module_typeBindings.StepQualifierID)
    __ContextID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4949, 8)
    __ContextID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4949, 8)
    
    ContextID = property(__ContextID.value, __ContextID.set, None, '\n                    ID of the context in which match codes should be calculated.\n                ')

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_MatchCodeType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4956, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4956, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_MatchCodeType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4957, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4957, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_MatchCodeType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4958, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4958, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    
    # Attribute WindowSize uses Python identifier WindowSize
    __WindowSize = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'WindowSize'), 'WindowSize', '__httpwww_stibosystems_comstep_MatchCodeType_WindowSize', pyxb.binding.datatypes.string)
    __WindowSize._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4959, 8)
    __WindowSize._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4959, 8)
    
    WindowSize = property(__WindowSize.value, __WindowSize.set, None, '\n                    Size of the sliding window used with this match code.\n                ')

    _ElementMap.update({
        __SetupGroupLink.name() : __SetupGroupLink,
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __ValidObjectType.name() : __ValidObjectType,
        __ValidForProductHierarchy.name() : __ValidForProductHierarchy,
        __ValidForClassificationHierarchy.name() : __ValidForClassificationHierarchy,
        __ValidForEntityHierarchy.name() : __ValidForEntityHierarchy,
        __ValidForCollection.name() : __ValidForCollection,
        __Template.name() : __Template
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __WorkspaceID.name() : __WorkspaceID,
        __ContextID.name() : __ContextID,
        __Referenced.name() : __Referenced,
        __Selected.name() : __Selected,
        __Changed.name() : __Changed,
        __WindowSize.name() : __WindowSize
    })
_module_typeBindings.MatchCodeType = MatchCodeType
Namespace.addCategoryObject('typeBinding', 'MatchCodeType', MatchCodeType)


# Complex type {http://www.stibosystems.com/step}MatchingAlgorithmType with content type ELEMENT_ONLY
class MatchingAlgorithmType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a matching algorithm.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MatchingAlgorithmType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4984, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}EmbeddedMatchCode uses Python identifier EmbeddedMatchCode
    __EmbeddedMatchCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EmbeddedMatchCode'), 'EmbeddedMatchCode', '__httpwww_stibosystems_comstep_MatchingAlgorithmType_httpwww_stibosystems_comstepEmbeddedMatchCode', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4991, 12), )

    
    EmbeddedMatchCode = property(__EmbeddedMatchCode.value, __EmbeddedMatchCode.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SetupGroupLink uses Python identifier SetupGroupLink
    __SetupGroupLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink'), 'SetupGroupLink', '__httpwww_stibosystems_comstep_MatchingAlgorithmType_httpwww_stibosystems_comstepSetupGroupLink', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4992, 12), )

    
    SetupGroupLink = property(__SetupGroupLink.value, __SetupGroupLink.set, None, '\n                        The setup group the match code is located in.\n                    ')

    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_MatchingAlgorithmType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4999, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_MatchingAlgorithmType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5000, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MatchingAlgorithmConfiguration uses Python identifier MatchingAlgorithmConfiguration
    __MatchingAlgorithmConfiguration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MatchingAlgorithmConfiguration'), 'MatchingAlgorithmConfiguration', '__httpwww_stibosystems_comstep_MatchingAlgorithmType_httpwww_stibosystems_comstepMatchingAlgorithmConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5001, 12), )

    
    MatchingAlgorithmConfiguration = property(__MatchingAlgorithmConfiguration.value, __MatchingAlgorithmConfiguration.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_MatchingAlgorithmType_ID', _module_typeBindings.StepMatchingAlgorithmID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5003, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5003, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    The ID of the match code.\n                ')

    
    # Attribute WorkspaceID uses Python identifier WorkspaceID
    __WorkspaceID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'WorkspaceID'), 'WorkspaceID', '__httpwww_stibosystems_comstep_MatchingAlgorithmType_WorkspaceID', _module_typeBindings.StepID)
    __WorkspaceID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5010, 8)
    __WorkspaceID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5010, 8)
    
    WorkspaceID = property(__WorkspaceID.value, __WorkspaceID.set, None, '\n                    ID of the workspace in which the matching algorithm is executed.\n                ')

    
    # Attribute ContextID uses Python identifier ContextID
    __ContextID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ContextID'), 'ContextID', '__httpwww_stibosystems_comstep_MatchingAlgorithmType_ContextID', _module_typeBindings.StepQualifierID)
    __ContextID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5017, 8)
    __ContextID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5017, 8)
    
    ContextID = property(__ContextID.value, __ContextID.set, None, '\n                    ID of the context in which the matching algorithm is executed.\n                ')

    
    # Attribute MatchCodeID uses Python identifier MatchCodeID
    __MatchCodeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MatchCodeID'), 'MatchCodeID', '__httpwww_stibosystems_comstep_MatchingAlgorithmType_MatchCodeID', _module_typeBindings.StepMatchCodeID)
    __MatchCodeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5024, 8)
    __MatchCodeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5024, 8)
    
    MatchCodeID = property(__MatchCodeID.value, __MatchCodeID.set, None, '\n                    ID of the attached match code for this matching algorithm.\n                ')

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_MatchingAlgorithmType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5031, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5031, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_MatchingAlgorithmType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5032, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5032, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_MatchingAlgorithmType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5033, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5033, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __EmbeddedMatchCode.name() : __EmbeddedMatchCode,
        __SetupGroupLink.name() : __SetupGroupLink,
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __MatchingAlgorithmConfiguration.name() : __MatchingAlgorithmConfiguration
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __WorkspaceID.name() : __WorkspaceID,
        __ContextID.name() : __ContextID,
        __MatchCodeID.name() : __MatchCodeID,
        __Referenced.name() : __Referenced,
        __Selected.name() : __Selected,
        __Changed.name() : __Changed
    })
_module_typeBindings.MatchingAlgorithmType = MatchingAlgorithmType
Namespace.addCategoryObject('typeBinding', 'MatchingAlgorithmType', MatchingAlgorithmType)


# Complex type {http://www.stibosystems.com/step}MultiDataContainerType with content type ELEMENT_ONLY
class MultiDataContainerType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a multi valued data container that can hold multiple data container objects.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MultiDataContainerType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5077, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}DataContainer uses Python identifier DataContainer
    __DataContainer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DataContainer'), 'DataContainer', '__httpwww_stibosystems_comstep_MultiDataContainerType_httpwww_stibosystems_comstepDataContainer', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5084, 12), )

    
    DataContainer = property(__DataContainer.value, __DataContainer.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteDataContainer uses Python identifier DeleteDataContainer
    __DeleteDataContainer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteDataContainer'), 'DeleteDataContainer', '__httpwww_stibosystems_comstep_MultiDataContainerType_httpwww_stibosystems_comstepDeleteDataContainer', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5085, 12), )

    
    DeleteDataContainer = property(__DeleteDataContainer.value, __DeleteDataContainer.set, None, None)

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_MultiDataContainerType_Type', _module_typeBindings.StepDataContainerTypeID)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5087, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5087, 8)
    
    Type = property(__Type.value, __Type.set, None, '\n                    The ID of the DataContainerType.\n                    Not required if updating existing DataContainer by having specified ID.\n                    Note that this attribute cannot be used for changing the type of an existing MultiDataContainer,\n                    it can only be used for creation, where it is required. Specifying a different type from the one\n                    used on any one of its DataContainers with the specified ID is an error.\n                ')

    
    # Attribute Inherited uses Python identifier Inherited
    __Inherited = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Inherited'), 'Inherited', '__httpwww_stibosystems_comstep_MultiDataContainerType_Inherited', pyxb.binding.datatypes.string)
    __Inherited._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5098, 8)
    __Inherited._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5098, 8)
    
    Inherited = property(__Inherited.value, __Inherited.set, None, None)

    _ElementMap.update({
        __DataContainer.name() : __DataContainer,
        __DeleteDataContainer.name() : __DeleteDataContainer
    })
    _AttributeMap.update({
        __Type.name() : __Type,
        __Inherited.name() : __Inherited
    })
_module_typeBindings.MultiDataContainerType = MultiDataContainerType
Namespace.addCategoryObject('typeBinding', 'MultiDataContainerType', MultiDataContainerType)


# Complex type {http://www.stibosystems.com/step}MultiValueType with content type ELEMENT_ONLY
class MultiValueType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents values for a multi valued attribute. The attribute is in this element, and all the values in
                the multi value are represented as sub values without an attribute identification.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MultiValueType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5100, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Value uses Python identifier Value
    __Value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Value'), 'Value', '__httpwww_stibosystems_comstep_MultiValueType_httpwww_stibosystems_comstepValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5109, 16), )

    
    Value = property(__Value.value, __Value.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ValueGroup uses Python identifier ValueGroup
    __ValueGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValueGroup'), 'ValueGroup', '__httpwww_stibosystems_comstep_MultiValueType_httpwww_stibosystems_comstepValueGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5110, 16), )

    
    ValueGroup = property(__ValueGroup.value, __ValueGroup.set, None, None)

    
    # Attribute Inherited uses Python identifier Inherited
    __Inherited = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Inherited'), 'Inherited', '__httpwww_stibosystems_comstep_MultiValueType_Inherited', pyxb.binding.datatypes.string)
    __Inherited._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5113, 8)
    __Inherited._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5113, 8)
    
    Inherited = property(__Inherited.value, __Inherited.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_MultiValueType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5114, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5114, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    
    # Attribute AttributeID uses Python identifier AttributeID
    __AttributeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AttributeID'), 'AttributeID', '__httpwww_stibosystems_comstep_MultiValueType_AttributeID', _module_typeBindings.StepAttributeID, required=True)
    __AttributeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5116, 8)
    __AttributeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5116, 8)
    
    AttributeID = property(__AttributeID.value, __AttributeID.set, None, '\n                    The ID of the attribute for all the sub values.\n                ')

    _ElementMap.update({
        __Value.name() : __Value,
        __ValueGroup.name() : __ValueGroup
    })
    _AttributeMap.update({
        __Inherited.name() : __Inherited,
        __Changed.name() : __Changed,
        __AttributeID.name() : __AttributeID
    })
_module_typeBindings.MultiValueType = MultiValueType
Namespace.addCategoryObject('typeBinding', 'MultiValueType', MultiValueType)


# Complex type {http://www.stibosystems.com/step}NameType with content type MIXED
class NameType (pyxb.binding.basis.complexTypeDefinition):
    """
                The name of the parent element.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NameType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5124, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_NameType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5130, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5130, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_NameType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5132, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5132, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, '\n                    Identifies which contexts this name is visible in. If not specified the current context is used.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Changed.name() : __Changed,
        __QualifierID.name() : __QualifierID
    })
_module_typeBindings.NameType = NameType
Namespace.addCategoryObject('typeBinding', 'NameType', NameType)


# Complex type {http://www.stibosystems.com/step}NoteFrameType with content type ELEMENT_ONLY
class NoteFrameType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}NoteFrameType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NoteFrameType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5165, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}NoteRecord uses Python identifier NoteRecord
    __NoteRecord = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NoteRecord'), 'NoteRecord', '__httpwww_stibosystems_comstep_NoteFrameType_httpwww_stibosystems_comstepNoteRecord', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5167, 12), )

    
    NoteRecord = property(__NoteRecord.value, __NoteRecord.set, None, None)

    
    # Attribute Status uses Python identifier Status
    __Status = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Status'), 'Status', '__httpwww_stibosystems_comstep_NoteFrameType_Status', pyxb.binding.datatypes.string, required=True)
    __Status._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5169, 8)
    __Status._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5169, 8)
    
    Status = property(__Status.value, __Status.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_NoteFrameType_ID', _module_typeBindings.StepID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5170, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5170, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute X uses Python identifier X
    __X = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'X'), 'X', '__httpwww_stibosystems_comstep_NoteFrameType_X', _module_typeBindings.TwoDecimalValueType)
    __X._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5171, 8)
    __X._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5171, 8)
    
    X = property(__X.value, __X.set, None, None)

    
    # Attribute Y uses Python identifier Y
    __Y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Y'), 'Y', '__httpwww_stibosystems_comstep_NoteFrameType_Y', _module_typeBindings.TwoDecimalValueType)
    __Y._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5172, 8)
    __Y._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5172, 8)
    
    Y = property(__Y.value, __Y.set, None, None)

    
    # Attribute Width uses Python identifier Width
    __Width = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Width'), 'Width', '__httpwww_stibosystems_comstep_NoteFrameType_Width', _module_typeBindings.TwoDecimalValueType)
    __Width._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5173, 8)
    __Width._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5173, 8)
    
    Width = property(__Width.value, __Width.set, None, None)

    
    # Attribute Height uses Python identifier Height
    __Height = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Height'), 'Height', '__httpwww_stibosystems_comstep_NoteFrameType_Height', _module_typeBindings.TwoDecimalValueType)
    __Height._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5174, 8)
    __Height._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5174, 8)
    
    Height = property(__Height.value, __Height.set, None, None)

    
    # Attribute ZOrder uses Python identifier ZOrder
    __ZOrder = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ZOrder'), 'ZOrder', '__httpwww_stibosystems_comstep_NoteFrameType_ZOrder', pyxb.binding.datatypes.double)
    __ZOrder._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5175, 8)
    __ZOrder._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5175, 8)
    
    ZOrder = property(__ZOrder.value, __ZOrder.set, None, None)

    
    # Attribute UnitID uses Python identifier UnitID
    __UnitID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UnitID'), 'UnitID', '__httpwww_stibosystems_comstep_NoteFrameType_UnitID', _module_typeBindings.StepUnitID)
    __UnitID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5176, 8)
    __UnitID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5176, 8)
    
    UnitID = property(__UnitID.value, __UnitID.set, None, None)

    _ElementMap.update({
        __NoteRecord.name() : __NoteRecord
    })
    _AttributeMap.update({
        __Status.name() : __Status,
        __ID.name() : __ID,
        __X.name() : __X,
        __Y.name() : __Y,
        __Width.name() : __Width,
        __Height.name() : __Height,
        __ZOrder.name() : __ZOrder,
        __UnitID.name() : __UnitID
    })
_module_typeBindings.NoteFrameType = NoteFrameType
Namespace.addCategoryObject('typeBinding', 'NoteFrameType', NoteFrameType)


# Complex type {http://www.stibosystems.com/step}OriginType with content type EMPTY
class OriginType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}OriginType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OriginType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5222, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute AttributeID uses Python identifier AttributeID
    __AttributeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AttributeID'), 'AttributeID', '__httpwww_stibosystems_comstep_OriginType_AttributeID', _module_typeBindings.StepAttributeID)
    __AttributeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5223, 8)
    __AttributeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5223, 8)
    
    AttributeID = property(__AttributeID.value, __AttributeID.set, None, None)

    
    # Attribute Pull uses Python identifier Pull
    __Pull = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Pull'), 'Pull', '__httpwww_stibosystems_comstep_OriginType_Pull', pyxb.binding.datatypes.string)
    __Pull._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5224, 8)
    __Pull._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5224, 8)
    
    Pull = property(__Pull.value, __Pull.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __AttributeID.name() : __AttributeID,
        __Pull.name() : __Pull
    })
_module_typeBindings.OriginType = OriginType
Namespace.addCategoryObject('typeBinding', 'OriginType', OriginType)


# Complex type {http://www.stibosystems.com/step}OutBoundIntegrationEndpointType with content type ELEMENT_ONLY
class OutBoundIntegrationEndpointType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents an integration endpoint for outbound communication.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OutBoundIntegrationEndpointType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5226, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}SetupGroupLink uses Python identifier SetupGroupLink
    __SetupGroupLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink'), 'SetupGroupLink', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_httpwww_stibosystems_comstepSetupGroupLink', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5233, 12), )

    
    SetupGroupLink = property(__SetupGroupLink.value, __SetupGroupLink.set, None, '\n                        The setup group the endpoint is located in.\n                    ')

    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5240, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5241, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ScheduleSpecification uses Python identifier ScheduleSpecification
    __ScheduleSpecification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScheduleSpecification'), 'ScheduleSpecification', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_httpwww_stibosystems_comstepScheduleSpecification', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5242, 12), )

    
    ScheduleSpecification = property(__ScheduleSpecification.value, __ScheduleSpecification.set, None, '\n                        The encoded schedule specification.\n                    ')

    
    # Element {http://www.stibosystems.com/step}PreProcessorPluginConfiguration uses Python identifier PreProcessorPluginConfiguration
    __PreProcessorPluginConfiguration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PreProcessorPluginConfiguration'), 'PreProcessorPluginConfiguration', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_httpwww_stibosystems_comstepPreProcessorPluginConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5249, 12), )

    
    PreProcessorPluginConfiguration = property(__PreProcessorPluginConfiguration.value, __PreProcessorPluginConfiguration.set, None, '\n                        The encoded preprocessor plugin configuration.\n                    ')

    
    # Element {http://www.stibosystems.com/step}PostProcessorPluginConfiguration uses Python identifier PostProcessorPluginConfiguration
    __PostProcessorPluginConfiguration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PostProcessorPluginConfiguration'), 'PostProcessorPluginConfiguration', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_httpwww_stibosystems_comstepPostProcessorPluginConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5256, 12), )

    
    PostProcessorPluginConfiguration = property(__PostProcessorPluginConfiguration.value, __PostProcessorPluginConfiguration.set, None, '\n                        The encoded postprocessor plugin configuration.\n                    ')

    
    # Element {http://www.stibosystems.com/step}DataSourcePluginConfiguration uses Python identifier DataSourcePluginConfiguration
    __DataSourcePluginConfiguration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DataSourcePluginConfiguration'), 'DataSourcePluginConfiguration', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_httpwww_stibosystems_comstepDataSourcePluginConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5263, 12), )

    
    DataSourcePluginConfiguration = property(__DataSourcePluginConfiguration.value, __DataSourcePluginConfiguration.set, None, '\n                        The encoded data source plugin configuration.\n                    ')

    
    # Element {http://www.stibosystems.com/step}DeliveryMethodPluginConfiguration uses Python identifier DeliveryMethodPluginConfiguration
    __DeliveryMethodPluginConfiguration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeliveryMethodPluginConfiguration'), 'DeliveryMethodPluginConfiguration', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_httpwww_stibosystems_comstepDeliveryMethodPluginConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5270, 12), )

    
    DeliveryMethodPluginConfiguration = property(__DeliveryMethodPluginConfiguration.value, __DeliveryMethodPluginConfiguration.set, None, '\n                        The encoded delivery plugin configuration.\n                    ')

    
    # Element {http://www.stibosystems.com/step}EventQueue uses Python identifier EventQueue
    __EventQueue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EventQueue'), 'EventQueue', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_httpwww_stibosystems_comstepEventQueue', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5277, 12), )

    
    EventQueue = property(__EventQueue.value, __EventQueue.set, None, '\n                        The behind-the-scenes event queue of the integration endpoint.\n                        This event queue is privately owned by this integration endpoint and thus not accessible from\n                        anywhere else.\n                    ')

    
    # Element {http://www.stibosystems.com/step}ProcessPluginConfiguration uses Python identifier ProcessPluginConfiguration
    __ProcessPluginConfiguration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ProcessPluginConfiguration'), 'ProcessPluginConfiguration', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_httpwww_stibosystems_comstepProcessPluginConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5286, 12), )

    
    ProcessPluginConfiguration = property(__ProcessPluginConfiguration.value, __ProcessPluginConfiguration.set, None, '\n                        The encoded process plugin configuration.\n                    ')

    
    # Element {http://www.stibosystems.com/step}ErrorReporterPluginConfiguration uses Python identifier ErrorReporterPluginConfiguration
    __ErrorReporterPluginConfiguration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ErrorReporterPluginConfiguration'), 'ErrorReporterPluginConfiguration', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_httpwww_stibosystems_comstepErrorReporterPluginConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5293, 12), )

    
    ErrorReporterPluginConfiguration = property(__ErrorReporterPluginConfiguration.value, __ErrorReporterPluginConfiguration.set, None, '\n                        The encoded error reporter plugin configuration.\n                    ')

    
    # Element {http://www.stibosystems.com/step}ContextLink uses Python identifier ContextLink
    __ContextLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ContextLink'), 'ContextLink', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_httpwww_stibosystems_comstepContextLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5300, 12), )

    
    ContextLink = property(__ContextLink.value, __ContextLink.set, None, '\n                        A link to a context from which data should be exported.\n                    ')

    
    # Element {http://www.stibosystems.com/step}WorkspaceID uses Python identifier WorkspaceID
    __WorkspaceID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'WorkspaceID'), 'WorkspaceID', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_httpwww_stibosystems_comstepWorkspaceID', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5307, 12), )

    
    WorkspaceID = property(__WorkspaceID.value, __WorkspaceID.set, None, '\n                        Specifies the ID of the workspace that provides the content selection for exports.\n                    ')

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_ID', _module_typeBindings.StepOutboundEndPointID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5315, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5315, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute UserTypeID uses Python identifier UserTypeID
    __UserTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserTypeID'), 'UserTypeID', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_UserTypeID', _module_typeBindings.StepObjectTypeID)
    __UserTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5316, 8)
    __UserTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5316, 8)
    
    UserTypeID = property(__UserTypeID.value, __UserTypeID.set, None, '\n                    Determines what kind of integration endpoint this is.\n                ')

    
    # Attribute Description uses Python identifier Description
    __Description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Description'), 'Description', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_Description', pyxb.binding.datatypes.string)
    __Description._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5323, 8)
    __Description._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5323, 8)
    
    Description = property(__Description.value, __Description.set, None, None)

    
    # Attribute ResponsibleUserID uses Python identifier ResponsibleUserID
    __ResponsibleUserID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ResponsibleUserID'), 'ResponsibleUserID', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_ResponsibleUserID', _module_typeBindings.StepUserID, required=True)
    __ResponsibleUserID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5324, 8)
    __ResponsibleUserID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5324, 8)
    
    ResponsibleUserID = property(__ResponsibleUserID.value, __ResponsibleUserID.set, None, '\n                    ID of the user the endpoint is run as.\n                ')

    
    # Attribute MaximumNumberOfFailedBackgroundProcesses uses Python identifier MaximumNumberOfFailedBackgroundProcesses
    __MaximumNumberOfFailedBackgroundProcesses = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MaximumNumberOfFailedBackgroundProcesses'), 'MaximumNumberOfFailedBackgroundProcesses', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_MaximumNumberOfFailedBackgroundProcesses', pyxb.binding.datatypes.string)
    __MaximumNumberOfFailedBackgroundProcesses._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5331, 8)
    __MaximumNumberOfFailedBackgroundProcesses._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5331, 8)
    
    MaximumNumberOfFailedBackgroundProcesses = property(__MaximumNumberOfFailedBackgroundProcesses.value, __MaximumNumberOfFailedBackgroundProcesses.set, None, '\n                    The maximum number of failed background processes to keep for this endpoint. When the limit is reached,\n                    the oldest endpoints will be pruned at regular intervals.\n                ')

    
    # Attribute MaximumAgeOfFailedBackgroundProcesses uses Python identifier MaximumAgeOfFailedBackgroundProcesses
    __MaximumAgeOfFailedBackgroundProcesses = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MaximumAgeOfFailedBackgroundProcesses'), 'MaximumAgeOfFailedBackgroundProcesses', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_MaximumAgeOfFailedBackgroundProcesses', pyxb.binding.datatypes.string)
    __MaximumAgeOfFailedBackgroundProcesses._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5339, 8)
    __MaximumAgeOfFailedBackgroundProcesses._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5339, 8)
    
    MaximumAgeOfFailedBackgroundProcesses = property(__MaximumAgeOfFailedBackgroundProcesses.value, __MaximumAgeOfFailedBackgroundProcesses.set, None, '\n                    The maximum age of failed background processes to keep for this endpoint. All older endpoints will be\n                    deleted at regular intervals. Age should be specified in milliseconds.\n                ')

    
    # Attribute MaximumNumberOfSucceededBackgroundProcesses uses Python identifier MaximumNumberOfSucceededBackgroundProcesses
    __MaximumNumberOfSucceededBackgroundProcesses = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MaximumNumberOfSucceededBackgroundProcesses'), 'MaximumNumberOfSucceededBackgroundProcesses', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_MaximumNumberOfSucceededBackgroundProcesses', pyxb.binding.datatypes.string)
    __MaximumNumberOfSucceededBackgroundProcesses._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5347, 8)
    __MaximumNumberOfSucceededBackgroundProcesses._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5347, 8)
    
    MaximumNumberOfSucceededBackgroundProcesses = property(__MaximumNumberOfSucceededBackgroundProcesses.value, __MaximumNumberOfSucceededBackgroundProcesses.set, None, '\n                    The maximum number of succeeded background processes to keep for this endpoint. When the limit is\n                    reached,\n                    the oldest endpoints will be pruned at regular intervals.\n                ')

    
    # Attribute MaximumAgeOfSucceededBackgroundProcesses uses Python identifier MaximumAgeOfSucceededBackgroundProcesses
    __MaximumAgeOfSucceededBackgroundProcesses = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MaximumAgeOfSucceededBackgroundProcesses'), 'MaximumAgeOfSucceededBackgroundProcesses', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_MaximumAgeOfSucceededBackgroundProcesses', pyxb.binding.datatypes.string)
    __MaximumAgeOfSucceededBackgroundProcesses._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5356, 8)
    __MaximumAgeOfSucceededBackgroundProcesses._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5356, 8)
    
    MaximumAgeOfSucceededBackgroundProcesses = property(__MaximumAgeOfSucceededBackgroundProcesses.value, __MaximumAgeOfSucceededBackgroundProcesses.set, None, '\n                    The maximum age of succeeded background processes to keep for this endpoint. All older endpoints\n                    will be\n                    deleted at regular intervals. Age should be specified in milliseconds.\n                ')

    
    # Attribute MaxNumberOfActiveBackgroundProcesses uses Python identifier MaxNumberOfActiveBackgroundProcesses
    __MaxNumberOfActiveBackgroundProcesses = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MaxNumberOfActiveBackgroundProcesses'), 'MaxNumberOfActiveBackgroundProcesses', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_MaxNumberOfActiveBackgroundProcesses', pyxb.binding.datatypes.string)
    __MaxNumberOfActiveBackgroundProcesses._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5365, 8)
    __MaxNumberOfActiveBackgroundProcesses._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5365, 8)
    
    MaxNumberOfActiveBackgroundProcesses = property(__MaxNumberOfActiveBackgroundProcesses.value, __MaxNumberOfActiveBackgroundProcesses.set, None, '\n                    The maximum number of active background processes.\n                ')

    
    # Attribute PollInterval uses Python identifier PollInterval
    __PollInterval = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PollInterval'), 'PollInterval', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_PollInterval', pyxb.binding.datatypes.string)
    __PollInterval._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5372, 8)
    __PollInterval._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5372, 8)
    
    PollInterval = property(__PollInterval.value, __PollInterval.set, None, '\n                    The time interval between an endpoint has handled the last requests in the receiver and the endpoint\n                    checks the receiver for new content. The poll interval is assumed to be in seconds and defaults to\n                    30 seconds.\n                ')

    
    # Attribute ProcessPluginID uses Python identifier ProcessPluginID
    __ProcessPluginID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ProcessPluginID'), 'ProcessPluginID', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_ProcessPluginID', pyxb.binding.datatypes.string)
    __ProcessPluginID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5381, 8)
    __ProcessPluginID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5381, 8)
    
    ProcessPluginID = property(__ProcessPluginID.value, __ProcessPluginID.set, None, '\n                    The ID of the process plugin.\n                ')

    
    # Attribute PreProcessorPluginID uses Python identifier PreProcessorPluginID
    __PreProcessorPluginID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PreProcessorPluginID'), 'PreProcessorPluginID', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_PreProcessorPluginID', pyxb.binding.datatypes.string)
    __PreProcessorPluginID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5388, 8)
    __PreProcessorPluginID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5388, 8)
    
    PreProcessorPluginID = property(__PreProcessorPluginID.value, __PreProcessorPluginID.set, None, '\n                    The ID of the preprocessor plugin.\n                ')

    
    # Attribute PostProcessorPluginID uses Python identifier PostProcessorPluginID
    __PostProcessorPluginID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PostProcessorPluginID'), 'PostProcessorPluginID', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_PostProcessorPluginID', pyxb.binding.datatypes.string)
    __PostProcessorPluginID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5395, 8)
    __PostProcessorPluginID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5395, 8)
    
    PostProcessorPluginID = property(__PostProcessorPluginID.value, __PostProcessorPluginID.set, None, '\n                    The ID of the postprocessor plugin.\n                ')

    
    # Attribute DataSourcePluginID uses Python identifier DataSourcePluginID
    __DataSourcePluginID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DataSourcePluginID'), 'DataSourcePluginID', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_DataSourcePluginID', pyxb.binding.datatypes.string)
    __DataSourcePluginID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5402, 8)
    __DataSourcePluginID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5402, 8)
    
    DataSourcePluginID = property(__DataSourcePluginID.value, __DataSourcePluginID.set, None, '\n                    The ID of the data source plugin.\n                ')

    
    # Attribute ErrorReporterPluginID uses Python identifier ErrorReporterPluginID
    __ErrorReporterPluginID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ErrorReporterPluginID'), 'ErrorReporterPluginID', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_ErrorReporterPluginID', pyxb.binding.datatypes.string)
    __ErrorReporterPluginID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5409, 8)
    __ErrorReporterPluginID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5409, 8)
    
    ErrorReporterPluginID = property(__ErrorReporterPluginID.value, __ErrorReporterPluginID.set, None, '\n                    The ID of the error reporter plugin.\n                ')

    
    # Attribute EnableRetry uses Python identifier EnableRetry
    __EnableRetry = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'EnableRetry'), 'EnableRetry', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_EnableRetry', pyxb.binding.datatypes.boolean, unicode_default='false')
    __EnableRetry._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5416, 8)
    __EnableRetry._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5416, 8)
    
    EnableRetry = property(__EnableRetry.value, __EnableRetry.set, None, '\n                    Allow retry of Receiver plugin on FailAndRetryException.\n                ')

    
    # Attribute RetryDuration uses Python identifier RetryDuration
    __RetryDuration = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'RetryDuration'), 'RetryDuration', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_RetryDuration', pyxb.binding.datatypes.string)
    __RetryDuration._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5423, 8)
    __RetryDuration._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5423, 8)
    
    RetryDuration = property(__RetryDuration.value, __RetryDuration.set, None, '\n                    Max duration of retries before letting the endpoint fail.\n                ')

    
    # Attribute DeliveryMethodPluginID uses Python identifier DeliveryMethodPluginID
    __DeliveryMethodPluginID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DeliveryMethodPluginID'), 'DeliveryMethodPluginID', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_DeliveryMethodPluginID', pyxb.binding.datatypes.string)
    __DeliveryMethodPluginID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5430, 8)
    __DeliveryMethodPluginID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5430, 8)
    
    DeliveryMethodPluginID = property(__DeliveryMethodPluginID.value, __DeliveryMethodPluginID.set, None, '\n                    The ID of the delivery plugin.\n                ')

    
    # Attribute QueueForEndpoint uses Python identifier QueueForEndpoint
    __QueueForEndpoint = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QueueForEndpoint'), 'QueueForEndpoint', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_QueueForEndpoint', _module_typeBindings.StepEventQueueID)
    __QueueForEndpoint._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5437, 8)
    __QueueForEndpoint._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5437, 8)
    
    QueueForEndpoint = property(__QueueForEndpoint.value, __QueueForEndpoint.set, None, '\n                    The queue the endpoint poller background process for this endpoint is started in.\n                ')

    
    # Attribute QueueForProcssing uses Python identifier QueueForProcssing
    __QueueForProcssing = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QueueForProcssing'), 'QueueForProcssing', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_QueueForProcssing', _module_typeBindings.StepEventQueueID)
    __QueueForProcssing._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5444, 8)
    __QueueForProcssing._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5444, 8)
    
    QueueForProcssing = property(__QueueForProcssing.value, __QueueForProcssing.set, None, '\n                    The queue used when a background process is started to handle the processing part of the endpoint.\n                    The processing part in the endpoint is where data is exported.\n                ')

    
    # Attribute TransactionType uses Python identifier TransactionType
    __TransactionType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TransactionType'), 'TransactionType', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_TransactionType', pyxb.binding.datatypes.string)
    __TransactionType._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5452, 8)
    __TransactionType._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5452, 8)
    
    TransactionType = property(__TransactionType.value, __TransactionType.set, None, '\n                    The transactional setting for the endpoint.\n                ')

    
    # Attribute UseCrossContext uses Python identifier UseCrossContext
    __UseCrossContext = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UseCrossContext'), 'UseCrossContext', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_UseCrossContext', pyxb.binding.datatypes.boolean)
    __UseCrossContext._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5459, 8)
    __UseCrossContext._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5459, 8)
    
    UseCrossContext = property(__UseCrossContext.value, __UseCrossContext.set, None, '\n                    Whether or not to use cross context. If absent, plurality of contexts decide.\n                ')

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5466, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5466, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute MultiThreadCount uses Python identifier MultiThreadCount
    __MultiThreadCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MultiThreadCount'), 'MultiThreadCount', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_MultiThreadCount', pyxb.binding.datatypes.int)
    __MultiThreadCount._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5467, 8)
    __MultiThreadCount._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5467, 8)
    
    MultiThreadCount = property(__MultiThreadCount.value, __MultiThreadCount.set, None, '\n                    The amount of threads allocated to execution of the preprocessing, main processing and\n                    postprocessing steps of the endpoint.\n                ')

    
    # Attribute RefreshCollections uses Python identifier RefreshCollections
    __RefreshCollections = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'RefreshCollections'), 'RefreshCollections', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_RefreshCollections', pyxb.binding.datatypes.boolean, unicode_default='false')
    __RefreshCollections._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5475, 8)
    __RefreshCollections._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5475, 8)
    
    RefreshCollections = property(__RefreshCollections.value, __RefreshCollections.set, None, '\n                    If the endpoint is configured to export the content of a search based collection, this attribute\n                    indicates whether or not the collection should be refreshed every time the endpoint is invoked.\n                ')

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5483, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5483, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_OutBoundIntegrationEndpointType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5484, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5484, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __SetupGroupLink.name() : __SetupGroupLink,
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __ScheduleSpecification.name() : __ScheduleSpecification,
        __PreProcessorPluginConfiguration.name() : __PreProcessorPluginConfiguration,
        __PostProcessorPluginConfiguration.name() : __PostProcessorPluginConfiguration,
        __DataSourcePluginConfiguration.name() : __DataSourcePluginConfiguration,
        __DeliveryMethodPluginConfiguration.name() : __DeliveryMethodPluginConfiguration,
        __EventQueue.name() : __EventQueue,
        __ProcessPluginConfiguration.name() : __ProcessPluginConfiguration,
        __ErrorReporterPluginConfiguration.name() : __ErrorReporterPluginConfiguration,
        __ContextLink.name() : __ContextLink,
        __WorkspaceID.name() : __WorkspaceID
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __UserTypeID.name() : __UserTypeID,
        __Description.name() : __Description,
        __ResponsibleUserID.name() : __ResponsibleUserID,
        __MaximumNumberOfFailedBackgroundProcesses.name() : __MaximumNumberOfFailedBackgroundProcesses,
        __MaximumAgeOfFailedBackgroundProcesses.name() : __MaximumAgeOfFailedBackgroundProcesses,
        __MaximumNumberOfSucceededBackgroundProcesses.name() : __MaximumNumberOfSucceededBackgroundProcesses,
        __MaximumAgeOfSucceededBackgroundProcesses.name() : __MaximumAgeOfSucceededBackgroundProcesses,
        __MaxNumberOfActiveBackgroundProcesses.name() : __MaxNumberOfActiveBackgroundProcesses,
        __PollInterval.name() : __PollInterval,
        __ProcessPluginID.name() : __ProcessPluginID,
        __PreProcessorPluginID.name() : __PreProcessorPluginID,
        __PostProcessorPluginID.name() : __PostProcessorPluginID,
        __DataSourcePluginID.name() : __DataSourcePluginID,
        __ErrorReporterPluginID.name() : __ErrorReporterPluginID,
        __EnableRetry.name() : __EnableRetry,
        __RetryDuration.name() : __RetryDuration,
        __DeliveryMethodPluginID.name() : __DeliveryMethodPluginID,
        __QueueForEndpoint.name() : __QueueForEndpoint,
        __QueueForProcssing.name() : __QueueForProcssing,
        __TransactionType.name() : __TransactionType,
        __UseCrossContext.name() : __UseCrossContext,
        __Selected.name() : __Selected,
        __MultiThreadCount.name() : __MultiThreadCount,
        __RefreshCollections.name() : __RefreshCollections,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed
    })
_module_typeBindings.OutBoundIntegrationEndpointType = OutBoundIntegrationEndpointType
Namespace.addCategoryObject('typeBinding', 'OutBoundIntegrationEndpointType', OutBoundIntegrationEndpointType)


# Complex type {http://www.stibosystems.com/step}OverrideSubProductType with content type ELEMENT_ONLY
class OverrideSubProductType (pyxb.binding.basis.complexTypeDefinition):
    """
                This tag can appear only for product-overrides. It links a product into the product-override.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OverrideSubProductType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5486, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Product uses Python identifier Product
    __Product = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Product'), 'Product', '__httpwww_stibosystems_comstep_OverrideSubProductType_httpwww_stibosystems_comstepProduct', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5494, 16), )

    
    Product = property(__Product.value, __Product.set, None, None)

    
    # Attribute ProductID uses Python identifier ProductID
    __ProductID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ProductID'), 'ProductID', '__httpwww_stibosystems_comstep_OverrideSubProductType_ProductID', _module_typeBindings.StepProductID, required=True)
    __ProductID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5497, 8)
    __ProductID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5497, 8)
    
    ProductID = property(__ProductID.value, __ProductID.set, None, '\n                    The ID of the product linked into this product override.\n                ')

    
    # Attribute AnalyzerResult uses Python identifier AnalyzerResult
    __AnalyzerResult = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AnalyzerResult'), 'AnalyzerResult', '__httpwww_stibosystems_comstep_OverrideSubProductType_AnalyzerResult', pyxb.binding.datatypes.string)
    __AnalyzerResult._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5504, 8)
    __AnalyzerResult._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5504, 8)
    
    AnalyzerResult = property(__AnalyzerResult.value, __AnalyzerResult.set, None, '\n                    @Deprecated, to be removed in a future release.\n\n                    WebPublisher specific attribute. Identifies whether the referenced product\n                    is present on the website. Possible values: included, excluded\n                ')

    _ElementMap.update({
        __Product.name() : __Product
    })
    _AttributeMap.update({
        __ProductID.name() : __ProductID,
        __AnalyzerResult.name() : __AnalyzerResult
    })
_module_typeBindings.OverrideSubProductType = OverrideSubProductType
Namespace.addCategoryObject('typeBinding', 'OverrideSubProductType', OverrideSubProductType)


# Complex type {http://www.stibosystems.com/step}PackagingReferenceType with content type EMPTY
class PackagingReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}PackagingReferenceType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PackagingReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5515, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ProductID uses Python identifier ProductID
    __ProductID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ProductID'), 'ProductID', '__httpwww_stibosystems_comstep_PackagingReferenceType_ProductID', _module_typeBindings.StepProductID, required=True)
    __ProductID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5516, 8)
    __ProductID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5516, 8)
    
    ProductID = property(__ProductID.value, __ProductID.set, None, None)

    
    # Attribute Quantity uses Python identifier Quantity
    __Quantity = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Quantity'), 'Quantity', '__httpwww_stibosystems_comstep_PackagingReferenceType_Quantity', pyxb.binding.datatypes.string, required=True)
    __Quantity._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5517, 8)
    __Quantity._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5517, 8)
    
    Quantity = property(__Quantity.value, __Quantity.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ProductID.name() : __ProductID,
        __Quantity.name() : __Quantity
    })
_module_typeBindings.PackagingReferenceType = PackagingReferenceType
Namespace.addCategoryObject('typeBinding', 'PackagingReferenceType', PackagingReferenceType)


# Complex type {http://www.stibosystems.com/step}ParentKeyValueType with content type MIXED
class ParentKeyValueType (pyxb.binding.basis.complexTypeDefinition):
    """
                The key value for a parent node in a specific key. Alternative to supplying a parent ID. If both a
                parent ID and this element is supplied, they must point to the same node.
                Note: When importing, this element may only be here once per node, and referenced parents must appear
                before the child object in the STEPXML.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ParentKeyValueType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5554, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute KeyID uses Python identifier KeyID
    __KeyID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'KeyID'), 'KeyID', '__httpwww_stibosystems_comstep_ParentKeyValueType_KeyID', _module_typeBindings.StepKeyID, required=True)
    __KeyID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5563, 8)
    __KeyID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5563, 8)
    
    KeyID = property(__KeyID.value, __KeyID.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __KeyID.name() : __KeyID
    })
_module_typeBindings.ParentKeyValueType = ParentKeyValueType
Namespace.addCategoryObject('typeBinding', 'ParentKeyValueType', ParentKeyValueType)


# Complex type {http://www.stibosystems.com/step}PortalConfigurationType with content type ELEMENT_ONLY
class PortalConfigurationType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a portal / web UI configuration.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PortalConfigurationType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5598, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}SetupGroupLink uses Python identifier SetupGroupLink
    __SetupGroupLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink'), 'SetupGroupLink', '__httpwww_stibosystems_comstep_PortalConfigurationType_httpwww_stibosystems_comstepSetupGroupLink', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5605, 12), )

    
    SetupGroupLink = property(__SetupGroupLink.value, __SetupGroupLink.set, None, '\n                        The setup group that the configuration is located in.\n                    ')

    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_PortalConfigurationType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5612, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_PortalConfigurationType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5613, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Configuration uses Python identifier Configuration
    __Configuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), 'Configuration', '__httpwww_stibosystems_comstep_PortalConfigurationType_httpwww_stibosystems_comstepConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5614, 12), )

    
    Configuration = property(__Configuration.value, __Configuration.set, None, '\n                        The configuration in encoded form.\n                    ')

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_PortalConfigurationType_ID', _module_typeBindings.StepPortalConfigurationID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5622, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5622, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    ID of the configuration.\n                ')

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_PortalConfigurationType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5629, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5629, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_PortalConfigurationType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5630, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5630, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_PortalConfigurationType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5631, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5631, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __SetupGroupLink.name() : __SetupGroupLink,
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __Configuration.name() : __Configuration
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed
    })
_module_typeBindings.PortalConfigurationType = PortalConfigurationType
Namespace.addCategoryObject('typeBinding', 'PortalConfigurationType', PortalConfigurationType)


# Complex type {http://www.stibosystems.com/step}PrivilegeRuleType with content type EMPTY
class PrivilegeRuleType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}PrivilegeRuleType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PrivilegeRuleType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5633, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ActionSetID uses Python identifier ActionSetID
    __ActionSetID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ActionSetID'), 'ActionSetID', '__httpwww_stibosystems_comstep_PrivilegeRuleType_ActionSetID', _module_typeBindings.StepActionSetID, required=True)
    __ActionSetID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5634, 8)
    __ActionSetID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5634, 8)
    
    ActionSetID = property(__ActionSetID.value, __ActionSetID.set, None, None)

    
    # Attribute AttributeID uses Python identifier AttributeID
    __AttributeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AttributeID'), 'AttributeID', '__httpwww_stibosystems_comstep_PrivilegeRuleType_AttributeID', _module_typeBindings.StepAttributeID)
    __AttributeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5635, 8)
    __AttributeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5635, 8)
    
    AttributeID = property(__AttributeID.value, __AttributeID.set, None, None)

    
    # Attribute SetupGroupID uses Python identifier SetupGroupID
    __SetupGroupID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SetupGroupID'), 'SetupGroupID', '__httpwww_stibosystems_comstep_PrivilegeRuleType_SetupGroupID', _module_typeBindings.StepSetupGroupID)
    __SetupGroupID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5636, 8)
    __SetupGroupID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5636, 8)
    
    SetupGroupID = property(__SetupGroupID.value, __SetupGroupID.set, None, None)

    
    # Attribute ClassificationID uses Python identifier ClassificationID
    __ClassificationID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ClassificationID'), 'ClassificationID', '__httpwww_stibosystems_comstep_PrivilegeRuleType_ClassificationID', _module_typeBindings.StepClassificationID)
    __ClassificationID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5637, 8)
    __ClassificationID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5637, 8)
    
    ClassificationID = property(__ClassificationID.value, __ClassificationID.set, None, None)

    
    # Attribute AttributeGroupID uses Python identifier AttributeGroupID
    __AttributeGroupID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AttributeGroupID'), 'AttributeGroupID', '__httpwww_stibosystems_comstep_PrivilegeRuleType_AttributeGroupID', _module_typeBindings.StepAttributeID)
    __AttributeGroupID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5638, 8)
    __AttributeGroupID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5638, 8)
    
    AttributeGroupID = property(__AttributeGroupID.value, __AttributeGroupID.set, None, None)

    
    # Attribute TermsListID uses Python identifier TermsListID
    __TermsListID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TermsListID'), 'TermsListID', '__httpwww_stibosystems_comstep_PrivilegeRuleType_TermsListID', _module_typeBindings.StepTermsListID)
    __TermsListID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5639, 8)
    __TermsListID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5639, 8)
    
    TermsListID = property(__TermsListID.value, __TermsListID.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_PrivilegeRuleType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5640, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5640, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, None)

    
    # Attribute VersionID uses Python identifier VersionID
    __VersionID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'VersionID'), 'VersionID', '__httpwww_stibosystems_comstep_PrivilegeRuleType_VersionID', _module_typeBindings.StepID)
    __VersionID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5641, 8)
    __VersionID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5641, 8)
    
    VersionID = property(__VersionID.value, __VersionID.set, None, None)

    
    # Attribute TradingTermsID uses Python identifier TradingTermsID
    __TradingTermsID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TradingTermsID'), 'TradingTermsID', '__httpwww_stibosystems_comstep_PrivilegeRuleType_TradingTermsID', _module_typeBindings.StepTradingTermsID)
    __TradingTermsID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5642, 8)
    __TradingTermsID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5642, 8)
    
    TradingTermsID = property(__TradingTermsID.value, __TradingTermsID.set, None, None)

    
    # Attribute ProductID uses Python identifier ProductID
    __ProductID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ProductID'), 'ProductID', '__httpwww_stibosystems_comstep_PrivilegeRuleType_ProductID', _module_typeBindings.StepProductID)
    __ProductID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5643, 8)
    __ProductID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5643, 8)
    
    ProductID = property(__ProductID.value, __ProductID.set, None, None)

    
    # Attribute AssetID uses Python identifier AssetID
    __AssetID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AssetID'), 'AssetID', '__httpwww_stibosystems_comstep_PrivilegeRuleType_AssetID', _module_typeBindings.StepAssetID)
    __AssetID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5644, 8)
    __AssetID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5644, 8)
    
    AssetID = property(__AssetID.value, __AssetID.set, None, None)

    
    # Attribute UserTypeID uses Python identifier UserTypeID
    __UserTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserTypeID'), 'UserTypeID', '__httpwww_stibosystems_comstep_PrivilegeRuleType_UserTypeID', _module_typeBindings.StepObjectTypeID)
    __UserTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5645, 8)
    __UserTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5645, 8)
    
    UserTypeID = property(__UserTypeID.value, __UserTypeID.set, None, None)

    
    # Attribute PublicationSectionID uses Python identifier PublicationSectionID
    __PublicationSectionID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PublicationSectionID'), 'PublicationSectionID', '__httpwww_stibosystems_comstep_PrivilegeRuleType_PublicationSectionID', _module_typeBindings.StepID)
    __PublicationSectionID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5646, 8)
    __PublicationSectionID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5646, 8)
    
    PublicationSectionID = property(__PublicationSectionID.value, __PublicationSectionID.set, None, None)

    
    # Attribute PublicationID uses Python identifier PublicationID
    __PublicationID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PublicationID'), 'PublicationID', '__httpwww_stibosystems_comstep_PrivilegeRuleType_PublicationID', _module_typeBindings.StepID)
    __PublicationID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5647, 8)
    __PublicationID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5647, 8)
    
    PublicationID = property(__PublicationID.value, __PublicationID.set, None, None)

    
    # Attribute PublicationGroupID uses Python identifier PublicationGroupID
    __PublicationGroupID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PublicationGroupID'), 'PublicationGroupID', '__httpwww_stibosystems_comstep_PrivilegeRuleType_PublicationGroupID', _module_typeBindings.StepID)
    __PublicationGroupID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5648, 8)
    __PublicationGroupID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5648, 8)
    
    PublicationGroupID = property(__PublicationGroupID.value, __PublicationGroupID.set, None, None)

    
    # Attribute CollectionID uses Python identifier CollectionID
    __CollectionID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'CollectionID'), 'CollectionID', '__httpwww_stibosystems_comstep_PrivilegeRuleType_CollectionID', _module_typeBindings.StepNodeCollectionID)
    __CollectionID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5649, 8)
    __CollectionID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5649, 8)
    
    CollectionID = property(__CollectionID.value, __CollectionID.set, None, None)

    
    # Attribute CollectionGroupID uses Python identifier CollectionGroupID
    __CollectionGroupID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'CollectionGroupID'), 'CollectionGroupID', '__httpwww_stibosystems_comstep_PrivilegeRuleType_CollectionGroupID', _module_typeBindings.StepNodeCollectionID)
    __CollectionGroupID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5650, 8)
    __CollectionGroupID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5650, 8)
    
    CollectionGroupID = property(__CollectionGroupID.value, __CollectionGroupID.set, None, None)

    
    # Attribute GroupID uses Python identifier GroupID
    __GroupID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'GroupID'), 'GroupID', '__httpwww_stibosystems_comstep_PrivilegeRuleType_GroupID', _module_typeBindings.StepUserGroupID)
    __GroupID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5651, 8)
    __GroupID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5651, 8)
    
    GroupID = property(__GroupID.value, __GroupID.set, None, None)

    
    # Attribute EntityID uses Python identifier EntityID
    __EntityID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'EntityID'), 'EntityID', '__httpwww_stibosystems_comstep_PrivilegeRuleType_EntityID', _module_typeBindings.StepEntityID)
    __EntityID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5652, 8)
    __EntityID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5652, 8)
    
    EntityID = property(__EntityID.value, __EntityID.set, None, None)

    
    # Attribute STEPWorkflowID uses Python identifier STEPWorkflowID
    __STEPWorkflowID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'STEPWorkflowID'), 'STEPWorkflowID', '__httpwww_stibosystems_comstep_PrivilegeRuleType_STEPWorkflowID', _module_typeBindings.StepWorkflowID)
    __STEPWorkflowID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5653, 8)
    __STEPWorkflowID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5653, 8)
    
    STEPWorkflowID = property(__STEPWorkflowID.value, __STEPWorkflowID.set, None, None)

    
    # Attribute STEPWorkflowStateID uses Python identifier STEPWorkflowStateID
    __STEPWorkflowStateID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'STEPWorkflowStateID'), 'STEPWorkflowStateID', '__httpwww_stibosystems_comstep_PrivilegeRuleType_STEPWorkflowStateID', pyxb.binding.datatypes.string)
    __STEPWorkflowStateID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5654, 8)
    __STEPWorkflowStateID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5654, 8)
    
    STEPWorkflowStateID = property(__STEPWorkflowStateID.value, __STEPWorkflowStateID.set, None, None)

    
    # Attribute ObjectCreation uses Python identifier ObjectCreation
    __ObjectCreation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ObjectCreation'), 'ObjectCreation', '__httpwww_stibosystems_comstep_PrivilegeRuleType_ObjectCreation', pyxb.binding.datatypes.boolean, unicode_default='true')
    __ObjectCreation._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5655, 8)
    __ObjectCreation._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5655, 8)
    
    ObjectCreation = property(__ObjectCreation.value, __ObjectCreation.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ActionSetID.name() : __ActionSetID,
        __AttributeID.name() : __AttributeID,
        __SetupGroupID.name() : __SetupGroupID,
        __ClassificationID.name() : __ClassificationID,
        __AttributeGroupID.name() : __AttributeGroupID,
        __TermsListID.name() : __TermsListID,
        __QualifierID.name() : __QualifierID,
        __VersionID.name() : __VersionID,
        __TradingTermsID.name() : __TradingTermsID,
        __ProductID.name() : __ProductID,
        __AssetID.name() : __AssetID,
        __UserTypeID.name() : __UserTypeID,
        __PublicationSectionID.name() : __PublicationSectionID,
        __PublicationID.name() : __PublicationID,
        __PublicationGroupID.name() : __PublicationGroupID,
        __CollectionID.name() : __CollectionID,
        __CollectionGroupID.name() : __CollectionGroupID,
        __GroupID.name() : __GroupID,
        __EntityID.name() : __EntityID,
        __STEPWorkflowID.name() : __STEPWorkflowID,
        __STEPWorkflowStateID.name() : __STEPWorkflowStateID,
        __ObjectCreation.name() : __ObjectCreation
    })
_module_typeBindings.PrivilegeRuleType = PrivilegeRuleType
Namespace.addCategoryObject('typeBinding', 'PrivilegeRuleType', PrivilegeRuleType)


# Complex type {http://www.stibosystems.com/step}ProductType with content type ELEMENT_ONLY
class ProductType (pyxb.binding.basis.complexTypeDefinition):
    """
                Describes a product in STEP. The Product element lists its names, the linked attributes on this level,
                classification links, sub products, cross-references to other products, asset references and product
                attribute values.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProductType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5657, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5666, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ParentKeyValue uses Python identifier ParentKeyValue
    __ParentKeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ParentKeyValue'), 'ParentKeyValue', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepParentKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5667, 12), )

    
    ParentKeyValue = property(__ParentKeyValue.value, __ParentKeyValue.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5668, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}STEPWorkflowStateBind uses Python identifier STEPWorkflowStateBind
    __STEPWorkflowStateBind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'STEPWorkflowStateBind'), 'STEPWorkflowStateBind', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepSTEPWorkflowStateBind', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5669, 12), )

    
    STEPWorkflowStateBind = property(__STEPWorkflowStateBind.value, __STEPWorkflowStateBind.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Product uses Python identifier Product
    __Product = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Product'), 'Product', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepProduct', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5671, 16), )

    
    Product = property(__Product.value, __Product.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SequenceProduct uses Python identifier SequenceProduct
    __SequenceProduct = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SequenceProduct'), 'SequenceProduct', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepSequenceProduct', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5672, 16), )

    
    SequenceProduct = property(__SequenceProduct.value, __SequenceProduct.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ProductReference uses Python identifier ProductReference
    __ProductReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ProductReference'), 'ProductReference', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepProductReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5673, 16), )

    
    ProductReference = property(__ProductReference.value, __ProductReference.set, None, '\n                            @Deprecated, in this context an alias for ProductCrossReference that should be used instead.\n                        ')

    
    # Element {http://www.stibosystems.com/step}DeleteSuppressedClassificationCrossReference uses Python identifier DeleteSuppressedClassificationCrossReference
    __DeleteSuppressedClassificationCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedClassificationCrossReference'), 'DeleteSuppressedClassificationCrossReference', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepDeleteSuppressedClassificationCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5681, 20), )

    
    DeleteSuppressedClassificationCrossReference = property(__DeleteSuppressedClassificationCrossReference.value, __DeleteSuppressedClassificationCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteClassificationCrossReference uses Python identifier DeleteClassificationCrossReference
    __DeleteClassificationCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteClassificationCrossReference'), 'DeleteClassificationCrossReference', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepDeleteClassificationCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5684, 20), )

    
    DeleteClassificationCrossReference = property(__DeleteClassificationCrossReference.value, __DeleteClassificationCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SuppressedClassificationCrossReference uses Python identifier SuppressedClassificationCrossReference
    __SuppressedClassificationCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SuppressedClassificationCrossReference'), 'SuppressedClassificationCrossReference', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepSuppressedClassificationCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5686, 20), )

    
    SuppressedClassificationCrossReference = property(__SuppressedClassificationCrossReference.value, __SuppressedClassificationCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ClassificationCrossReference uses Python identifier ClassificationCrossReference
    __ClassificationCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClassificationCrossReference'), 'ClassificationCrossReference', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepClassificationCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5688, 20), )

    
    ClassificationCrossReference = property(__ClassificationCrossReference.value, __ClassificationCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteSuppressedProductCrossReference uses Python identifier DeleteSuppressedProductCrossReference
    __DeleteSuppressedProductCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedProductCrossReference'), 'DeleteSuppressedProductCrossReference', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepDeleteSuppressedProductCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5692, 20), )

    
    DeleteSuppressedProductCrossReference = property(__DeleteSuppressedProductCrossReference.value, __DeleteSuppressedProductCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteProductCrossReference uses Python identifier DeleteProductCrossReference
    __DeleteProductCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteProductCrossReference'), 'DeleteProductCrossReference', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepDeleteProductCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5694, 20), )

    
    DeleteProductCrossReference = property(__DeleteProductCrossReference.value, __DeleteProductCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SuppressedProductCrossReference uses Python identifier SuppressedProductCrossReference
    __SuppressedProductCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SuppressedProductCrossReference'), 'SuppressedProductCrossReference', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepSuppressedProductCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5696, 20), )

    
    SuppressedProductCrossReference = property(__SuppressedProductCrossReference.value, __SuppressedProductCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ProductCrossReference uses Python identifier ProductCrossReference
    __ProductCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ProductCrossReference'), 'ProductCrossReference', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepProductCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5698, 20), )

    
    ProductCrossReference = property(__ProductCrossReference.value, __ProductCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteSuppressedAssetCrossReference uses Python identifier DeleteSuppressedAssetCrossReference
    __DeleteSuppressedAssetCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedAssetCrossReference'), 'DeleteSuppressedAssetCrossReference', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepDeleteSuppressedAssetCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5702, 20), )

    
    DeleteSuppressedAssetCrossReference = property(__DeleteSuppressedAssetCrossReference.value, __DeleteSuppressedAssetCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteAssetCrossReference uses Python identifier DeleteAssetCrossReference
    __DeleteAssetCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteAssetCrossReference'), 'DeleteAssetCrossReference', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepDeleteAssetCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5704, 20), )

    
    DeleteAssetCrossReference = property(__DeleteAssetCrossReference.value, __DeleteAssetCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SuppressedAssetCrossReference uses Python identifier SuppressedAssetCrossReference
    __SuppressedAssetCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SuppressedAssetCrossReference'), 'SuppressedAssetCrossReference', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepSuppressedAssetCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5706, 20), )

    
    SuppressedAssetCrossReference = property(__SuppressedAssetCrossReference.value, __SuppressedAssetCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AssetCrossReference uses Python identifier AssetCrossReference
    __AssetCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssetCrossReference'), 'AssetCrossReference', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepAssetCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5708, 20), )

    
    AssetCrossReference = property(__AssetCrossReference.value, __AssetCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteSuppressedClassificationReference uses Python identifier DeleteSuppressedClassificationReference
    __DeleteSuppressedClassificationReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedClassificationReference'), 'DeleteSuppressedClassificationReference', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepDeleteSuppressedClassificationReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5712, 20), )

    
    DeleteSuppressedClassificationReference = property(__DeleteSuppressedClassificationReference.value, __DeleteSuppressedClassificationReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteClassificationReference uses Python identifier DeleteClassificationReference
    __DeleteClassificationReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteClassificationReference'), 'DeleteClassificationReference', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepDeleteClassificationReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5714, 20), )

    
    DeleteClassificationReference = property(__DeleteClassificationReference.value, __DeleteClassificationReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SuppressedClassificationReference uses Python identifier SuppressedClassificationReference
    __SuppressedClassificationReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SuppressedClassificationReference'), 'SuppressedClassificationReference', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepSuppressedClassificationReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5716, 20), )

    
    SuppressedClassificationReference = property(__SuppressedClassificationReference.value, __SuppressedClassificationReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ClassificationReference uses Python identifier ClassificationReference
    __ClassificationReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClassificationReference'), 'ClassificationReference', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepClassificationReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5719, 20), )

    
    ClassificationReference = property(__ClassificationReference.value, __ClassificationReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteSuppressedEntityCrossReference uses Python identifier DeleteSuppressedEntityCrossReference
    __DeleteSuppressedEntityCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedEntityCrossReference'), 'DeleteSuppressedEntityCrossReference', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepDeleteSuppressedEntityCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5723, 20), )

    
    DeleteSuppressedEntityCrossReference = property(__DeleteSuppressedEntityCrossReference.value, __DeleteSuppressedEntityCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteEntityCrossReference uses Python identifier DeleteEntityCrossReference
    __DeleteEntityCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteEntityCrossReference'), 'DeleteEntityCrossReference', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepDeleteEntityCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5725, 20), )

    
    DeleteEntityCrossReference = property(__DeleteEntityCrossReference.value, __DeleteEntityCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SuppressedEntityCrossReference uses Python identifier SuppressedEntityCrossReference
    __SuppressedEntityCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SuppressedEntityCrossReference'), 'SuppressedEntityCrossReference', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepSuppressedEntityCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5727, 20), )

    
    SuppressedEntityCrossReference = property(__SuppressedEntityCrossReference.value, __SuppressedEntityCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}EntityCrossReference uses Python identifier EntityCrossReference
    __EntityCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EntityCrossReference'), 'EntityCrossReference', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepEntityCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5729, 20), )

    
    EntityCrossReference = property(__EntityCrossReference.value, __EntityCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteAttributeLink uses Python identifier DeleteAttributeLink
    __DeleteAttributeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteAttributeLink'), 'DeleteAttributeLink', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepDeleteAttributeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5733, 20), )

    
    DeleteAttributeLink = property(__DeleteAttributeLink.value, __DeleteAttributeLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeLink uses Python identifier AttributeLink
    __AttributeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink'), 'AttributeLink', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepAttributeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5735, 20), )

    
    AttributeLink = property(__AttributeLink.value, __AttributeLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DataContainerTypeLink uses Python identifier DataContainerTypeLink
    __DataContainerTypeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DataContainerTypeLink'), 'DataContainerTypeLink', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepDataContainerTypeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5738, 20), )

    
    DataContainerTypeLink = property(__DataContainerTypeLink.value, __DataContainerTypeLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteDataContainerTypeLink uses Python identifier DeleteDataContainerTypeLink
    __DeleteDataContainerTypeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteDataContainerTypeLink'), 'DeleteDataContainerTypeLink', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepDeleteDataContainerTypeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5740, 20), )

    
    DeleteDataContainerTypeLink = property(__DeleteDataContainerTypeLink.value, __DeleteDataContainerTypeLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DataContainers uses Python identifier DataContainers
    __DataContainers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DataContainers'), 'DataContainers', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepDataContainers', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5743, 16), )

    
    DataContainers = property(__DataContainers.value, __DataContainers.set, None, None)

    
    # Element {http://www.stibosystems.com/step}CurrentTasks uses Python identifier CurrentTasks
    __CurrentTasks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CurrentTasks'), 'CurrentTasks', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepCurrentTasks', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5744, 16), )

    
    CurrentTasks = property(__CurrentTasks.value, __CurrentTasks.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Terms uses Python identifier Terms
    __Terms = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Terms'), 'Terms', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepTerms', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5745, 16), )

    
    Terms = property(__Terms.value, __Terms.set, None, None)

    
    # Element {http://www.stibosystems.com/step}OverrideSubProduct uses Python identifier OverrideSubProduct
    __OverrideSubProduct = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OverrideSubProduct'), 'OverrideSubProduct', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepOverrideSubProduct', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5746, 16), )

    
    OverrideSubProduct = property(__OverrideSubProduct.value, __OverrideSubProduct.set, None, None)

    
    # Element {http://www.stibosystems.com/step}PackagingReference uses Python identifier PackagingReference
    __PackagingReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PackagingReference'), 'PackagingReference', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepPackagingReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5747, 16), )

    
    PackagingReference = property(__PackagingReference.value, __PackagingReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Tables uses Python identifier Tables
    __Tables = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Tables'), 'Tables', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepTables', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5748, 16), )

    
    Tables = property(__Tables.value, __Tables.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Values uses Python identifier Values
    __Values = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Values'), 'Values', '__httpwww_stibosystems_comstep_ProductType_httpwww_stibosystems_comstepValues', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5749, 16), )

    
    Values = property(__Values.value, __Values.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_ProductType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5752, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5752, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    
    # Attribute SourcePos uses Python identifier SourcePos
    __SourcePos = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SourcePos'), 'SourcePos', '__httpwww_stibosystems_comstep_ProductType_SourcePos', pyxb.binding.datatypes.string)
    __SourcePos._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5753, 8)
    __SourcePos._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5753, 8)
    
    SourcePos = property(__SourcePos.value, __SourcePos.set, None, None)

    
    # Attribute AnalyzerResult uses Python identifier AnalyzerResult
    __AnalyzerResult = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AnalyzerResult'), 'AnalyzerResult', '__httpwww_stibosystems_comstep_ProductType_AnalyzerResult', pyxb.binding.datatypes.string)
    __AnalyzerResult._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5754, 8)
    __AnalyzerResult._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5754, 8)
    
    AnalyzerResult = property(__AnalyzerResult.value, __AnalyzerResult.set, None, '\n                    @Deprecated, to be removed in a future release.\n\n                    WebPublisher specific attribute. Identifies whether the product in question is present on the\n                    website. Possible values: included, excluded.\n                ')

    
    # Attribute ParentID uses Python identifier ParentID
    __ParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ParentID'), 'ParentID', '__httpwww_stibosystems_comstep_ProductType_ParentID', _module_typeBindings.StepProductID)
    __ParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5764, 8)
    __ParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5764, 8)
    
    ParentID = property(__ParentID.value, __ParentID.set, None, '\n                    The parent product of this product. Required for creation if no ParentKeyValue is supplied and if\n                    the product is not nested inside another product element.\n                ')

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_ProductType_ID', _module_typeBindings.StepProductID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5772, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5772, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    ID of the product. Not required for creation if auto IDs are configured for the product\n                    object type. Not required for updates if a KeyValue is supplied.\n                ')

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_ProductType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5780, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5780, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, '\n                    Identifies which contexts this object is visible in. If not specified the current context is used.\n                ')

    
    # Attribute Republished uses Python identifier Republished
    __Republished = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Republished'), 'Republished', '__httpwww_stibosystems_comstep_ProductType_Republished', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Republished._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5787, 8)
    __Republished._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5787, 8)
    
    Republished = property(__Republished.value, __Republished.set, None, None)

    
    # Attribute OverridesProductID uses Python identifier OverridesProductID
    __OverridesProductID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OverridesProductID'), 'OverridesProductID', '__httpwww_stibosystems_comstep_ProductType_OverridesProductID', _module_typeBindings.StepProductID)
    __OverridesProductID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5788, 8)
    __OverridesProductID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5788, 8)
    
    OverridesProductID = property(__OverridesProductID.value, __OverridesProductID.set, None, '\n                    If the product is a product override object (UserTypeID must point to a valid product override\n                    object type) then this attribute identifies the ID of the product to be overridden.\n                ')

    
    # Attribute UserTypeID uses Python identifier UserTypeID
    __UserTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserTypeID'), 'UserTypeID', '__httpwww_stibosystems_comstep_ProductType_UserTypeID', _module_typeBindings.StepObjectTypeID)
    __UserTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5796, 8)
    __UserTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5796, 8)
    
    UserTypeID = property(__UserTypeID.value, __UserTypeID.set, None, '\n                    The object type ID. Required for creation unless a DefaultUserTypeID has been specified.\n                ')

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_ProductType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5803, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5803, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_ProductType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5804, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5804, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    _ElementMap.update({
        __KeyValue.name() : __KeyValue,
        __ParentKeyValue.name() : __ParentKeyValue,
        __Name.name() : __Name,
        __STEPWorkflowStateBind.name() : __STEPWorkflowStateBind,
        __Product.name() : __Product,
        __SequenceProduct.name() : __SequenceProduct,
        __ProductReference.name() : __ProductReference,
        __DeleteSuppressedClassificationCrossReference.name() : __DeleteSuppressedClassificationCrossReference,
        __DeleteClassificationCrossReference.name() : __DeleteClassificationCrossReference,
        __SuppressedClassificationCrossReference.name() : __SuppressedClassificationCrossReference,
        __ClassificationCrossReference.name() : __ClassificationCrossReference,
        __DeleteSuppressedProductCrossReference.name() : __DeleteSuppressedProductCrossReference,
        __DeleteProductCrossReference.name() : __DeleteProductCrossReference,
        __SuppressedProductCrossReference.name() : __SuppressedProductCrossReference,
        __ProductCrossReference.name() : __ProductCrossReference,
        __DeleteSuppressedAssetCrossReference.name() : __DeleteSuppressedAssetCrossReference,
        __DeleteAssetCrossReference.name() : __DeleteAssetCrossReference,
        __SuppressedAssetCrossReference.name() : __SuppressedAssetCrossReference,
        __AssetCrossReference.name() : __AssetCrossReference,
        __DeleteSuppressedClassificationReference.name() : __DeleteSuppressedClassificationReference,
        __DeleteClassificationReference.name() : __DeleteClassificationReference,
        __SuppressedClassificationReference.name() : __SuppressedClassificationReference,
        __ClassificationReference.name() : __ClassificationReference,
        __DeleteSuppressedEntityCrossReference.name() : __DeleteSuppressedEntityCrossReference,
        __DeleteEntityCrossReference.name() : __DeleteEntityCrossReference,
        __SuppressedEntityCrossReference.name() : __SuppressedEntityCrossReference,
        __EntityCrossReference.name() : __EntityCrossReference,
        __DeleteAttributeLink.name() : __DeleteAttributeLink,
        __AttributeLink.name() : __AttributeLink,
        __DataContainerTypeLink.name() : __DataContainerTypeLink,
        __DeleteDataContainerTypeLink.name() : __DeleteDataContainerTypeLink,
        __DataContainers.name() : __DataContainers,
        __CurrentTasks.name() : __CurrentTasks,
        __Terms.name() : __Terms,
        __OverrideSubProduct.name() : __OverrideSubProduct,
        __PackagingReference.name() : __PackagingReference,
        __Tables.name() : __Tables,
        __Values.name() : __Values
    })
    _AttributeMap.update({
        __Changed.name() : __Changed,
        __SourcePos.name() : __SourcePos,
        __AnalyzerResult.name() : __AnalyzerResult,
        __ParentID.name() : __ParentID,
        __ID.name() : __ID,
        __QualifierID.name() : __QualifierID,
        __Republished.name() : __Republished,
        __OverridesProductID.name() : __OverridesProductID,
        __UserTypeID.name() : __UserTypeID,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced
    })
_module_typeBindings.ProductType = ProductType
Namespace.addCategoryObject('typeBinding', 'ProductType', ProductType)


# Complex type {http://www.stibosystems.com/step}ProductBasketLinkType with content type ELEMENT_ONLY
class ProductBasketLinkType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}ProductBasketLinkType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProductBasketLinkType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5806, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_ProductBasketLinkType_httpwww_stibosystems_comstepKeyValue', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5808, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Attribute ProductID uses Python identifier ProductID
    __ProductID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ProductID'), 'ProductID', '__httpwww_stibosystems_comstep_ProductBasketLinkType_ProductID', _module_typeBindings.StepProductID, required=True)
    __ProductID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5810, 8)
    __ProductID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5810, 8)
    
    ProductID = property(__ProductID.value, __ProductID.set, None, None)

    _ElementMap.update({
        __KeyValue.name() : __KeyValue
    })
    _AttributeMap.update({
        __ProductID.name() : __ProductID
    })
_module_typeBindings.ProductBasketLinkType = ProductBasketLinkType
Namespace.addCategoryObject('typeBinding', 'ProductBasketLinkType', ProductBasketLinkType)


# Complex type {http://www.stibosystems.com/step}ProductCrossReferenceType with content type ELEMENT_ONLY
class ProductCrossReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """
                A reference to a product.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProductCrossReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5812, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_ProductCrossReferenceType_httpwww_stibosystems_comstepKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5819, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_ProductCrossReferenceType_httpwww_stibosystems_comstepMetaData', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5821, 16), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Product uses Python identifier Product
    __Product = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Product'), 'Product', '__httpwww_stibosystems_comstep_ProductCrossReferenceType_httpwww_stibosystems_comstepProduct', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5822, 16), )

    
    Product = property(__Product.value, __Product.set, None, '\n                            Embedded reference target. Has no effect during import.\n                        ')

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_ProductCrossReferenceType_Type', _module_typeBindings.StepLinkTypeID, required=True)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5831, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5831, 8)
    
    Type = property(__Type.value, __Type.set, None, '\n                    ID of the reference type.\n                ')

    
    # Attribute ProductID uses Python identifier ProductID
    __ProductID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ProductID'), 'ProductID', '__httpwww_stibosystems_comstep_ProductCrossReferenceType_ProductID', _module_typeBindings.StepProductID)
    __ProductID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5838, 8)
    __ProductID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5838, 8)
    
    ProductID = property(__ProductID.value, __ProductID.set, None, '\n                    ID of the referenced product. Required if a KeyValue is not supplied.\n                ')

    
    # Attribute MountLocation uses Python identifier MountLocation
    __MountLocation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MountLocation'), 'MountLocation', '__httpwww_stibosystems_comstep_ProductCrossReferenceType_MountLocation', pyxb.binding.datatypes.string)
    __MountLocation._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5845, 8)
    __MountLocation._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5845, 8)
    
    MountLocation = property(__MountLocation.value, __MountLocation.set, None, '\n                    DTP mount location.\n                ')

    
    # Attribute AnalyzerResult uses Python identifier AnalyzerResult
    __AnalyzerResult = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AnalyzerResult'), 'AnalyzerResult', '__httpwww_stibosystems_comstep_ProductCrossReferenceType_AnalyzerResult', pyxb.binding.datatypes.string)
    __AnalyzerResult._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5852, 8)
    __AnalyzerResult._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5852, 8)
    
    AnalyzerResult = property(__AnalyzerResult.value, __AnalyzerResult.set, None, '\n                    @Deprecated, to be removed in a future release.\n\n                    WebPublisher specific attribute. Identifies whether the referenced\n                    product is present on the website. Possible values: included, excluded.\n                ')

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_ProductCrossReferenceType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5862, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5862, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_ProductCrossReferenceType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5864, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5864, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, '\n                    Identifies which contexts this reference is visible in. If not specified the current context is\n                    used.\n                ')

    
    # Attribute Inherited uses Python identifier Inherited
    __Inherited = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Inherited'), 'Inherited', '__httpwww_stibosystems_comstep_ProductCrossReferenceType_Inherited', pyxb.binding.datatypes.integer)
    __Inherited._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5872, 8)
    __Inherited._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5872, 8)
    
    Inherited = property(__Inherited.value, __Inherited.set, None, '\n                    Only relevant during export when nested inside a partial hierarchy. If present during import,\n                    the link is simply ignored. If this attribute is present then link is inherited. Will not\n                    be exported for local links (thus only numbers 1 and upward will be exported - 1 indicating\n                    inherited from immediate parent).\n                    The integer value of this attribute indicates how far up this link is inherited from.\n                    In cross context exports it might be relevant to have this number to find the most relevant link\n                    for a given context.\n                    NOTE: will only inherit inside hierarchy of equal node types - ie. will not inherit from\n                    classification to product hierarchy.\n                ')

    
    # Attribute stbEmbed uses Python identifier stbEmbed
    __stbEmbed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'stbEmbed'), 'stbEmbed', '__httpwww_stibosystems_comstep_ProductCrossReferenceType_stbEmbed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __stbEmbed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5887, 8)
    __stbEmbed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5887, 8)
    
    stbEmbed = property(__stbEmbed.value, __stbEmbed.set, None, None)

    
    # Attribute stbEmbedded uses Python identifier stbEmbedded
    __stbEmbedded = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'stbEmbedded'), 'stbEmbedded', '__httpwww_stibosystems_comstep_ProductCrossReferenceType_stbEmbedded', pyxb.binding.datatypes.boolean, unicode_default='false')
    __stbEmbedded._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5888, 8)
    __stbEmbedded._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5888, 8)
    
    stbEmbedded = property(__stbEmbedded.value, __stbEmbedded.set, None, None)

    _ElementMap.update({
        __KeyValue.name() : __KeyValue,
        __MetaData.name() : __MetaData,
        __Product.name() : __Product
    })
    _AttributeMap.update({
        __Type.name() : __Type,
        __ProductID.name() : __ProductID,
        __MountLocation.name() : __MountLocation,
        __AnalyzerResult.name() : __AnalyzerResult,
        __Changed.name() : __Changed,
        __QualifierID.name() : __QualifierID,
        __Inherited.name() : __Inherited,
        __stbEmbed.name() : __stbEmbed,
        __stbEmbedded.name() : __stbEmbedded
    })
_module_typeBindings.ProductCrossReferenceType = ProductCrossReferenceType
Namespace.addCategoryObject('typeBinding', 'ProductCrossReferenceType', ProductCrossReferenceType)


# Complex type {http://www.stibosystems.com/step}ProductCrossReferenceTypeType with content type ELEMENT_ONLY
class ProductCrossReferenceTypeType (pyxb.binding.basis.complexTypeDefinition):
    """
                The definition of a reference type for which references point to products.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProductCrossReferenceTypeType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5890, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_ProductCrossReferenceTypeType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5897, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_ProductCrossReferenceTypeType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5898, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeLink uses Python identifier AttributeLink
    __AttributeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink'), 'AttributeLink', '__httpwww_stibosystems_comstep_ProductCrossReferenceTypeType_httpwww_stibosystems_comstepAttributeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5899, 12), )

    
    AttributeLink = property(__AttributeLink.value, __AttributeLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DimensionLink uses Python identifier DimensionLink
    __DimensionLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink'), 'DimensionLink', '__httpwww_stibosystems_comstep_ProductCrossReferenceTypeType_httpwww_stibosystems_comstepDimensionLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5900, 12), )

    
    DimensionLink = property(__DimensionLink.value, __DimensionLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeGroupLink uses Python identifier AttributeGroupLink
    __AttributeGroupLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), 'AttributeGroupLink', '__httpwww_stibosystems_comstep_ProductCrossReferenceTypeType_httpwww_stibosystems_comstepAttributeGroupLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5901, 12), )

    
    AttributeGroupLink = property(__AttributeGroupLink.value, __AttributeGroupLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}UserTypeLink uses Python identifier UserTypeLink
    __UserTypeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink'), 'UserTypeLink', '__httpwww_stibosystems_comstep_ProductCrossReferenceTypeType_httpwww_stibosystems_comstepUserTypeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5902, 12), )

    
    UserTypeLink = property(__UserTypeLink.value, __UserTypeLink.set, None, '\n                        Link to a valid source type. Notice that this source can be a DataContainerType.\n                    ')

    
    # Element {http://www.stibosystems.com/step}TargetUserTypeLink uses Python identifier TargetUserTypeLink
    __TargetUserTypeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TargetUserTypeLink'), 'TargetUserTypeLink', '__httpwww_stibosystems_comstep_ProductCrossReferenceTypeType_httpwww_stibosystems_comstepTargetUserTypeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5909, 12), )

    
    TargetUserTypeLink = property(__TargetUserTypeLink.value, __TargetUserTypeLink.set, None, None)

    
    # Attribute Inherited uses Python identifier Inherited
    __Inherited = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Inherited'), 'Inherited', '__httpwww_stibosystems_comstep_ProductCrossReferenceTypeType_Inherited', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Inherited._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5911, 8)
    __Inherited._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5911, 8)
    
    Inherited = property(__Inherited.value, __Inherited.set, None, '\n                    Specifies whether or not references of this type are hierarchically inherited. Cannot be "false" if\n                    the value for the Accumulated attribute is "true".\n                ')

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_ProductCrossReferenceTypeType_ID', _module_typeBindings.StepLinkTypeID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5919, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5919, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute Revised uses Python identifier Revised
    __Revised = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Revised'), 'Revised', '__httpwww_stibosystems_comstep_ProductCrossReferenceTypeType_Revised', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Revised._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5920, 8)
    __Revised._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5920, 8)
    
    Revised = property(__Revised.value, __Revised.set, None, '\n                    Specifies whether references of this type are under revision control or not (externally maintained).\n                    During import, for existing reference types for which references exist, the value can be changed\n                    from "false" to "true" if the import runs in single update mode but cannot be changed from "true"\n                    to "false".\n                ')

    
    # Attribute Completeness uses Python identifier Completeness
    __Completeness = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Completeness'), 'Completeness', '__httpwww_stibosystems_comstep_ProductCrossReferenceTypeType_Completeness', pyxb.binding.datatypes.string)
    __Completeness._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5930, 8)
    __Completeness._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5930, 8)
    
    Completeness = property(__Completeness.value, __Completeness.set, None, '\n                    @Deprecated, not used anymore after the introduction of Completeness Metrics in STEP 7.4 (see\n                    documentation on Completeness Metrics and migration from old pre-7.4 completeness functionality).\n                ')

    
    # Attribute MultiValued uses Python identifier MultiValued
    __MultiValued = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MultiValued'), 'MultiValued', '__httpwww_stibosystems_comstep_ProductCrossReferenceTypeType_MultiValued', pyxb.binding.datatypes.boolean, unicode_default='true')
    __MultiValued._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5938, 8)
    __MultiValued._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5938, 8)
    
    MultiValued = property(__MultiValued.value, __MultiValued.set, None, '\n                    Whether the type allows for multiple references from the same source or not. Can for existing\n                    reference types be changed from "false" to "true". Changing from "true" to "false" requires that no\n                    present source has multiple references.\n                ')

    
    # Attribute Mandatory uses Python identifier Mandatory
    __Mandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Mandatory'), 'Mandatory', '__httpwww_stibosystems_comstep_ProductCrossReferenceTypeType_Mandatory', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Mandatory._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5947, 8)
    __Mandatory._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5947, 8)
    
    Mandatory = property(__Mandatory.value, __Mandatory.set, None, '\n                    Specifies whether or not this reference type is mandatory for approval.\n                ')

    
    # Attribute Accumulated uses Python identifier Accumulated
    __Accumulated = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Accumulated'), 'Accumulated', '__httpwww_stibosystems_comstep_ProductCrossReferenceTypeType_Accumulated', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Accumulated._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5954, 8)
    __Accumulated._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5954, 8)
    
    Accumulated = property(__Accumulated.value, __Accumulated.set, None, '\n                    Specifies whether or not reference inheritance should be accumulated. Can only be "true" if\n                    the value for the MultiValued attribute is "true".\n                ')

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_ProductCrossReferenceTypeType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5962, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5962, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_ProductCrossReferenceTypeType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5963, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5963, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_ProductCrossReferenceTypeType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5964, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5964, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __AttributeLink.name() : __AttributeLink,
        __DimensionLink.name() : __DimensionLink,
        __AttributeGroupLink.name() : __AttributeGroupLink,
        __UserTypeLink.name() : __UserTypeLink,
        __TargetUserTypeLink.name() : __TargetUserTypeLink
    })
    _AttributeMap.update({
        __Inherited.name() : __Inherited,
        __ID.name() : __ID,
        __Revised.name() : __Revised,
        __Completeness.name() : __Completeness,
        __MultiValued.name() : __MultiValued,
        __Mandatory.name() : __Mandatory,
        __Accumulated.name() : __Accumulated,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed
    })
_module_typeBindings.ProductCrossReferenceTypeType = ProductCrossReferenceTypeType
Namespace.addCategoryObject('typeBinding', 'ProductCrossReferenceTypeType', ProductCrossReferenceTypeType)


# Complex type {http://www.stibosystems.com/step}ProductElementType with content type ELEMENT_ONLY
class ProductElementType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}ProductElementType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProductElementType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5966, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_ProductElementType_httpwww_stibosystems_comstepKeyValue', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5968, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Element {http://www.stibosystems.com/step}TemplateLayout uses Python identifier TemplateLayout
    __TemplateLayout = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TemplateLayout'), 'TemplateLayout', '__httpwww_stibosystems_comstep_ProductElementType_httpwww_stibosystems_comstepTemplateLayout', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5969, 12), )

    
    TemplateLayout = property(__TemplateLayout.value, __TemplateLayout.set, None, None)

    
    # Element {http://www.stibosystems.com/step}PickupLayout uses Python identifier PickupLayout
    __PickupLayout = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PickupLayout'), 'PickupLayout', '__httpwww_stibosystems_comstep_ProductElementType_httpwww_stibosystems_comstepPickupLayout', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5970, 12), )

    
    PickupLayout = property(__PickupLayout.value, __PickupLayout.set, None, None)

    
    # Attribute ProductID uses Python identifier ProductID
    __ProductID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ProductID'), 'ProductID', '__httpwww_stibosystems_comstep_ProductElementType_ProductID', _module_typeBindings.StepProductID, required=True)
    __ProductID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5972, 8)
    __ProductID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5972, 8)
    
    ProductID = property(__ProductID.value, __ProductID.set, None, None)

    _ElementMap.update({
        __KeyValue.name() : __KeyValue,
        __TemplateLayout.name() : __TemplateLayout,
        __PickupLayout.name() : __PickupLayout
    })
    _AttributeMap.update({
        __ProductID.name() : __ProductID
    })
_module_typeBindings.ProductElementType = ProductElementType
Namespace.addCategoryObject('typeBinding', 'ProductElementType', ProductElementType)


# Complex type {http://www.stibosystems.com/step}ProductOriginType with content type EMPTY
class ProductOriginType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}ProductOriginType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProductOriginType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5978, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_ProductOriginType_ID', pyxb.binding.datatypes.string)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5979, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5979, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute AttributeID uses Python identifier AttributeID
    __AttributeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AttributeID'), 'AttributeID', '__httpwww_stibosystems_comstep_ProductOriginType_AttributeID', _module_typeBindings.StepAttributeID)
    __AttributeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5980, 8)
    __AttributeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5980, 8)
    
    AttributeID = property(__AttributeID.value, __AttributeID.set, None, None)

    
    # Attribute Pull uses Python identifier Pull
    __Pull = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Pull'), 'Pull', '__httpwww_stibosystems_comstep_ProductOriginType_Pull', pyxb.binding.datatypes.string)
    __Pull._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5981, 8)
    __Pull._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5981, 8)
    
    Pull = property(__Pull.value, __Pull.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __AttributeID.name() : __AttributeID,
        __Pull.name() : __Pull
    })
_module_typeBindings.ProductOriginType = ProductOriginType
Namespace.addCategoryObject('typeBinding', 'ProductOriginType', ProductOriginType)


# Complex type {http://www.stibosystems.com/step}ProductReferenceType with content type ELEMENT_ONLY
class ProductReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """
                A classification product link owned by the classification side. Notice that these links can also be
                expressed in Product elements.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProductReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5983, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_ProductReferenceType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5991, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_ProductReferenceType_Type', _module_typeBindings.StepLinkTypeID, required=True)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5993, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5993, 8)
    
    Type = property(__Type.value, __Type.set, None, None)

    
    # Attribute ProductID uses Python identifier ProductID
    __ProductID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ProductID'), 'ProductID', '__httpwww_stibosystems_comstep_ProductReferenceType_ProductID', _module_typeBindings.StepProductID, required=True)
    __ProductID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5994, 8)
    __ProductID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5994, 8)
    
    ProductID = property(__ProductID.value, __ProductID.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_ProductReferenceType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5995, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5995, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_ProductReferenceType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5996, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5996, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __MetaData.name() : __MetaData
    })
    _AttributeMap.update({
        __Type.name() : __Type,
        __ProductID.name() : __ProductID,
        __QualifierID.name() : __QualifierID,
        __Changed.name() : __Changed
    })
_module_typeBindings.ProductReferenceType = ProductReferenceType
Namespace.addCategoryObject('typeBinding', 'ProductReferenceType', ProductReferenceType)


# Complex type {http://www.stibosystems.com/step}ProductsType with content type ELEMENT_ONLY
class ProductsType (pyxb.binding.basis.complexTypeDefinition):
    """
                Container element for products.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProductsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5998, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Product uses Python identifier Product
    __Product = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Product'), 'Product', '__httpwww_stibosystems_comstep_ProductsType_httpwww_stibosystems_comstepProduct', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6005, 12), )

    
    Product = property(__Product.value, __Product.set, None, None)

    
    # Attribute RejectNewProducts uses Python identifier RejectNewProducts
    __RejectNewProducts = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'RejectNewProducts'), 'RejectNewProducts', '__httpwww_stibosystems_comstep_ProductsType_RejectNewProducts', pyxb.binding.datatypes.boolean, unicode_default='false')
    __RejectNewProducts._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6007, 8)
    __RejectNewProducts._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6007, 8)
    
    RejectNewProducts = property(__RejectNewProducts.value, __RejectNewProducts.set, None, '\n                    Instruction that can be used during import to prevent the creation of new products.\n                ')

    
    # Attribute DefaultParentID uses Python identifier DefaultParentID
    __DefaultParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DefaultParentID'), 'DefaultParentID', '__httpwww_stibosystems_comstep_ProductsType_DefaultParentID', _module_typeBindings.StepProductID)
    __DefaultParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6014, 8)
    __DefaultParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6014, 8)
    
    DefaultParentID = property(__DefaultParentID.value, __DefaultParentID.set, None, '\n                    Import instruction. The default parent product for new products for which no parent information is\n                    supplied.\n                ')

    
    # Attribute DefaultUserTypeID uses Python identifier DefaultUserTypeID
    __DefaultUserTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DefaultUserTypeID'), 'DefaultUserTypeID', '__httpwww_stibosystems_comstep_ProductsType_DefaultUserTypeID', _module_typeBindings.StepObjectTypeID)
    __DefaultUserTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6022, 8)
    __DefaultUserTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6022, 8)
    
    DefaultUserTypeID = property(__DefaultUserTypeID.value, __DefaultUserTypeID.set, None, '\n                    Import instruction. The default object type for new products for which no object type is supplied.\n                ')

    _ElementMap.update({
        __Product.name() : __Product
    })
    _AttributeMap.update({
        __RejectNewProducts.name() : __RejectNewProducts,
        __DefaultParentID.name() : __DefaultParentID,
        __DefaultUserTypeID.name() : __DefaultUserTypeID
    })
_module_typeBindings.ProductsType = ProductsType
Namespace.addCategoryObject('typeBinding', 'ProductsType', ProductsType)


# Complex type {http://www.stibosystems.com/step}PublicationGroupType with content type ELEMENT_ONLY
class PublicationGroupType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}PublicationGroupType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PublicationGroupType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6038, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_PublicationGroupType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6040, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_PublicationGroupType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6041, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}PublicationGroup uses Python identifier PublicationGroup
    __PublicationGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PublicationGroup'), 'PublicationGroup', '__httpwww_stibosystems_comstep_PublicationGroupType_httpwww_stibosystems_comstepPublicationGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6042, 12), )

    
    PublicationGroup = property(__PublicationGroup.value, __PublicationGroup.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Publication uses Python identifier Publication
    __Publication = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Publication'), 'Publication', '__httpwww_stibosystems_comstep_PublicationGroupType_httpwww_stibosystems_comstepPublication', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6043, 12), )

    
    Publication = property(__Publication.value, __Publication.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_PublicationGroupType_ID', _module_typeBindings.StepID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6045, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6045, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute UserTypeID uses Python identifier UserTypeID
    __UserTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserTypeID'), 'UserTypeID', '__httpwww_stibosystems_comstep_PublicationGroupType_UserTypeID', _module_typeBindings.StepObjectTypeID)
    __UserTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6046, 8)
    __UserTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6046, 8)
    
    UserTypeID = property(__UserTypeID.value, __UserTypeID.set, None, None)

    
    # Attribute ParentID uses Python identifier ParentID
    __ParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ParentID'), 'ParentID', '__httpwww_stibosystems_comstep_PublicationGroupType_ParentID', _module_typeBindings.StepID)
    __ParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6047, 8)
    __ParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6047, 8)
    
    ParentID = property(__ParentID.value, __ParentID.set, None, None)

    
    # Attribute UnitID uses Python identifier UnitID
    __UnitID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UnitID'), 'UnitID', '__httpwww_stibosystems_comstep_PublicationGroupType_UnitID', _module_typeBindings.StepUnitID)
    __UnitID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6048, 8)
    __UnitID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6048, 8)
    
    UnitID = property(__UnitID.value, __UnitID.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __PublicationGroup.name() : __PublicationGroup,
        __Publication.name() : __Publication
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __UserTypeID.name() : __UserTypeID,
        __ParentID.name() : __ParentID,
        __UnitID.name() : __UnitID
    })
_module_typeBindings.PublicationGroupType = PublicationGroupType
Namespace.addCategoryObject('typeBinding', 'PublicationGroupType', PublicationGroupType)


# Complex type {http://www.stibosystems.com/step}PublicationSectionType with content type ELEMENT_ONLY
class PublicationSectionType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}PublicationSectionType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PublicationSectionType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6062, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_PublicationSectionType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6064, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_PublicationSectionType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6065, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}PaginationRules uses Python identifier PaginationRules
    __PaginationRules = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PaginationRules'), 'PaginationRules', '__httpwww_stibosystems_comstep_PublicationSectionType_httpwww_stibosystems_comstepPaginationRules', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6066, 12), )

    
    PaginationRules = property(__PaginationRules.value, __PaginationRules.set, None, None)

    
    # Element {http://www.stibosystems.com/step}PublicationSection uses Python identifier PublicationSection
    __PublicationSection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PublicationSection'), 'PublicationSection', '__httpwww_stibosystems_comstep_PublicationSectionType_httpwww_stibosystems_comstepPublicationSection', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6067, 12), )

    
    PublicationSection = property(__PublicationSection.value, __PublicationSection.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Basket uses Python identifier Basket
    __Basket = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Basket'), 'Basket', '__httpwww_stibosystems_comstep_PublicationSectionType_httpwww_stibosystems_comstepBasket', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6068, 12), )

    
    Basket = property(__Basket.value, __Basket.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AutoPageProductLink uses Python identifier AutoPageProductLink
    __AutoPageProductLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AutoPageProductLink'), 'AutoPageProductLink', '__httpwww_stibosystems_comstep_PublicationSectionType_httpwww_stibosystems_comstepAutoPageProductLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6070, 16), )

    
    AutoPageProductLink = property(__AutoPageProductLink.value, __AutoPageProductLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AutoPageAssetLink uses Python identifier AutoPageAssetLink
    __AutoPageAssetLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AutoPageAssetLink'), 'AutoPageAssetLink', '__httpwww_stibosystems_comstep_PublicationSectionType_httpwww_stibosystems_comstepAutoPageAssetLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6072, 16), )

    
    AutoPageAssetLink = property(__AutoPageAssetLink.value, __AutoPageAssetLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AutoPageClassificationLink uses Python identifier AutoPageClassificationLink
    __AutoPageClassificationLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AutoPageClassificationLink'), 'AutoPageClassificationLink', '__httpwww_stibosystems_comstep_PublicationSectionType_httpwww_stibosystems_comstepAutoPageClassificationLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6073, 16), )

    
    AutoPageClassificationLink = property(__AutoPageClassificationLink.value, __AutoPageClassificationLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}PlannedPage uses Python identifier PlannedPage
    __PlannedPage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PlannedPage'), 'PlannedPage', '__httpwww_stibosystems_comstep_PublicationSectionType_httpwww_stibosystems_comstepPlannedPage', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6076, 12), )

    
    PlannedPage = property(__PlannedPage.value, __PlannedPage.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_PublicationSectionType_ID', _module_typeBindings.StepID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6078, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6078, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute UserTypeID uses Python identifier UserTypeID
    __UserTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserTypeID'), 'UserTypeID', '__httpwww_stibosystems_comstep_PublicationSectionType_UserTypeID', _module_typeBindings.StepObjectTypeID, required=True)
    __UserTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6079, 8)
    __UserTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6079, 8)
    
    UserTypeID = property(__UserTypeID.value, __UserTypeID.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_PublicationSectionType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6080, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6080, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, None)

    
    # Attribute ParentID uses Python identifier ParentID
    __ParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ParentID'), 'ParentID', '__httpwww_stibosystems_comstep_PublicationSectionType_ParentID', _module_typeBindings.StepID)
    __ParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6081, 8)
    __ParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6081, 8)
    
    ParentID = property(__ParentID.value, __ParentID.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __PaginationRules.name() : __PaginationRules,
        __PublicationSection.name() : __PublicationSection,
        __Basket.name() : __Basket,
        __AutoPageProductLink.name() : __AutoPageProductLink,
        __AutoPageAssetLink.name() : __AutoPageAssetLink,
        __AutoPageClassificationLink.name() : __AutoPageClassificationLink,
        __PlannedPage.name() : __PlannedPage
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __UserTypeID.name() : __UserTypeID,
        __QualifierID.name() : __QualifierID,
        __ParentID.name() : __ParentID
    })
_module_typeBindings.PublicationSectionType = PublicationSectionType
Namespace.addCategoryObject('typeBinding', 'PublicationSectionType', PublicationSectionType)


# Complex type {http://www.stibosystems.com/step}PublicationType with content type ELEMENT_ONLY
class PublicationType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}PublicationType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PublicationType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6083, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_PublicationType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6085, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_PublicationType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6086, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Version uses Python identifier Version
    __Version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Version'), 'Version', '__httpwww_stibosystems_comstep_PublicationType_httpwww_stibosystems_comstepVersion', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6087, 12), )

    
    Version = property(__Version.value, __Version.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Basket uses Python identifier Basket
    __Basket = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Basket'), 'Basket', '__httpwww_stibosystems_comstep_PublicationType_httpwww_stibosystems_comstepBasket', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6088, 12), )

    
    Basket = property(__Basket.value, __Basket.set, None, None)

    
    # Element {http://www.stibosystems.com/step}PaginationRules uses Python identifier PaginationRules
    __PaginationRules = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PaginationRules'), 'PaginationRules', '__httpwww_stibosystems_comstep_PublicationType_httpwww_stibosystems_comstepPaginationRules', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6089, 12), )

    
    PaginationRules = property(__PaginationRules.value, __PaginationRules.set, None, None)

    
    # Element {http://www.stibosystems.com/step}PageTemplateLink uses Python identifier PageTemplateLink
    __PageTemplateLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PageTemplateLink'), 'PageTemplateLink', '__httpwww_stibosystems_comstep_PublicationType_httpwww_stibosystems_comstepPageTemplateLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6090, 12), )

    
    PageTemplateLink = property(__PageTemplateLink.value, __PageTemplateLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ProductTemplateLink uses Python identifier ProductTemplateLink
    __ProductTemplateLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ProductTemplateLink'), 'ProductTemplateLink', '__httpwww_stibosystems_comstep_PublicationType_httpwww_stibosystems_comstepProductTemplateLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6091, 12), )

    
    ProductTemplateLink = property(__ProductTemplateLink.value, __ProductTemplateLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}PublicationSection uses Python identifier PublicationSection
    __PublicationSection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PublicationSection'), 'PublicationSection', '__httpwww_stibosystems_comstep_PublicationType_httpwww_stibosystems_comstepPublicationSection', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6092, 12), )

    
    PublicationSection = property(__PublicationSection.value, __PublicationSection.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SuppressedEntityCrossReference uses Python identifier SuppressedEntityCrossReference
    __SuppressedEntityCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SuppressedEntityCrossReference'), 'SuppressedEntityCrossReference', '__httpwww_stibosystems_comstep_PublicationType_httpwww_stibosystems_comstepSuppressedEntityCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6093, 12), )

    
    SuppressedEntityCrossReference = property(__SuppressedEntityCrossReference.value, __SuppressedEntityCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}EntityCrossReference uses Python identifier EntityCrossReference
    __EntityCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EntityCrossReference'), 'EntityCrossReference', '__httpwww_stibosystems_comstep_PublicationType_httpwww_stibosystems_comstepEntityCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6095, 12), )

    
    EntityCrossReference = property(__EntityCrossReference.value, __EntityCrossReference.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_PublicationType_ID', _module_typeBindings.StepID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6097, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6097, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute UserTypeID uses Python identifier UserTypeID
    __UserTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserTypeID'), 'UserTypeID', '__httpwww_stibosystems_comstep_PublicationType_UserTypeID', _module_typeBindings.StepObjectTypeID)
    __UserTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6098, 8)
    __UserTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6098, 8)
    
    UserTypeID = property(__UserTypeID.value, __UserTypeID.set, None, None)

    
    # Attribute MasterDocumentID uses Python identifier MasterDocumentID
    __MasterDocumentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MasterDocumentID'), 'MasterDocumentID', '__httpwww_stibosystems_comstep_PublicationType_MasterDocumentID', _module_typeBindings.StepID, required=True)
    __MasterDocumentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6099, 8)
    __MasterDocumentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6099, 8)
    
    MasterDocumentID = property(__MasterDocumentID.value, __MasterDocumentID.set, None, None)

    
    # Attribute PagesPerSpread uses Python identifier PagesPerSpread
    __PagesPerSpread = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PagesPerSpread'), 'PagesPerSpread', '__httpwww_stibosystems_comstep_PublicationType_PagesPerSpread', pyxb.binding.datatypes.string)
    __PagesPerSpread._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6100, 8)
    __PagesPerSpread._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6100, 8)
    
    PagesPerSpread = property(__PagesPerSpread.value, __PagesPerSpread.set, None, None)

    
    # Attribute DefaultPageTemplateID uses Python identifier DefaultPageTemplateID
    __DefaultPageTemplateID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DefaultPageTemplateID'), 'DefaultPageTemplateID', '__httpwww_stibosystems_comstep_PublicationType_DefaultPageTemplateID', _module_typeBindings.StepID)
    __DefaultPageTemplateID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6101, 8)
    __DefaultPageTemplateID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6101, 8)
    
    DefaultPageTemplateID = property(__DefaultPageTemplateID.value, __DefaultPageTemplateID.set, None, None)

    
    # Attribute DTPType uses Python identifier DTPType
    __DTPType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DTPType'), 'DTPType', '__httpwww_stibosystems_comstep_PublicationType_DTPType', _module_typeBindings.STD_ANON_15, required=True)
    __DTPType._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6102, 8)
    __DTPType._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6102, 8)
    
    DTPType = property(__DTPType.value, __DTPType.set, None, None)

    
    # Attribute ParentID uses Python identifier ParentID
    __ParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ParentID'), 'ParentID', '__httpwww_stibosystems_comstep_PublicationType_ParentID', _module_typeBindings.StepID)
    __ParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6110, 8)
    __ParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6110, 8)
    
    ParentID = property(__ParentID.value, __ParentID.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __Version.name() : __Version,
        __Basket.name() : __Basket,
        __PaginationRules.name() : __PaginationRules,
        __PageTemplateLink.name() : __PageTemplateLink,
        __ProductTemplateLink.name() : __ProductTemplateLink,
        __PublicationSection.name() : __PublicationSection,
        __SuppressedEntityCrossReference.name() : __SuppressedEntityCrossReference,
        __EntityCrossReference.name() : __EntityCrossReference
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __UserTypeID.name() : __UserTypeID,
        __MasterDocumentID.name() : __MasterDocumentID,
        __PagesPerSpread.name() : __PagesPerSpread,
        __DefaultPageTemplateID.name() : __DefaultPageTemplateID,
        __DTPType.name() : __DTPType,
        __ParentID.name() : __ParentID
    })
_module_typeBindings.PublicationType = PublicationType
Namespace.addCategoryObject('typeBinding', 'PublicationType', PublicationType)


# Complex type {http://www.stibosystems.com/step}QualifierType with content type ELEMENT_ONLY
class QualifierType (pyxb.binding.basis.complexTypeDefinition):
    """
                A qualifier represents a single dimension point or a number of dimension points from different
                dimensions to which data can be associated.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'QualifierType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6122, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}DimensionPointLink uses Python identifier DimensionPointLink
    __DimensionPointLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DimensionPointLink'), 'DimensionPointLink', '__httpwww_stibosystems_comstep_QualifierType_httpwww_stibosystems_comstepDimensionPointLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6130, 12), )

    
    DimensionPointLink = property(__DimensionPointLink.value, __DimensionPointLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Context uses Python identifier Context
    __Context = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Context'), 'Context', '__httpwww_stibosystems_comstep_QualifierType_httpwww_stibosystems_comstepContext', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6131, 12), )

    
    Context = property(__Context.value, __Context.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_QualifierType_ID', _module_typeBindings.StepQualifierID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6133, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6133, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    ID of the qualifier.\n                ')

    _ElementMap.update({
        __DimensionPointLink.name() : __DimensionPointLink,
        __Context.name() : __Context
    })
    _AttributeMap.update({
        __ID.name() : __ID
    })
_module_typeBindings.QualifierType = QualifierType
Namespace.addCategoryObject('typeBinding', 'QualifierType', QualifierType)


# Complex type {http://www.stibosystems.com/step}ReplaceClassificationReferenceType with content type EMPTY
class ReplaceClassificationReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """
                @Deprecated, replaced by ReplacementRules/Products/ReplaceClassificationReferences
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReplaceClassificationReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6151, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_ReplaceClassificationReferenceType_Type', _module_typeBindings.StepLinkTypeID, required=True)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6157, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6157, 8)
    
    Type = property(__Type.value, __Type.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Type.name() : __Type
    })
_module_typeBindings.ReplaceClassificationReferenceType = ReplaceClassificationReferenceType
Namespace.addCategoryObject('typeBinding', 'ReplaceClassificationReferenceType', ReplaceClassificationReferenceType)


# Complex type {http://www.stibosystems.com/step}ReplaceProductToAssetCrossReferenceType with content type EMPTY
class ReplaceProductToAssetCrossReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """
                @Deprecated, use ReplacementRules/Products/ReplaceCrossReferences instead.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReplaceProductToAssetCrossReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6650, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ReferenceTypeID uses Python identifier ReferenceTypeID
    __ReferenceTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ReferenceTypeID'), 'ReferenceTypeID', '__httpwww_stibosystems_comstep_ReplaceProductToAssetCrossReferenceType_ReferenceTypeID', _module_typeBindings.StepLinkTypeID, required=True)
    __ReferenceTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6656, 8)
    __ReferenceTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6656, 8)
    
    ReferenceTypeID = property(__ReferenceTypeID.value, __ReferenceTypeID.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ReferenceTypeID.name() : __ReferenceTypeID
    })
_module_typeBindings.ReplaceProductToAssetCrossReferenceType = ReplaceProductToAssetCrossReferenceType
Namespace.addCategoryObject('typeBinding', 'ReplaceProductToAssetCrossReferenceType', ReplaceProductToAssetCrossReferenceType)


# Complex type {http://www.stibosystems.com/step}ReplaceCrossReferenceType with content type EMPTY
class ReplaceCrossReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """
                @Deprecated, use ReplacementRules/Products/ReplaceCrossReferences,
                ReplacementRules/Classifications/ReplaceCrossReferences,
                ReplacementRules/Entities/ReplaceCrossReferences or ReplacementRules/Assets/ReplaceCrossReferences
                instead.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReplaceCrossReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6658, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ReferenceTypeID uses Python identifier ReferenceTypeID
    __ReferenceTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ReferenceTypeID'), 'ReferenceTypeID', '__httpwww_stibosystems_comstep_ReplaceCrossReferenceType_ReferenceTypeID', _module_typeBindings.StepLinkTypeID, required=True)
    __ReferenceTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6667, 8)
    __ReferenceTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6667, 8)
    
    ReferenceTypeID = property(__ReferenceTypeID.value, __ReferenceTypeID.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ReferenceTypeID.name() : __ReferenceTypeID
    })
_module_typeBindings.ReplaceCrossReferenceType = ReplaceCrossReferenceType
Namespace.addCategoryObject('typeBinding', 'ReplaceCrossReferenceType', ReplaceCrossReferenceType)


# Complex type {http://www.stibosystems.com/step}ReplaceProductToProductCrossReferenceType with content type EMPTY
class ReplaceProductToProductCrossReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """
                @Deprecated, use ReplacementRules/Products/ReplaceCrossReferences instead.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReplaceProductToProductCrossReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6669, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ReferenceTypeID uses Python identifier ReferenceTypeID
    __ReferenceTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ReferenceTypeID'), 'ReferenceTypeID', '__httpwww_stibosystems_comstep_ReplaceProductToProductCrossReferenceType_ReferenceTypeID', _module_typeBindings.StepLinkTypeID, required=True)
    __ReferenceTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6675, 8)
    __ReferenceTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6675, 8)
    
    ReferenceTypeID = property(__ReferenceTypeID.value, __ReferenceTypeID.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ReferenceTypeID.name() : __ReferenceTypeID
    })
_module_typeBindings.ReplaceProductToProductCrossReferenceType = ReplaceProductToProductCrossReferenceType
Namespace.addCategoryObject('typeBinding', 'ReplaceProductToProductCrossReferenceType', ReplaceProductToProductCrossReferenceType)


# Complex type {http://www.stibosystems.com/step}ReplaceProductValuesForAttributeGroupType with content type EMPTY
class ReplaceProductValuesForAttributeGroupType (pyxb.binding.basis.complexTypeDefinition):
    """
                @Deprecated, use ReplacementRules/Products/ReplaceValues instead.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReplaceProductValuesForAttributeGroupType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6677, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute AttributeGroupID uses Python identifier AttributeGroupID
    __AttributeGroupID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AttributeGroupID'), 'AttributeGroupID', '__httpwww_stibosystems_comstep_ReplaceProductValuesForAttributeGroupType_AttributeGroupID', _module_typeBindings.StepAttributeID, required=True)
    __AttributeGroupID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6683, 8)
    __AttributeGroupID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6683, 8)
    
    AttributeGroupID = property(__AttributeGroupID.value, __AttributeGroupID.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __AttributeGroupID.name() : __AttributeGroupID
    })
_module_typeBindings.ReplaceProductValuesForAttributeGroupType = ReplaceProductValuesForAttributeGroupType
Namespace.addCategoryObject('typeBinding', 'ReplaceProductValuesForAttributeGroupType', ReplaceProductValuesForAttributeGroupType)


# Complex type {http://www.stibosystems.com/step}ReplaceDataContainerTypeType with content type EMPTY
class ReplaceDataContainerTypeType (pyxb.binding.basis.complexTypeDefinition):
    """
                @Deprecated, use ReplacementRules/Entities/ReplaceDataContainers or
                ReplacementRules/Products/ReplaceDataContainers instead.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReplaceDataContainerTypeType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6685, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute DataContainerTypeID uses Python identifier DataContainerTypeID
    __DataContainerTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DataContainerTypeID'), 'DataContainerTypeID', '__httpwww_stibosystems_comstep_ReplaceDataContainerTypeType_DataContainerTypeID', _module_typeBindings.StepDataContainerTypeID, required=True)
    __DataContainerTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6692, 8)
    __DataContainerTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6692, 8)
    
    DataContainerTypeID = property(__DataContainerTypeID.value, __DataContainerTypeID.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __DataContainerTypeID.name() : __DataContainerTypeID
    })
_module_typeBindings.ReplaceDataContainerTypeType = ReplaceDataContainerTypeType
Namespace.addCategoryObject('typeBinding', 'ReplaceDataContainerTypeType', ReplaceDataContainerTypeType)


# Complex type {http://www.stibosystems.com/step}RowColumnTableGroupType with content type ELEMENT_ONLY
class RowColumnTableGroupType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}RowColumnTableGroupType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RowColumnTableGroupType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6699, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_RowColumnTableGroupType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6701, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}RowColumnTableGroup uses Python identifier RowColumnTableGroup
    __RowColumnTableGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RowColumnTableGroup'), 'RowColumnTableGroup', '__httpwww_stibosystems_comstep_RowColumnTableGroupType_httpwww_stibosystems_comstepRowColumnTableGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6702, 12), )

    
    RowColumnTableGroup = property(__RowColumnTableGroup.value, __RowColumnTableGroup.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_RowColumnTableGroupType_ID', _module_typeBindings.StepAttributeID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6704, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6704, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    Global identification of the object.\n                ')

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_RowColumnTableGroupType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6711, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6711, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_RowColumnTableGroupType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6712, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6712, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_RowColumnTableGroupType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6713, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6713, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __RowColumnTableGroup.name() : __RowColumnTableGroup
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __Referenced.name() : __Referenced,
        __Selected.name() : __Selected,
        __Changed.name() : __Changed
    })
_module_typeBindings.RowColumnTableGroupType = RowColumnTableGroupType
Namespace.addCategoryObject('typeBinding', 'RowColumnTableGroupType', RowColumnTableGroupType)


# Complex type {http://www.stibosystems.com/step}RowType with content type ELEMENT_ONLY
class RowType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}RowType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RowType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6715, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Origin uses Python identifier Origin
    __Origin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Origin'), 'Origin', '__httpwww_stibosystems_comstep_RowType_httpwww_stibosystems_comstepOrigin', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6717, 12), )

    
    Origin = property(__Origin.value, __Origin.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ProductOrigin uses Python identifier ProductOrigin
    __ProductOrigin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ProductOrigin'), 'ProductOrigin', '__httpwww_stibosystems_comstep_RowType_httpwww_stibosystems_comstepProductOrigin', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6718, 12), )

    
    ProductOrigin = property(__ProductOrigin.value, __ProductOrigin.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ClassificationOrigin uses Python identifier ClassificationOrigin
    __ClassificationOrigin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClassificationOrigin'), 'ClassificationOrigin', '__httpwww_stibosystems_comstep_RowType_httpwww_stibosystems_comstepClassificationOrigin', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6719, 12), )

    
    ClassificationOrigin = property(__ClassificationOrigin.value, __ClassificationOrigin.set, None, None)

    
    # Element {http://www.stibosystems.com/step}EntityOrigin uses Python identifier EntityOrigin
    __EntityOrigin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EntityOrigin'), 'EntityOrigin', '__httpwww_stibosystems_comstep_RowType_httpwww_stibosystems_comstepEntityOrigin', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6721, 12), )

    
    EntityOrigin = property(__EntityOrigin.value, __EntityOrigin.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AssetOrigin uses Python identifier AssetOrigin
    __AssetOrigin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssetOrigin'), 'AssetOrigin', '__httpwww_stibosystems_comstep_RowType_httpwww_stibosystems_comstepAssetOrigin', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6722, 12), )

    
    AssetOrigin = property(__AssetOrigin.value, __AssetOrigin.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeOrigin uses Python identifier AttributeOrigin
    __AttributeOrigin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeOrigin'), 'AttributeOrigin', '__httpwww_stibosystems_comstep_RowType_httpwww_stibosystems_comstepAttributeOrigin', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6723, 12), )

    
    AttributeOrigin = property(__AttributeOrigin.value, __AttributeOrigin.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Cell uses Python identifier Cell
    __Cell = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cell'), 'Cell', '__httpwww_stibosystems_comstep_RowType_httpwww_stibosystems_comstepCell', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6724, 12), )

    
    Cell = property(__Cell.value, __Cell.set, None, None)

    
    # Attribute ProcessFlag uses Python identifier ProcessFlag
    __ProcessFlag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ProcessFlag'), 'ProcessFlag', '__httpwww_stibosystems_comstep_RowType_ProcessFlag', pyxb.binding.datatypes.string)
    __ProcessFlag._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6726, 8)
    __ProcessFlag._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6726, 8)
    
    ProcessFlag = property(__ProcessFlag.value, __ProcessFlag.set, None, None)

    
    # Attribute Height uses Python identifier Height
    __Height = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Height'), 'Height', '__httpwww_stibosystems_comstep_RowType_Height', pyxb.binding.datatypes.string)
    __Height._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6727, 8)
    __Height._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6727, 8)
    
    Height = property(__Height.value, __Height.set, None, None)

    
    # Attribute RuleAbove uses Python identifier RuleAbove
    __RuleAbove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'RuleAbove'), 'RuleAbove', '__httpwww_stibosystems_comstep_RowType_RuleAbove', pyxb.binding.datatypes.string)
    __RuleAbove._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6728, 8)
    __RuleAbove._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6728, 8)
    
    RuleAbove = property(__RuleAbove.value, __RuleAbove.set, None, None)

    
    # Attribute RuleBelow uses Python identifier RuleBelow
    __RuleBelow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'RuleBelow'), 'RuleBelow', '__httpwww_stibosystems_comstep_RowType_RuleBelow', pyxb.binding.datatypes.string)
    __RuleBelow._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6729, 8)
    __RuleBelow._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6729, 8)
    
    RuleBelow = property(__RuleBelow.value, __RuleBelow.set, None, None)

    
    # Attribute BackgroundColor uses Python identifier BackgroundColor
    __BackgroundColor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'BackgroundColor'), 'BackgroundColor', '__httpwww_stibosystems_comstep_RowType_BackgroundColor', pyxb.binding.datatypes.string)
    __BackgroundColor._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6730, 8)
    __BackgroundColor._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6730, 8)
    
    BackgroundColor = property(__BackgroundColor.value, __BackgroundColor.set, None, None)

    
    # Attribute KeepWithNext uses Python identifier KeepWithNext
    __KeepWithNext = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'KeepWithNext'), 'KeepWithNext', '__httpwww_stibosystems_comstep_RowType_KeepWithNext', pyxb.binding.datatypes.string)
    __KeepWithNext._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6731, 8)
    __KeepWithNext._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6731, 8)
    
    KeepWithNext = property(__KeepWithNext.value, __KeepWithNext.set, None, None)

    
    # Attribute RowTypeID uses Python identifier RowTypeID
    __RowTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'RowTypeID'), 'RowTypeID', '__httpwww_stibosystems_comstep_RowType_RowTypeID', _module_typeBindings.StepAttributeID)
    __RowTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6732, 8)
    __RowTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6732, 8)
    
    RowTypeID = property(__RowTypeID.value, __RowTypeID.set, None, None)

    
    # Attribute CellRotation uses Python identifier CellRotation
    __CellRotation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'CellRotation'), 'CellRotation', '__httpwww_stibosystems_comstep_RowType_CellRotation', pyxb.binding.datatypes.string)
    __CellRotation._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6733, 8)
    __CellRotation._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6733, 8)
    
    CellRotation = property(__CellRotation.value, __CellRotation.set, None, None)

    
    # Attribute TextStyle uses Python identifier TextStyle
    __TextStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TextStyle'), 'TextStyle', '__httpwww_stibosystems_comstep_RowType_TextStyle', pyxb.binding.datatypes.string)
    __TextStyle._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6734, 8)
    __TextStyle._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6734, 8)
    
    TextStyle = property(__TextStyle.value, __TextStyle.set, None, None)

    
    # Attribute VerticalAlignment uses Python identifier VerticalAlignment
    __VerticalAlignment = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'VerticalAlignment'), 'VerticalAlignment', '__httpwww_stibosystems_comstep_RowType_VerticalAlignment', pyxb.binding.datatypes.string)
    __VerticalAlignment._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6735, 8)
    __VerticalAlignment._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6735, 8)
    
    VerticalAlignment = property(__VerticalAlignment.value, __VerticalAlignment.set, None, None)

    
    # Attribute CellVerticalStoryDirection uses Python identifier CellVerticalStoryDirection
    __CellVerticalStoryDirection = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'CellVerticalStoryDirection'), 'CellVerticalStoryDirection', '__httpwww_stibosystems_comstep_RowType_CellVerticalStoryDirection', pyxb.binding.datatypes.string)
    __CellVerticalStoryDirection._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6736, 8)
    __CellVerticalStoryDirection._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6736, 8)
    
    CellVerticalStoryDirection = property(__CellVerticalStoryDirection.value, __CellVerticalStoryDirection.set, None, None)

    
    # Attribute CellImageScale uses Python identifier CellImageScale
    __CellImageScale = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'CellImageScale'), 'CellImageScale', '__httpwww_stibosystems_comstep_RowType_CellImageScale', pyxb.binding.datatypes.string)
    __CellImageScale._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6737, 8)
    __CellImageScale._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6737, 8)
    
    CellImageScale = property(__CellImageScale.value, __CellImageScale.set, None, None)

    _ElementMap.update({
        __Origin.name() : __Origin,
        __ProductOrigin.name() : __ProductOrigin,
        __ClassificationOrigin.name() : __ClassificationOrigin,
        __EntityOrigin.name() : __EntityOrigin,
        __AssetOrigin.name() : __AssetOrigin,
        __AttributeOrigin.name() : __AttributeOrigin,
        __Cell.name() : __Cell
    })
    _AttributeMap.update({
        __ProcessFlag.name() : __ProcessFlag,
        __Height.name() : __Height,
        __RuleAbove.name() : __RuleAbove,
        __RuleBelow.name() : __RuleBelow,
        __BackgroundColor.name() : __BackgroundColor,
        __KeepWithNext.name() : __KeepWithNext,
        __RowTypeID.name() : __RowTypeID,
        __CellRotation.name() : __CellRotation,
        __TextStyle.name() : __TextStyle,
        __VerticalAlignment.name() : __VerticalAlignment,
        __CellVerticalStoryDirection.name() : __CellVerticalStoryDirection,
        __CellImageScale.name() : __CellImageScale
    })
_module_typeBindings.RowType = RowType
Namespace.addCategoryObject('typeBinding', 'RowType', RowType)


# Complex type {http://www.stibosystems.com/step}RowTypeType with content type ELEMENT_ONLY
class RowTypeType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}RowTypeType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RowTypeType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6739, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_RowTypeType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6741, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}TableTypeLink uses Python identifier TableTypeLink
    __TableTypeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TableTypeLink'), 'TableTypeLink', '__httpwww_stibosystems_comstep_RowTypeType_httpwww_stibosystems_comstepTableTypeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6742, 12), )

    
    TableTypeLink = property(__TableTypeLink.value, __TableTypeLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}PublicationTypeValidity uses Python identifier PublicationTypeValidity
    __PublicationTypeValidity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PublicationTypeValidity'), 'PublicationTypeValidity', '__httpwww_stibosystems_comstep_RowTypeType_httpwww_stibosystems_comstepPublicationTypeValidity', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6743, 12), )

    
    PublicationTypeValidity = property(__PublicationTypeValidity.value, __PublicationTypeValidity.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_RowTypeType_ID', _module_typeBindings.StepAttributeID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6745, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6745, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute ParentID uses Python identifier ParentID
    __ParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ParentID'), 'ParentID', '__httpwww_stibosystems_comstep_RowTypeType_ParentID', _module_typeBindings.StepAttributeID)
    __ParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6746, 8)
    __ParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6746, 8)
    
    ParentID = property(__ParentID.value, __ParentID.set, None, None)

    
    # Attribute Height uses Python identifier Height
    __Height = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Height'), 'Height', '__httpwww_stibosystems_comstep_RowTypeType_Height', pyxb.binding.datatypes.decimal)
    __Height._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6747, 8)
    __Height._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6747, 8)
    
    Height = property(__Height.value, __Height.set, None, None)

    
    # Attribute HeightUnit uses Python identifier HeightUnit
    __HeightUnit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'HeightUnit'), 'HeightUnit', '__httpwww_stibosystems_comstep_RowTypeType_HeightUnit', pyxb.binding.datatypes.string)
    __HeightUnit._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6748, 8)
    __HeightUnit._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6748, 8)
    
    HeightUnit = property(__HeightUnit.value, __HeightUnit.set, None, None)

    
    # Attribute TextStyle uses Python identifier TextStyle
    __TextStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TextStyle'), 'TextStyle', '__httpwww_stibosystems_comstep_RowTypeType_TextStyle', pyxb.binding.datatypes.string)
    __TextStyle._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6749, 8)
    __TextStyle._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6749, 8)
    
    TextStyle = property(__TextStyle.value, __TextStyle.set, None, None)

    
    # Attribute BackgroundColor uses Python identifier BackgroundColor
    __BackgroundColor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'BackgroundColor'), 'BackgroundColor', '__httpwww_stibosystems_comstep_RowTypeType_BackgroundColor', pyxb.binding.datatypes.string)
    __BackgroundColor._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6750, 8)
    __BackgroundColor._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6750, 8)
    
    BackgroundColor = property(__BackgroundColor.value, __BackgroundColor.set, None, None)

    
    # Attribute VerticalAlignment uses Python identifier VerticalAlignment
    __VerticalAlignment = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'VerticalAlignment'), 'VerticalAlignment', '__httpwww_stibosystems_comstep_RowTypeType_VerticalAlignment', pyxb.binding.datatypes.string)
    __VerticalAlignment._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6751, 8)
    __VerticalAlignment._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6751, 8)
    
    VerticalAlignment = property(__VerticalAlignment.value, __VerticalAlignment.set, None, None)

    
    # Attribute RuleAbove uses Python identifier RuleAbove
    __RuleAbove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'RuleAbove'), 'RuleAbove', '__httpwww_stibosystems_comstep_RowTypeType_RuleAbove', pyxb.binding.datatypes.string)
    __RuleAbove._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6752, 8)
    __RuleAbove._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6752, 8)
    
    RuleAbove = property(__RuleAbove.value, __RuleAbove.set, None, None)

    
    # Attribute RuleBelow uses Python identifier RuleBelow
    __RuleBelow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'RuleBelow'), 'RuleBelow', '__httpwww_stibosystems_comstep_RowTypeType_RuleBelow', pyxb.binding.datatypes.string)
    __RuleBelow._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6753, 8)
    __RuleBelow._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6753, 8)
    
    RuleBelow = property(__RuleBelow.value, __RuleBelow.set, None, None)

    
    # Attribute CellRotation uses Python identifier CellRotation
    __CellRotation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'CellRotation'), 'CellRotation', '__httpwww_stibosystems_comstep_RowTypeType_CellRotation', pyxb.binding.datatypes.string)
    __CellRotation._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6754, 8)
    __CellRotation._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6754, 8)
    
    CellRotation = property(__CellRotation.value, __CellRotation.set, None, None)

    
    # Attribute ProcessFlag uses Python identifier ProcessFlag
    __ProcessFlag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ProcessFlag'), 'ProcessFlag', '__httpwww_stibosystems_comstep_RowTypeType_ProcessFlag', pyxb.binding.datatypes.string)
    __ProcessFlag._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6755, 8)
    __ProcessFlag._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6755, 8)
    
    ProcessFlag = property(__ProcessFlag.value, __ProcessFlag.set, None, None)

    
    # Attribute CellVerticalStoryDirection uses Python identifier CellVerticalStoryDirection
    __CellVerticalStoryDirection = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'CellVerticalStoryDirection'), 'CellVerticalStoryDirection', '__httpwww_stibosystems_comstep_RowTypeType_CellVerticalStoryDirection', pyxb.binding.datatypes.string)
    __CellVerticalStoryDirection._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6756, 8)
    __CellVerticalStoryDirection._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6756, 8)
    
    CellVerticalStoryDirection = property(__CellVerticalStoryDirection.value, __CellVerticalStoryDirection.set, None, None)

    
    # Attribute CellImageScale uses Python identifier CellImageScale
    __CellImageScale = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'CellImageScale'), 'CellImageScale', '__httpwww_stibosystems_comstep_RowTypeType_CellImageScale', pyxb.binding.datatypes.string)
    __CellImageScale._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6757, 8)
    __CellImageScale._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6757, 8)
    
    CellImageScale = property(__CellImageScale.value, __CellImageScale.set, None, None)

    
    # Attribute KeepWithNext uses Python identifier KeepWithNext
    __KeepWithNext = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'KeepWithNext'), 'KeepWithNext', '__httpwww_stibosystems_comstep_RowTypeType_KeepWithNext', pyxb.binding.datatypes.boolean)
    __KeepWithNext._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6758, 8)
    __KeepWithNext._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6758, 8)
    
    KeepWithNext = property(__KeepWithNext.value, __KeepWithNext.set, None, None)

    
    # Attribute HeadingLevel uses Python identifier HeadingLevel
    __HeadingLevel = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'HeadingLevel'), 'HeadingLevel', '__httpwww_stibosystems_comstep_RowTypeType_HeadingLevel', pyxb.binding.datatypes.integer)
    __HeadingLevel._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6759, 8)
    __HeadingLevel._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6759, 8)
    
    HeadingLevel = property(__HeadingLevel.value, __HeadingLevel.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_RowTypeType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6760, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6760, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_RowTypeType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6761, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6761, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_RowTypeType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6762, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6762, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __TableTypeLink.name() : __TableTypeLink,
        __PublicationTypeValidity.name() : __PublicationTypeValidity
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __ParentID.name() : __ParentID,
        __Height.name() : __Height,
        __HeightUnit.name() : __HeightUnit,
        __TextStyle.name() : __TextStyle,
        __BackgroundColor.name() : __BackgroundColor,
        __VerticalAlignment.name() : __VerticalAlignment,
        __RuleAbove.name() : __RuleAbove,
        __RuleBelow.name() : __RuleBelow,
        __CellRotation.name() : __CellRotation,
        __ProcessFlag.name() : __ProcessFlag,
        __CellVerticalStoryDirection.name() : __CellVerticalStoryDirection,
        __CellImageScale.name() : __CellImageScale,
        __KeepWithNext.name() : __KeepWithNext,
        __HeadingLevel.name() : __HeadingLevel,
        __Referenced.name() : __Referenced,
        __Selected.name() : __Selected,
        __Changed.name() : __Changed
    })
_module_typeBindings.RowTypeType = RowTypeType
Namespace.addCategoryObject('typeBinding', 'RowTypeType', RowTypeType)


# Complex type {http://www.stibosystems.com/step}SequenceProductType with content type ELEMENT_ONLY
class SequenceProductType (pyxb.binding.basis.complexTypeDefinition):
    """
                Product sequences express the sequence of child products under manually sorted parent
                products/classifications.
                To have product sequence information exported, use the "Advanced STEPXML" format plugin and include the
                '' element nested inside the '' and/or '' element in the
                output template.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SequenceProductType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6775, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_SequenceProductType_httpwww_stibosystems_comstepKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6786, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_SequenceProductType_ID', _module_typeBindings.StepProductID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6788, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6788, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_SequenceProductType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6789, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6789, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __KeyValue.name() : __KeyValue
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __Changed.name() : __Changed
    })
_module_typeBindings.SequenceProductType = SequenceProductType
Namespace.addCategoryObject('typeBinding', 'SequenceProductType', SequenceProductType)


# Complex type {http://www.stibosystems.com/step}SetupEntityType with content type ELEMENT_ONLY
class SetupEntityType (pyxb.binding.basis.complexTypeDefinition):
    """
                A setup entity.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SetupEntityType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6801, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}SetupGroupLink uses Python identifier SetupGroupLink
    __SetupGroupLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink'), 'SetupGroupLink', '__httpwww_stibosystems_comstep_SetupEntityType_httpwww_stibosystems_comstepSetupGroupLink', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6808, 12), )

    
    SetupGroupLink = property(__SetupGroupLink.value, __SetupGroupLink.set, None, '\n                        The setup group the setup entity is located in.\n                    ')

    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_SetupEntityType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6815, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_SetupEntityType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6816, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Configuration uses Python identifier Configuration
    __Configuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), 'Configuration', '__httpwww_stibosystems_comstep_SetupEntityType_httpwww_stibosystems_comstepConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6817, 12), )

    
    Configuration = property(__Configuration.value, __Configuration.set, None, '\n                        The configuration in encoded form.\n                    ')

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_SetupEntityType_ID', _module_typeBindings.StepSetupEntityID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6825, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6825, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute UserTypeID uses Python identifier UserTypeID
    __UserTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserTypeID'), 'UserTypeID', '__httpwww_stibosystems_comstep_SetupEntityType_UserTypeID', _module_typeBindings.StepObjectTypeID)
    __UserTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6826, 8)
    __UserTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6826, 8)
    
    UserTypeID = property(__UserTypeID.value, __UserTypeID.set, None, '\n                    Determines what kind of setup entity this is.\n                ')

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_SetupEntityType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6833, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6833, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_SetupEntityType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6834, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6834, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_SetupEntityType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6835, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6835, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __SetupGroupLink.name() : __SetupGroupLink,
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __Configuration.name() : __Configuration
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __UserTypeID.name() : __UserTypeID,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed
    })
_module_typeBindings.SetupEntityType = SetupEntityType
Namespace.addCategoryObject('typeBinding', 'SetupEntityType', SetupEntityType)


# Complex type {http://www.stibosystems.com/step}SetupGroupLinkType with content type EMPTY
class SetupGroupLinkType (pyxb.binding.basis.complexTypeDefinition):
    """
                A link to a setup group.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLinkType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6837, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute SetupGroupID uses Python identifier SetupGroupID
    __SetupGroupID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SetupGroupID'), 'SetupGroupID', '__httpwww_stibosystems_comstep_SetupGroupLinkType_SetupGroupID', _module_typeBindings.StepSetupGroupID, required=True)
    __SetupGroupID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6843, 8)
    __SetupGroupID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6843, 8)
    
    SetupGroupID = property(__SetupGroupID.value, __SetupGroupID.set, None, '\n                    ID of the setup group.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __SetupGroupID.name() : __SetupGroupID
    })
_module_typeBindings.SetupGroupLinkType = SetupGroupLinkType
Namespace.addCategoryObject('typeBinding', 'SetupGroupLinkType', SetupGroupLinkType)


# Complex type {http://www.stibosystems.com/step}SetupGroupType with content type ELEMENT_ONLY
class SetupGroupType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a setup group.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SetupGroupType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6861, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_SetupGroupType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6868, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_SetupGroupType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6869, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SetupGroup uses Python identifier SetupGroup
    __SetupGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SetupGroup'), 'SetupGroup', '__httpwww_stibosystems_comstep_SetupGroupType_httpwww_stibosystems_comstepSetupGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6870, 12), )

    
    SetupGroup = property(__SetupGroup.value, __SetupGroup.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_SetupGroupType_ID', _module_typeBindings.StepSetupGroupID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6872, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6872, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute UserTypeID uses Python identifier UserTypeID
    __UserTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserTypeID'), 'UserTypeID', '__httpwww_stibosystems_comstep_SetupGroupType_UserTypeID', _module_typeBindings.StepObjectTypeID)
    __UserTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6873, 8)
    __UserTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6873, 8)
    
    UserTypeID = property(__UserTypeID.value, __UserTypeID.set, None, '\n                    Determines what kind of setup group this is.\n                ')

    
    # Attribute ParentID uses Python identifier ParentID
    __ParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ParentID'), 'ParentID', '__httpwww_stibosystems_comstep_SetupGroupType_ParentID', _module_typeBindings.StepSetupGroupID)
    __ParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6880, 8)
    __ParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6880, 8)
    
    ParentID = property(__ParentID.value, __ParentID.set, None, '\n                    ID of the parent setup group. Required for creation if not nested inside another setup group\n                    element.\n                ')

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_SetupGroupType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6888, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6888, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_SetupGroupType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6889, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6889, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_SetupGroupType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6890, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6890, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __SetupGroup.name() : __SetupGroup
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __UserTypeID.name() : __UserTypeID,
        __ParentID.name() : __ParentID,
        __Referenced.name() : __Referenced,
        __Selected.name() : __Selected,
        __Changed.name() : __Changed
    })
_module_typeBindings.SetupGroupType = SetupGroupType
Namespace.addCategoryObject('typeBinding', 'SetupGroupType', SetupGroupType)


# Complex type {http://www.stibosystems.com/step}SingleDataContainerType with content type ELEMENT_ONLY
class SingleDataContainerType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a data container object for a single valued data container type.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SingleDataContainerType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6892, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Values uses Python identifier Values
    __Values = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Values'), 'Values', '__httpwww_stibosystems_comstep_SingleDataContainerType_httpwww_stibosystems_comstepValues', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6899, 12), )

    
    Values = property(__Values.value, __Values.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AssetCrossReference uses Python identifier AssetCrossReference
    __AssetCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssetCrossReference'), 'AssetCrossReference', '__httpwww_stibosystems_comstep_SingleDataContainerType_httpwww_stibosystems_comstepAssetCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6901, 16), )

    
    AssetCrossReference = property(__AssetCrossReference.value, __AssetCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteAssetCrossReference uses Python identifier DeleteAssetCrossReference
    __DeleteAssetCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteAssetCrossReference'), 'DeleteAssetCrossReference', '__httpwww_stibosystems_comstep_SingleDataContainerType_httpwww_stibosystems_comstepDeleteAssetCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6902, 16), )

    
    DeleteAssetCrossReference = property(__DeleteAssetCrossReference.value, __DeleteAssetCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ClassificationCrossReference uses Python identifier ClassificationCrossReference
    __ClassificationCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClassificationCrossReference'), 'ClassificationCrossReference', '__httpwww_stibosystems_comstep_SingleDataContainerType_httpwww_stibosystems_comstepClassificationCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6905, 16), )

    
    ClassificationCrossReference = property(__ClassificationCrossReference.value, __ClassificationCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteClassificationReference uses Python identifier DeleteClassificationReference
    __DeleteClassificationReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteClassificationReference'), 'DeleteClassificationReference', '__httpwww_stibosystems_comstep_SingleDataContainerType_httpwww_stibosystems_comstepDeleteClassificationReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6906, 16), )

    
    DeleteClassificationReference = property(__DeleteClassificationReference.value, __DeleteClassificationReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}EntityCrossReference uses Python identifier EntityCrossReference
    __EntityCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EntityCrossReference'), 'EntityCrossReference', '__httpwww_stibosystems_comstep_SingleDataContainerType_httpwww_stibosystems_comstepEntityCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6909, 16), )

    
    EntityCrossReference = property(__EntityCrossReference.value, __EntityCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteEntityCrossReference uses Python identifier DeleteEntityCrossReference
    __DeleteEntityCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteEntityCrossReference'), 'DeleteEntityCrossReference', '__httpwww_stibosystems_comstep_SingleDataContainerType_httpwww_stibosystems_comstepDeleteEntityCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6910, 16), )

    
    DeleteEntityCrossReference = property(__DeleteEntityCrossReference.value, __DeleteEntityCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ProductCrossReference uses Python identifier ProductCrossReference
    __ProductCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ProductCrossReference'), 'ProductCrossReference', '__httpwww_stibosystems_comstep_SingleDataContainerType_httpwww_stibosystems_comstepProductCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6913, 16), )

    
    ProductCrossReference = property(__ProductCrossReference.value, __ProductCrossReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DeleteProductCrossReference uses Python identifier DeleteProductCrossReference
    __DeleteProductCrossReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeleteProductCrossReference'), 'DeleteProductCrossReference', '__httpwww_stibosystems_comstep_SingleDataContainerType_httpwww_stibosystems_comstepDeleteProductCrossReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6914, 16), )

    
    DeleteProductCrossReference = property(__DeleteProductCrossReference.value, __DeleteProductCrossReference.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_SingleDataContainerType_ID', _module_typeBindings.StepID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6917, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6917, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    Global identification of the object. Not required during import when auto-ID is used, in which\n                    case a new SingleDataContainer object is created.\n                ')

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_SingleDataContainerType_Type', _module_typeBindings.StepDataContainerTypeID)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6925, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6925, 8)
    
    Type = property(__Type.value, __Type.set, None, '\n                    The ID of the Data container type.\n                    Not required if updating existing data container by having specified ID.\n                    Note that this attribute cannot be used for changing the type of an existing data container object,\n                    it can only be used for creation, where it is required. Specifying a different type from the one\n                    used on the SingleDataContainer with the specified ID is an error.\n                ')

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_SingleDataContainerType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6936, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6936, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    
    # Attribute Inherited uses Python identifier Inherited
    __Inherited = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Inherited'), 'Inherited', '__httpwww_stibosystems_comstep_SingleDataContainerType_Inherited', pyxb.binding.datatypes.string)
    __Inherited._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6937, 8)
    __Inherited._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6937, 8)
    
    Inherited = property(__Inherited.value, __Inherited.set, None, None)

    _ElementMap.update({
        __Values.name() : __Values,
        __AssetCrossReference.name() : __AssetCrossReference,
        __DeleteAssetCrossReference.name() : __DeleteAssetCrossReference,
        __ClassificationCrossReference.name() : __ClassificationCrossReference,
        __DeleteClassificationReference.name() : __DeleteClassificationReference,
        __EntityCrossReference.name() : __EntityCrossReference,
        __DeleteEntityCrossReference.name() : __DeleteEntityCrossReference,
        __ProductCrossReference.name() : __ProductCrossReference,
        __DeleteProductCrossReference.name() : __DeleteProductCrossReference
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __Type.name() : __Type,
        __Changed.name() : __Changed,
        __Inherited.name() : __Inherited
    })
_module_typeBindings.SingleDataContainerType = SingleDataContainerType
Namespace.addCategoryObject('typeBinding', 'SingleDataContainerType', SingleDataContainerType)


# Complex type {http://www.stibosystems.com/step}SpecialCharacterTagType with content type ELEMENT_ONLY
class SpecialCharacterTagType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a special character tag.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SpecialCharacterTagType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6971, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Formatting uses Python identifier Formatting
    __Formatting = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Formatting'), 'Formatting', '__httpwww_stibosystems_comstep_SpecialCharacterTagType_httpwww_stibosystems_comstepFormatting', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6978, 12), )

    
    Formatting = property(__Formatting.value, __Formatting.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_SpecialCharacterTagType_ID', pyxb.binding.datatypes.hexBinary, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6980, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6980, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    ID of tag - in STEP GUI presented as Code of tag. Four character hexadecimal representation of\n                    character.\n                    The character (not the hexadecimal code) must be unique across all tags.\n                ')

    
    # Attribute ParentID uses Python identifier ParentID
    __ParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ParentID'), 'ParentID', '__httpwww_stibosystems_comstep_SpecialCharacterTagType_ParentID', _module_typeBindings.StepTagGroupID)
    __ParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6989, 8)
    __ParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6989, 8)
    
    ParentID = property(__ParentID.value, __ParentID.set, None, '\n                    ID of the parent tag group. If not supplied and tag not already exists it will be created on top level.\n                ')

    _ElementMap.update({
        __Formatting.name() : __Formatting
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __ParentID.name() : __ParentID
    })
_module_typeBindings.SpecialCharacterTagType = SpecialCharacterTagType
Namespace.addCategoryObject('typeBinding', 'SpecialCharacterTagType', SpecialCharacterTagType)


# Complex type {http://www.stibosystems.com/step}StartConditionType with content type EMPTY
class StartConditionType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}StartConditionType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StartConditionType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6997, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_StartConditionType_ID', _module_typeBindings.StepBusinessRuleID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6998, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6998, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    The ID of the start condtion.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ID.name() : __ID
    })
_module_typeBindings.StartConditionType = StartConditionType
Namespace.addCategoryObject('typeBinding', 'StartConditionType', StartConditionType)


# Complex type {http://www.stibosystems.com/step}STEPWorkflowStateBindType with content type EMPTY
class STEPWorkflowStateBindType (pyxb.binding.basis.complexTypeDefinition):
    """
                Optional information that can be added to Products. Will be resolved to a business rule binding during
                import. Typically expresses an expected task during import and the binding allows custom business rules
                to verify task and take appropriate action.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'STEPWorkflowStateBindType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7037, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute WorkflowID uses Python identifier WorkflowID
    __WorkflowID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'WorkflowID'), 'WorkflowID', '__httpwww_stibosystems_comstep_STEPWorkflowStateBindType_WorkflowID', _module_typeBindings.StepWorkflowID, required=True)
    __WorkflowID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7045, 8)
    __WorkflowID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7045, 8)
    
    WorkflowID = property(__WorkflowID.value, __WorkflowID.set, None, None)

    
    # Attribute StateID uses Python identifier StateID
    __StateID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'StateID'), 'StateID', '__httpwww_stibosystems_comstep_STEPWorkflowStateBindType_StateID', pyxb.binding.datatypes.string, required=True)
    __StateID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7046, 8)
    __StateID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7046, 8)
    
    StateID = property(__StateID.value, __StateID.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __WorkflowID.name() : __WorkflowID,
        __StateID.name() : __StateID
    })
_module_typeBindings.STEPWorkflowStateBindType = STEPWorkflowStateBindType
Namespace.addCategoryObject('typeBinding', 'STEPWorkflowStateBindType', STEPWorkflowStateBindType)


# Complex type {http://www.stibosystems.com/step}STEPWorkflowType with content type ELEMENT_ONLY
class STEPWorkflowType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a STEP workflow.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'STEPWorkflowType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7065, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}BusinessRuleLink uses Python identifier BusinessRuleLink
    __BusinessRuleLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BusinessRuleLink'), 'BusinessRuleLink', '__httpwww_stibosystems_comstep_STEPWorkflowType_httpwww_stibosystems_comstepBusinessRuleLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7072, 12), )

    
    BusinessRuleLink = property(__BusinessRuleLink.value, __BusinessRuleLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SetupGroupLink uses Python identifier SetupGroupLink
    __SetupGroupLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink'), 'SetupGroupLink', '__httpwww_stibosystems_comstep_STEPWorkflowType_httpwww_stibosystems_comstepSetupGroupLink', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7073, 12), )

    
    SetupGroupLink = property(__SetupGroupLink.value, __SetupGroupLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_STEPWorkflowType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7074, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_STEPWorkflowType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7075, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ValidUserTypeLink uses Python identifier ValidUserTypeLink
    __ValidUserTypeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValidUserTypeLink'), 'ValidUserTypeLink', '__httpwww_stibosystems_comstep_STEPWorkflowType_httpwww_stibosystems_comstepValidUserTypeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7076, 12), )

    
    ValidUserTypeLink = property(__ValidUserTypeLink.value, __ValidUserTypeLink.set, None, '\n                        A list of object types valid in the context of the STEP Workflow.\n                    ')

    
    # Element {http://www.stibosystems.com/step}StartCondition uses Python identifier StartCondition
    __StartCondition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StartCondition'), 'StartCondition', '__httpwww_stibosystems_comstep_STEPWorkflowType_httpwww_stibosystems_comstepStartCondition', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7083, 12), )

    
    StartCondition = property(__StartCondition.value, __StartCondition.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Configuration uses Python identifier Configuration
    __Configuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), 'Configuration', '__httpwww_stibosystems_comstep_STEPWorkflowType_httpwww_stibosystems_comstepConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7084, 12), )

    
    Configuration = property(__Configuration.value, __Configuration.set, None, None)

    
    # Element {http://www.stibosystems.com/step}LocalBusinessRule uses Python identifier LocalBusinessRule
    __LocalBusinessRule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LocalBusinessRule'), 'LocalBusinessRule', '__httpwww_stibosystems_comstep_STEPWorkflowType_httpwww_stibosystems_comstepLocalBusinessRule', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7085, 12), )

    
    LocalBusinessRule = property(__LocalBusinessRule.value, __LocalBusinessRule.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_STEPWorkflowType_ID', _module_typeBindings.StepWorkflowID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7087, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7087, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    The ID of the workflow.\n                ')

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_STEPWorkflowType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7094, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7094, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_STEPWorkflowType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7095, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7095, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_STEPWorkflowType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7096, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7096, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __BusinessRuleLink.name() : __BusinessRuleLink,
        __SetupGroupLink.name() : __SetupGroupLink,
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __ValidUserTypeLink.name() : __ValidUserTypeLink,
        __StartCondition.name() : __StartCondition,
        __Configuration.name() : __Configuration,
        __LocalBusinessRule.name() : __LocalBusinessRule
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed
    })
_module_typeBindings.STEPWorkflowType = STEPWorkflowType
Namespace.addCategoryObject('typeBinding', 'STEPWorkflowType', STEPWorkflowType)


# Complex type {http://www.stibosystems.com/step}STEPWorkflowProfileType with content type ELEMENT_ONLY
class STEPWorkflowProfileType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a STEP workflow profile.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'STEPWorkflowProfileType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7108, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}SetupGroupLink uses Python identifier SetupGroupLink
    __SetupGroupLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink'), 'SetupGroupLink', '__httpwww_stibosystems_comstep_STEPWorkflowProfileType_httpwww_stibosystems_comstepSetupGroupLink', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7115, 12), )

    
    SetupGroupLink = property(__SetupGroupLink.value, __SetupGroupLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_STEPWorkflowProfileType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7116, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Configuration uses Python identifier Configuration
    __Configuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), 'Configuration', '__httpwww_stibosystems_comstep_STEPWorkflowProfileType_httpwww_stibosystems_comstepConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7117, 12), )

    
    Configuration = property(__Configuration.value, __Configuration.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_STEPWorkflowProfileType_ID', _module_typeBindings.StepWorkflowProfileID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7119, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7119, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    The ID of the workflow profile.\n                ')

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_STEPWorkflowProfileType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7126, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7126, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_STEPWorkflowProfileType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7127, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7127, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_STEPWorkflowProfileType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7128, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7128, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __SetupGroupLink.name() : __SetupGroupLink,
        __Name.name() : __Name,
        __Configuration.name() : __Configuration
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed
    })
_module_typeBindings.STEPWorkflowProfileType = STEPWorkflowProfileType
Namespace.addCategoryObject('typeBinding', 'STEPWorkflowProfileType', STEPWorkflowProfileType)


# Complex type {http://www.stibosystems.com/step}StyleTagGroupType with content type ELEMENT_ONLY
class StyleTagGroupType (pyxb.binding.basis.complexTypeDefinition):
    """
                An tag group holding a number of tags and tag groups.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StyleTagGroupType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7130, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_StyleTagGroupType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7137, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_StyleTagGroupType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7138, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeGroupLink uses Python identifier AttributeGroupLink
    __AttributeGroupLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), 'AttributeGroupLink', '__httpwww_stibosystems_comstep_StyleTagGroupType_httpwww_stibosystems_comstepAttributeGroupLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7139, 12), )

    
    AttributeGroupLink = property(__AttributeGroupLink.value, __AttributeGroupLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}StyleTagGroup uses Python identifier StyleTagGroup
    __StyleTagGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StyleTagGroup'), 'StyleTagGroup', '__httpwww_stibosystems_comstep_StyleTagGroupType_httpwww_stibosystems_comstepStyleTagGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7140, 12), )

    
    StyleTagGroup = property(__StyleTagGroup.value, __StyleTagGroup.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_StyleTagGroupType_ID', _module_typeBindings.StepTagGroupID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7142, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7142, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    Global identification of the object.\n                ')

    
    # Attribute ParentID uses Python identifier ParentID
    __ParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ParentID'), 'ParentID', '__httpwww_stibosystems_comstep_StyleTagGroupType_ParentID', _module_typeBindings.StepTagGroupID)
    __ParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7149, 8)
    __ParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7149, 8)
    
    ParentID = property(__ParentID.value, __ParentID.set, None, '\n                    ID of the parent tag group. When creating new group during import either ParentID or parent node is\n                    required.\n                ')

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_StyleTagGroupType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7157, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7157, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_StyleTagGroupType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7158, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7158, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_StyleTagGroupType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7159, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7159, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __AttributeGroupLink.name() : __AttributeGroupLink,
        __StyleTagGroup.name() : __StyleTagGroup
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __ParentID.name() : __ParentID,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed
    })
_module_typeBindings.StyleTagGroupType = StyleTagGroupType
Namespace.addCategoryObject('typeBinding', 'StyleTagGroupType', StyleTagGroupType)


# Complex type {http://www.stibosystems.com/step}StyleTagType with content type ELEMENT_ONLY
class StyleTagType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a style tag.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StyleTagType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7161, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Configuration uses Python identifier Configuration
    __Configuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), 'Configuration', '__httpwww_stibosystems_comstep_StyleTagType_httpwww_stibosystems_comstepConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7168, 12), )

    
    Configuration = property(__Configuration.value, __Configuration.set, None, '\n                        How tag content should be styled in STEP GUI.\n                    ')

    
    # Element {http://www.stibosystems.com/step}TagFormat uses Python identifier TagFormat
    __TagFormat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TagFormat'), 'TagFormat', '__httpwww_stibosystems_comstep_StyleTagType_httpwww_stibosystems_comstepTagFormat', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7175, 12), )

    
    TagFormat = property(__TagFormat.value, __TagFormat.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_StyleTagType_ID', _module_typeBindings.TagID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7177, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7177, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    ID of tag - in STEP GUI presented as Name of tag. Must be unique across all tag types.\n                ')

    
    # Attribute Tag uses Python identifier Tag
    __Tag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Tag'), 'Tag', '__httpwww_stibosystems_comstep_StyleTagType_Tag', pyxb.binding.datatypes.string, required=True)
    __Tag._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7184, 8)
    __Tag._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7184, 8)
    
    Tag = property(__Tag.value, __Tag.set, None, '\n                    Tag name. Must be unique across all tag types.\n                ')

    
    # Attribute ParentID uses Python identifier ParentID
    __ParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ParentID'), 'ParentID', '__httpwww_stibosystems_comstep_StyleTagType_ParentID', _module_typeBindings.StepTagGroupID)
    __ParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7191, 8)
    __ParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7191, 8)
    
    ParentID = property(__ParentID.value, __ParentID.set, None, '\n                    ID of the parent tag group. If not supplied and tag not already exists it will be created on top\n                    level.\n                ')

    _ElementMap.update({
        __Configuration.name() : __Configuration,
        __TagFormat.name() : __TagFormat
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __Tag.name() : __Tag,
        __ParentID.name() : __ParentID
    })
_module_typeBindings.StyleTagType = StyleTagType
Namespace.addCategoryObject('typeBinding', 'StyleTagType', StyleTagType)


# Complex type {http://www.stibosystems.com/step}SuppressedAssetCrossReferenceType with content type ELEMENT_ONLY
class SuppressedAssetCrossReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a suppressed reference to an asset. Exported only for cross-context exports. Valid for import and most effective when all configured contexts are included in a cross-context import.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SuppressedAssetCrossReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7200, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_SuppressedAssetCrossReferenceType_httpwww_stibosystems_comstepKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7207, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_SuppressedAssetCrossReferenceType_Type', _module_typeBindings.StepLinkTypeID, required=True)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7209, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7209, 8)
    
    Type = property(__Type.value, __Type.set, None, None)

    
    # Attribute AssetID uses Python identifier AssetID
    __AssetID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AssetID'), 'AssetID', '__httpwww_stibosystems_comstep_SuppressedAssetCrossReferenceType_AssetID', _module_typeBindings.StepAssetID, required=True)
    __AssetID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7210, 8)
    __AssetID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7210, 8)
    
    AssetID = property(__AssetID.value, __AssetID.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_SuppressedAssetCrossReferenceType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7211, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7211, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_SuppressedAssetCrossReferenceType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7212, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7212, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, None)

    
    # Attribute Inherited uses Python identifier Inherited
    __Inherited = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Inherited'), 'Inherited', '__httpwww_stibosystems_comstep_SuppressedAssetCrossReferenceType_Inherited', pyxb.binding.datatypes.integer)
    __Inherited._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7213, 8)
    __Inherited._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7213, 8)
    
    Inherited = property(__Inherited.value, __Inherited.set, None, '\n                    Only relevant during export when nested inside a partial hierarchy. If present during import,\n                    the link is simply ignored. If this attribute is present then link is inherited. Will not\n                    be exported for local links (thus only numbers 1 and upward will be exported - 1 indicating\n                    inherited from immediate parent).\n                    The integer value of this attribute indicates how far up this link is inherited from.\n                    In cross context exports it might be relevant to have this number to find the most relevant link\n                    for a given context.\n                    NOTE: will only inherit inside hierarchy of equal node types - ie. will not inherit from\n                    classification to product hierarchy.\n                ')

    _ElementMap.update({
        __KeyValue.name() : __KeyValue
    })
    _AttributeMap.update({
        __Type.name() : __Type,
        __AssetID.name() : __AssetID,
        __Changed.name() : __Changed,
        __QualifierID.name() : __QualifierID,
        __Inherited.name() : __Inherited
    })
_module_typeBindings.SuppressedAssetCrossReferenceType = SuppressedAssetCrossReferenceType
Namespace.addCategoryObject('typeBinding', 'SuppressedAssetCrossReferenceType', SuppressedAssetCrossReferenceType)


# Complex type {http://www.stibosystems.com/step}SuppressedClassificationCrossReferenceType with content type ELEMENT_ONLY
class SuppressedClassificationCrossReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a suppressed reference to a classification. Exported only for cross-context exports.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SuppressedClassificationCrossReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7229, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_SuppressedClassificationCrossReferenceType_httpwww_stibosystems_comstepKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7236, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_SuppressedClassificationCrossReferenceType_Type', _module_typeBindings.StepLinkTypeID, required=True)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7238, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7238, 8)
    
    Type = property(__Type.value, __Type.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_SuppressedClassificationCrossReferenceType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7239, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7239, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_SuppressedClassificationCrossReferenceType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7240, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7240, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, None)

    
    # Attribute ClassificationID uses Python identifier ClassificationID
    __ClassificationID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ClassificationID'), 'ClassificationID', '__httpwww_stibosystems_comstep_SuppressedClassificationCrossReferenceType_ClassificationID', _module_typeBindings.StepClassificationID, required=True)
    __ClassificationID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7241, 8)
    __ClassificationID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7241, 8)
    
    ClassificationID = property(__ClassificationID.value, __ClassificationID.set, None, None)

    
    # Attribute Inherited uses Python identifier Inherited
    __Inherited = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Inherited'), 'Inherited', '__httpwww_stibosystems_comstep_SuppressedClassificationCrossReferenceType_Inherited', pyxb.binding.datatypes.integer)
    __Inherited._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7242, 8)
    __Inherited._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7242, 8)
    
    Inherited = property(__Inherited.value, __Inherited.set, None, '\n                    Only relevant during export when nested inside a partial hierarchy. If present during import,\n                    the link is simply ignored. If this attribute is present then link is inherited. Will not\n                    be exported for local links (thus only numbers 1 and upward will be exported - 1 indicating\n                    inherited from immediate parent).\n                    The integer value of this attribute indicates how far up this link is inherited from.\n                    In cross context exports it might be relevant to have this number to find the most relevant link\n                    for a given context.\n                    NOTE: will only inherit inside hierarchy of equal node types - ie. will not inherit from\n                    classification to product hierarchy.\n                ')

    _ElementMap.update({
        __KeyValue.name() : __KeyValue
    })
    _AttributeMap.update({
        __Type.name() : __Type,
        __Changed.name() : __Changed,
        __QualifierID.name() : __QualifierID,
        __ClassificationID.name() : __ClassificationID,
        __Inherited.name() : __Inherited
    })
_module_typeBindings.SuppressedClassificationCrossReferenceType = SuppressedClassificationCrossReferenceType
Namespace.addCategoryObject('typeBinding', 'SuppressedClassificationCrossReferenceType', SuppressedClassificationCrossReferenceType)


# Complex type {http://www.stibosystems.com/step}SuppressedClassificationReferenceType with content type ELEMENT_ONLY
class SuppressedClassificationReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a suppressed link from a product to a classification. Exported only for cross-context
                exports.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SuppressedClassificationReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7258, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_SuppressedClassificationReferenceType_httpwww_stibosystems_comstepKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7266, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Attribute InheritedFrom uses Python identifier InheritedFrom
    __InheritedFrom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'InheritedFrom'), 'InheritedFrom', '__httpwww_stibosystems_comstep_SuppressedClassificationReferenceType_InheritedFrom', pyxb.binding.datatypes.string)
    __InheritedFrom._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7268, 8)
    __InheritedFrom._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7268, 8)
    
    InheritedFrom = property(__InheritedFrom.value, __InheritedFrom.set, None, None)

    
    # Attribute Inherited uses Python identifier Inherited
    __Inherited = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Inherited'), 'Inherited', '__httpwww_stibosystems_comstep_SuppressedClassificationReferenceType_Inherited', pyxb.binding.datatypes.integer)
    __Inherited._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7269, 8)
    __Inherited._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7269, 8)
    
    Inherited = property(__Inherited.value, __Inherited.set, None, '\n                    Only relevant during export when nested inside a partial hierarchy. If present during import,\n                    the link is simply ignored. If this attribute is present then link is inherited. Will not\n                    be exported for local links (thus only numbers 1 and upward will be exported - 1 indicating\n                    inherited from immediate parent).\n                    The integer value of this attribute indicates how far up this link is inherited from.\n                    In cross context exports it might be relevant to have this number to find the most relevant link\n                    for a given context.\n                    NOTE: will only inherit inside hierarchy of equal node types - ie. will not inherit from\n                    classification to product hierarchy.\n                ')

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_SuppressedClassificationReferenceType_Type', _module_typeBindings.StepLinkTypeID)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7284, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7284, 8)
    
    Type = property(__Type.value, __Type.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_SuppressedClassificationReferenceType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7285, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7285, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_SuppressedClassificationReferenceType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7286, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7286, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, None)

    
    # Attribute ClassificationID uses Python identifier ClassificationID
    __ClassificationID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ClassificationID'), 'ClassificationID', '__httpwww_stibosystems_comstep_SuppressedClassificationReferenceType_ClassificationID', _module_typeBindings.StepClassificationID, required=True)
    __ClassificationID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7287, 8)
    __ClassificationID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7287, 8)
    
    ClassificationID = property(__ClassificationID.value, __ClassificationID.set, None, None)

    _ElementMap.update({
        __KeyValue.name() : __KeyValue
    })
    _AttributeMap.update({
        __InheritedFrom.name() : __InheritedFrom,
        __Inherited.name() : __Inherited,
        __Type.name() : __Type,
        __Changed.name() : __Changed,
        __QualifierID.name() : __QualifierID,
        __ClassificationID.name() : __ClassificationID
    })
_module_typeBindings.SuppressedClassificationReferenceType = SuppressedClassificationReferenceType
Namespace.addCategoryObject('typeBinding', 'SuppressedClassificationReferenceType', SuppressedClassificationReferenceType)


# Complex type {http://www.stibosystems.com/step}SuppressedProductCrossReferenceType with content type ELEMENT_ONLY
class SuppressedProductCrossReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a suppressed reference to a product. Exported only for cross-context exports.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SuppressedProductCrossReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7289, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_SuppressedProductCrossReferenceType_httpwww_stibosystems_comstepKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7296, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_SuppressedProductCrossReferenceType_Type', _module_typeBindings.StepLinkTypeID, required=True)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7298, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7298, 8)
    
    Type = property(__Type.value, __Type.set, None, None)

    
    # Attribute ProductID uses Python identifier ProductID
    __ProductID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ProductID'), 'ProductID', '__httpwww_stibosystems_comstep_SuppressedProductCrossReferenceType_ProductID', _module_typeBindings.StepProductID, required=True)
    __ProductID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7299, 8)
    __ProductID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7299, 8)
    
    ProductID = property(__ProductID.value, __ProductID.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_SuppressedProductCrossReferenceType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7300, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7300, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_SuppressedProductCrossReferenceType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7301, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7301, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, None)

    
    # Attribute Inherited uses Python identifier Inherited
    __Inherited = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Inherited'), 'Inherited', '__httpwww_stibosystems_comstep_SuppressedProductCrossReferenceType_Inherited', pyxb.binding.datatypes.integer)
    __Inherited._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7302, 8)
    __Inherited._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7302, 8)
    
    Inherited = property(__Inherited.value, __Inherited.set, None, '\n                    Only relevant during export when nested inside a partial hierarchy. If present during import,\n                    the link is simply ignored. If this attribute is present then link is inherited. Will not\n                    be exported for local links (thus only numbers 1 and upward will be exported - 1 indicating\n                    inherited from immediate parent).\n                    The integer value of this attribute indicates how far up this link is inherited from.\n                    In cross context exports it might be relevant to have this number to find the most relevant link\n                    for a given context.\n                    NOTE: will only inherit inside hierarchy of equal node types - ie. will not inherit from\n                    classification to product hierarchy.\n                ')

    _ElementMap.update({
        __KeyValue.name() : __KeyValue
    })
    _AttributeMap.update({
        __Type.name() : __Type,
        __ProductID.name() : __ProductID,
        __Changed.name() : __Changed,
        __QualifierID.name() : __QualifierID,
        __Inherited.name() : __Inherited
    })
_module_typeBindings.SuppressedProductCrossReferenceType = SuppressedProductCrossReferenceType
Namespace.addCategoryObject('typeBinding', 'SuppressedProductCrossReferenceType', SuppressedProductCrossReferenceType)


# Complex type {http://www.stibosystems.com/step}SuppressedEntityCrossReferenceType with content type ELEMENT_ONLY
class SuppressedEntityCrossReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a suppressed reference to an entity. Exported only for cross-context exports.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SuppressedEntityCrossReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7318, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_stibosystems_comstep_SuppressedEntityCrossReferenceType_httpwww_stibosystems_comstepKeyValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7325, 12), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_SuppressedEntityCrossReferenceType_Type', _module_typeBindings.StepLinkTypeID, required=True)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7327, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7327, 8)
    
    Type = property(__Type.value, __Type.set, None, None)

    
    # Attribute ProductID uses Python identifier ProductID
    __ProductID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ProductID'), 'ProductID', '__httpwww_stibosystems_comstep_SuppressedEntityCrossReferenceType_ProductID', _module_typeBindings.StepProductID, required=True)
    __ProductID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7328, 8)
    __ProductID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7328, 8)
    
    ProductID = property(__ProductID.value, __ProductID.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_SuppressedEntityCrossReferenceType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7329, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7329, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_SuppressedEntityCrossReferenceType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7330, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7330, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, None)

    
    # Attribute Inherited uses Python identifier Inherited
    __Inherited = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Inherited'), 'Inherited', '__httpwww_stibosystems_comstep_SuppressedEntityCrossReferenceType_Inherited', pyxb.binding.datatypes.integer)
    __Inherited._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7331, 8)
    __Inherited._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7331, 8)
    
    Inherited = property(__Inherited.value, __Inherited.set, None, '\n                    Only relevant during export when nested inside a partial hierarchy. If present during import,\n                    the link is simply ignored. If this attribute is present then link is inherited. Will not\n                    be exported for local links (thus only numbers 1 and upward will be exported - 1 indicating\n                    inherited from immediate parent).\n                    The integer value of this attribute indicates how far up this link is inherited from.\n                    In cross context exports it might be relevant to have this number to find the most relevant link\n                    for a given context.\n                    NOTE: will only inherit inside hierarchy of equal node types - ie. will not inherit from\n                    classification to product hierarchy.\n                ')

    _ElementMap.update({
        __KeyValue.name() : __KeyValue
    })
    _AttributeMap.update({
        __Type.name() : __Type,
        __ProductID.name() : __ProductID,
        __Changed.name() : __Changed,
        __QualifierID.name() : __QualifierID,
        __Inherited.name() : __Inherited
    })
_module_typeBindings.SuppressedEntityCrossReferenceType = SuppressedEntityCrossReferenceType
Namespace.addCategoryObject('typeBinding', 'SuppressedEntityCrossReferenceType', SuppressedEntityCrossReferenceType)


# Complex type {http://www.stibosystems.com/step}SuppressedContextCrossReferenceType with content type EMPTY
class SuppressedContextCrossReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a suppressed reference to a context. Exported only for cross-context exports.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SuppressedContextCrossReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7347, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_SuppressedContextCrossReferenceType_Type', _module_typeBindings.StepLinkTypeID, required=True)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7353, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7353, 8)
    
    Type = property(__Type.value, __Type.set, None, None)

    
    # Attribute ContextID uses Python identifier ContextID
    __ContextID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ContextID'), 'ContextID', '__httpwww_stibosystems_comstep_SuppressedContextCrossReferenceType_ContextID', _module_typeBindings.StepQualifierID, required=True)
    __ContextID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7354, 8)
    __ContextID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7354, 8)
    
    ContextID = property(__ContextID.value, __ContextID.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_SuppressedContextCrossReferenceType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7355, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7355, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_SuppressedContextCrossReferenceType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7356, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7356, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, None)

    
    # Attribute Inherited uses Python identifier Inherited
    __Inherited = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Inherited'), 'Inherited', '__httpwww_stibosystems_comstep_SuppressedContextCrossReferenceType_Inherited', pyxb.binding.datatypes.integer)
    __Inherited._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7357, 8)
    __Inherited._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7357, 8)
    
    Inherited = property(__Inherited.value, __Inherited.set, None, '\n                    Only relevant during export when nested inside a partial hierarchy. If present during import,\n                    the link is simply ignored. If this attribute is present then link is inherited. Will not\n                    be exported for local links (thus only numbers 1 and upward will be exported - 1 indicating\n                    inherited from immediate parent).\n                    The integer value of this attribute indicates how far up this link is inherited from.\n                    In cross context exports it might be relevant to have this number to find the most relevant link\n                    for a given context.\n                    NOTE: will only inherit inside hierarchy of equal node types - ie. will not inherit from\n                    classification to product hierarchy.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Type.name() : __Type,
        __ContextID.name() : __ContextID,
        __Changed.name() : __Changed,
        __QualifierID.name() : __QualifierID,
        __Inherited.name() : __Inherited
    })
_module_typeBindings.SuppressedContextCrossReferenceType = SuppressedContextCrossReferenceType
Namespace.addCategoryObject('typeBinding', 'SuppressedContextCrossReferenceType', SuppressedContextCrossReferenceType)


# Complex type {http://www.stibosystems.com/step}SuppressedWorkspaceCrossReferenceType with content type EMPTY
class SuppressedWorkspaceCrossReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a suppressed reference to a workspace. Exported only for cross-context exports.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SuppressedWorkspaceCrossReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7373, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_SuppressedWorkspaceCrossReferenceType_Type', _module_typeBindings.StepLinkTypeID, required=True)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7379, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7379, 8)
    
    Type = property(__Type.value, __Type.set, None, None)

    
    # Attribute WorkspaceID uses Python identifier WorkspaceID
    __WorkspaceID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'WorkspaceID'), 'WorkspaceID', '__httpwww_stibosystems_comstep_SuppressedWorkspaceCrossReferenceType_WorkspaceID', _module_typeBindings.StepID, required=True)
    __WorkspaceID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7380, 8)
    __WorkspaceID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7380, 8)
    
    WorkspaceID = property(__WorkspaceID.value, __WorkspaceID.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_SuppressedWorkspaceCrossReferenceType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7381, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7381, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_SuppressedWorkspaceCrossReferenceType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7382, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7382, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, None)

    
    # Attribute Inherited uses Python identifier Inherited
    __Inherited = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Inherited'), 'Inherited', '__httpwww_stibosystems_comstep_SuppressedWorkspaceCrossReferenceType_Inherited', pyxb.binding.datatypes.integer)
    __Inherited._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7383, 8)
    __Inherited._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7383, 8)
    
    Inherited = property(__Inherited.value, __Inherited.set, None, '\n                    Only relevant during export when nested inside a partial hierarchy. If present during import,\n                    the link is simply ignored. If this attribute is present then link is inherited. Will not\n                    be exported for local links (thus only numbers 1 and upward will be exported - 1 indicating\n                    inherited from immediate parent).\n                    The integer value of this attribute indicates how far up this link is inherited from.\n                    In cross context exports it might be relevant to have this number to find the most relevant link\n                    for a given context.\n                    NOTE: will only inherit inside hierarchy of equal node types - ie. will not inherit from\n                    classification to product hierarchy.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Type.name() : __Type,
        __WorkspaceID.name() : __WorkspaceID,
        __Changed.name() : __Changed,
        __QualifierID.name() : __QualifierID,
        __Inherited.name() : __Inherited
    })
_module_typeBindings.SuppressedWorkspaceCrossReferenceType = SuppressedWorkspaceCrossReferenceType
Namespace.addCategoryObject('typeBinding', 'SuppressedWorkspaceCrossReferenceType', SuppressedWorkspaceCrossReferenceType)


# Complex type {http://www.stibosystems.com/step}SystemSetupValueType with content type MIXED
class SystemSetupValueType (pyxb.binding.basis.complexTypeDefinition):
    """
                The system setup value.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SystemSetupValueType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7404, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute Name uses Python identifier Name
    __Name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Name'), 'Name', '__httpwww_stibosystems_comstep_SystemSetupValueType_Name', pyxb.binding.datatypes.string, required=True)
    __Name._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7410, 8)
    __Name._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7410, 8)
    
    Name = property(__Name.value, __Name.set, None, '\n                    The name of the system setup value.\n                ')

    
    # Attribute UserID uses Python identifier UserID
    __UserID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserID'), 'UserID', '__httpwww_stibosystems_comstep_SystemSetupValueType_UserID', _module_typeBindings.StepUserID)
    __UserID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7417, 8)
    __UserID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7417, 8)
    
    UserID = property(__UserID.value, __UserID.set, None, '\n                    @Deprecated, ignored completely for user specific system setups. Will still have effect in global\n                    system setup section - but warn if used.\n                ')

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_SystemSetupValueType_Type', pyxb.binding.datatypes.string, required=True)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7425, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7425, 8)
    
    Type = property(__Type.value, __Type.set, None, '\n                    The type of the system setup value.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Name.name() : __Name,
        __UserID.name() : __UserID,
        __Type.name() : __Type
    })
_module_typeBindings.SystemSetupValueType = SystemSetupValueType
Namespace.addCategoryObject('typeBinding', 'SystemSetupValueType', SystemSetupValueType)


# Complex type {http://www.stibosystems.com/step}TableDefinitionType with content type ELEMENT_ONLY
class TableDefinitionType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}TableDefinitionType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TableDefinitionType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7478, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}TableXML uses Python identifier TableXML
    __TableXML = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TableXML'), 'TableXML', '__httpwww_stibosystems_comstep_TableDefinitionType_httpwww_stibosystems_comstepTableXML', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7480, 12), )

    
    TableXML = property(__TableXML.value, __TableXML.set, None, None)

    
    # Element {http://www.stibosystems.com/step}TableFreeTextXML uses Python identifier TableFreeTextXML
    __TableFreeTextXML = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TableFreeTextXML'), 'TableFreeTextXML', '__httpwww_stibosystems_comstep_TableDefinitionType_httpwww_stibosystems_comstepTableFreeTextXML', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7481, 12), )

    
    TableFreeTextXML = property(__TableFreeTextXML.value, __TableFreeTextXML.set, None, None)

    
    # Attribute ContextID uses Python identifier ContextID
    __ContextID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ContextID'), 'ContextID', '__httpwww_stibosystems_comstep_TableDefinitionType_ContextID', _module_typeBindings.StepQualifierID)
    __ContextID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7483, 8)
    __ContextID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7483, 8)
    
    ContextID = property(__ContextID.value, __ContextID.set, None, None)

    _ElementMap.update({
        __TableXML.name() : __TableXML,
        __TableFreeTextXML.name() : __TableFreeTextXML
    })
    _AttributeMap.update({
        __ContextID.name() : __ContextID
    })
_module_typeBindings.TableDefinitionType = TableDefinitionType
Namespace.addCategoryObject('typeBinding', 'TableDefinitionType', TableDefinitionType)


# Complex type {http://www.stibosystems.com/step}TableTextsType with content type ELEMENT_ONLY
class TableTextsType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}TableTextsType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TableTextsType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7513, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Text uses Python identifier Text
    __Text = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Text'), 'Text', '__httpwww_stibosystems_comstep_TableTextsType_httpwww_stibosystems_comstepText', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7515, 12), )

    
    Text = property(__Text.value, __Text.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_TableTextsType_QualifierID', _module_typeBindings.StepQualifierID, required=True)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7517, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7517, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, None)

    
    # Attribute FormatVersion uses Python identifier FormatVersion
    __FormatVersion = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'FormatVersion'), 'FormatVersion', '__httpwww_stibosystems_comstep_TableTextsType_FormatVersion', pyxb.binding.datatypes.string, required=True)
    __FormatVersion._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7518, 8)
    __FormatVersion._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7518, 8)
    
    FormatVersion = property(__FormatVersion.value, __FormatVersion.set, None, None)

    _ElementMap.update({
        __Text.name() : __Text
    })
    _AttributeMap.update({
        __QualifierID.name() : __QualifierID,
        __FormatVersion.name() : __FormatVersion
    })
_module_typeBindings.TableTextsType = TableTextsType
Namespace.addCategoryObject('typeBinding', 'TableTextsType', TableTextsType)


# Complex type {http://www.stibosystems.com/step}TableType with content type ELEMENT_ONLY
class TableType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}TableType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TableType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7532, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Column uses Python identifier Column
    __Column = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Column'), 'Column', '__httpwww_stibosystems_comstep_TableType_httpwww_stibosystems_comstepColumn', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7534, 12), )

    
    Column = property(__Column.value, __Column.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Row uses Python identifier Row
    __Row = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Row'), 'Row', '__httpwww_stibosystems_comstep_TableType_httpwww_stibosystems_comstepRow', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7535, 12), )

    
    Row = property(__Row.value, __Row.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Texts uses Python identifier Texts
    __Texts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Texts'), 'Texts', '__httpwww_stibosystems_comstep_TableType_httpwww_stibosystems_comstepTexts', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7536, 12), )

    
    Texts = property(__Texts.value, __Texts.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_TableType_ID', _module_typeBindings.StepID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7538, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7538, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute ContextID uses Python identifier ContextID
    __ContextID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ContextID'), 'ContextID', '__httpwww_stibosystems_comstep_TableType_ContextID', _module_typeBindings.StepQualifierID)
    __ContextID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7539, 8)
    __ContextID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7539, 8)
    
    ContextID = property(__ContextID.value, __ContextID.set, None, None)

    
    # Attribute TableTypeID uses Python identifier TableTypeID
    __TableTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TableTypeID'), 'TableTypeID', '__httpwww_stibosystems_comstep_TableType_TableTypeID', _module_typeBindings.StepAttributeID)
    __TableTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7540, 8)
    __TableTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7540, 8)
    
    TableTypeID = property(__TableTypeID.value, __TableTypeID.set, None, None)

    _ElementMap.update({
        __Column.name() : __Column,
        __Row.name() : __Row,
        __Texts.name() : __Texts
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __ContextID.name() : __ContextID,
        __TableTypeID.name() : __TableTypeID
    })
_module_typeBindings.TableType = TableType
Namespace.addCategoryObject('typeBinding', 'TableType', TableType)


# Complex type {http://www.stibosystems.com/step}TableTypeLinkType with content type EMPTY
class TableTypeLinkType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}TableTypeLinkType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TableTypeLinkType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7542, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute TableTypeID uses Python identifier TableTypeID
    __TableTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TableTypeID'), 'TableTypeID', '__httpwww_stibosystems_comstep_TableTypeLinkType_TableTypeID', _module_typeBindings.StepAttributeID, required=True)
    __TableTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7543, 8)
    __TableTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7543, 8)
    
    TableTypeID = property(__TableTypeID.value, __TableTypeID.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __TableTypeID.name() : __TableTypeID
    })
_module_typeBindings.TableTypeLinkType = TableTypeLinkType
Namespace.addCategoryObject('typeBinding', 'TableTypeLinkType', TableTypeLinkType)


# Complex type {http://www.stibosystems.com/step}TableTypeType with content type ELEMENT_ONLY
class TableTypeType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}TableTypeType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TableTypeType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7550, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_TableTypeType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7552, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}UserTypeLink uses Python identifier UserTypeLink
    __UserTypeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink'), 'UserTypeLink', '__httpwww_stibosystems_comstep_TableTypeType_httpwww_stibosystems_comstepUserTypeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7553, 12), )

    
    UserTypeLink = property(__UserTypeLink.value, __UserTypeLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ColumnType uses Python identifier ColumnType
    __ColumnType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ColumnType'), 'ColumnType', '__httpwww_stibosystems_comstep_TableTypeType_httpwww_stibosystems_comstepColumnType', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7554, 12), )

    
    ColumnType = property(__ColumnType.value, __ColumnType.set, None, None)

    
    # Element {http://www.stibosystems.com/step}RowType uses Python identifier RowType
    __RowType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RowType'), 'RowType', '__httpwww_stibosystems_comstep_TableTypeType_httpwww_stibosystems_comstepRowType', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7555, 12), )

    
    RowType = property(__RowType.value, __RowType.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DimensionLink uses Python identifier DimensionLink
    __DimensionLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink'), 'DimensionLink', '__httpwww_stibosystems_comstep_TableTypeType_httpwww_stibosystems_comstepDimensionLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7556, 12), )

    
    DimensionLink = property(__DimensionLink.value, __DimensionLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}TableTransformation uses Python identifier TableTransformation
    __TableTransformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TableTransformation'), 'TableTransformation', '__httpwww_stibosystems_comstep_TableTypeType_httpwww_stibosystems_comstepTableTransformation', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7557, 12), )

    
    TableTransformation = property(__TableTransformation.value, __TableTransformation.set, None, None)

    
    # Element {http://www.stibosystems.com/step}TablePaginationPlugin uses Python identifier TablePaginationPlugin
    __TablePaginationPlugin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TablePaginationPlugin'), 'TablePaginationPlugin', '__httpwww_stibosystems_comstep_TableTypeType_httpwww_stibosystems_comstepTablePaginationPlugin', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7558, 12), )

    
    TablePaginationPlugin = property(__TablePaginationPlugin.value, __TablePaginationPlugin.set, None, None)

    
    # Attribute ProcessFlag uses Python identifier ProcessFlag
    __ProcessFlag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ProcessFlag'), 'ProcessFlag', '__httpwww_stibosystems_comstep_TableTypeType_ProcessFlag', pyxb.binding.datatypes.string)
    __ProcessFlag._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7560, 8)
    __ProcessFlag._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7560, 8)
    
    ProcessFlag = property(__ProcessFlag.value, __ProcessFlag.set, None, None)

    
    # Attribute VerticalSpan uses Python identifier VerticalSpan
    __VerticalSpan = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'VerticalSpan'), 'VerticalSpan', '__httpwww_stibosystems_comstep_TableTypeType_VerticalSpan', pyxb.binding.datatypes.string)
    __VerticalSpan._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7561, 8)
    __VerticalSpan._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7561, 8)
    
    VerticalSpan = property(__VerticalSpan.value, __VerticalSpan.set, None, None)

    
    # Attribute HorizontalSpan uses Python identifier HorizontalSpan
    __HorizontalSpan = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'HorizontalSpan'), 'HorizontalSpan', '__httpwww_stibosystems_comstep_TableTypeType_HorizontalSpan', pyxb.binding.datatypes.string)
    __HorizontalSpan._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7562, 8)
    __HorizontalSpan._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7562, 8)
    
    HorizontalSpan = property(__HorizontalSpan.value, __HorizontalSpan.set, None, None)

    
    # Attribute RuleAbove uses Python identifier RuleAbove
    __RuleAbove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'RuleAbove'), 'RuleAbove', '__httpwww_stibosystems_comstep_TableTypeType_RuleAbove', pyxb.binding.datatypes.string)
    __RuleAbove._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7563, 8)
    __RuleAbove._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7563, 8)
    
    RuleAbove = property(__RuleAbove.value, __RuleAbove.set, None, None)

    
    # Attribute BackgroundColor uses Python identifier BackgroundColor
    __BackgroundColor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'BackgroundColor'), 'BackgroundColor', '__httpwww_stibosystems_comstep_TableTypeType_BackgroundColor', pyxb.binding.datatypes.string)
    __BackgroundColor._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7564, 8)
    __BackgroundColor._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7564, 8)
    
    BackgroundColor = property(__BackgroundColor.value, __BackgroundColor.set, None, None)

    
    # Attribute RuleBelow uses Python identifier RuleBelow
    __RuleBelow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'RuleBelow'), 'RuleBelow', '__httpwww_stibosystems_comstep_TableTypeType_RuleBelow', pyxb.binding.datatypes.string)
    __RuleBelow._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7565, 8)
    __RuleBelow._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7565, 8)
    
    RuleBelow = property(__RuleBelow.value, __RuleBelow.set, None, None)

    
    # Attribute RuleRight uses Python identifier RuleRight
    __RuleRight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'RuleRight'), 'RuleRight', '__httpwww_stibosystems_comstep_TableTypeType_RuleRight', pyxb.binding.datatypes.string)
    __RuleRight._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7566, 8)
    __RuleRight._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7566, 8)
    
    RuleRight = property(__RuleRight.value, __RuleRight.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_TableTypeType_ID', _module_typeBindings.StepAttributeID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7567, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7567, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute ParentID uses Python identifier ParentID
    __ParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ParentID'), 'ParentID', '__httpwww_stibosystems_comstep_TableTypeType_ParentID', _module_typeBindings.StepAttributeID)
    __ParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7568, 8)
    __ParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7568, 8)
    
    ParentID = property(__ParentID.value, __ParentID.set, None, None)

    
    # Attribute CellRotation uses Python identifier CellRotation
    __CellRotation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'CellRotation'), 'CellRotation', '__httpwww_stibosystems_comstep_TableTypeType_CellRotation', pyxb.binding.datatypes.string)
    __CellRotation._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7569, 8)
    __CellRotation._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7569, 8)
    
    CellRotation = property(__CellRotation.value, __CellRotation.set, None, None)

    
    # Attribute RuleLeft uses Python identifier RuleLeft
    __RuleLeft = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'RuleLeft'), 'RuleLeft', '__httpwww_stibosystems_comstep_TableTypeType_RuleLeft', pyxb.binding.datatypes.string)
    __RuleLeft._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7570, 8)
    __RuleLeft._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7570, 8)
    
    RuleLeft = property(__RuleLeft.value, __RuleLeft.set, None, None)

    
    # Attribute TextStyle uses Python identifier TextStyle
    __TextStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TextStyle'), 'TextStyle', '__httpwww_stibosystems_comstep_TableTypeType_TextStyle', pyxb.binding.datatypes.string)
    __TextStyle._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7571, 8)
    __TextStyle._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7571, 8)
    
    TextStyle = property(__TextStyle.value, __TextStyle.set, None, None)

    
    # Attribute VerticalAlignment uses Python identifier VerticalAlignment
    __VerticalAlignment = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'VerticalAlignment'), 'VerticalAlignment', '__httpwww_stibosystems_comstep_TableTypeType_VerticalAlignment', pyxb.binding.datatypes.string)
    __VerticalAlignment._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7572, 8)
    __VerticalAlignment._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7572, 8)
    
    VerticalAlignment = property(__VerticalAlignment.value, __VerticalAlignment.set, None, None)

    
    # Attribute CellVerticalStoryDirection uses Python identifier CellVerticalStoryDirection
    __CellVerticalStoryDirection = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'CellVerticalStoryDirection'), 'CellVerticalStoryDirection', '__httpwww_stibosystems_comstep_TableTypeType_CellVerticalStoryDirection', pyxb.binding.datatypes.string)
    __CellVerticalStoryDirection._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7573, 8)
    __CellVerticalStoryDirection._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7573, 8)
    
    CellVerticalStoryDirection = property(__CellVerticalStoryDirection.value, __CellVerticalStoryDirection.set, None, None)

    
    # Attribute CellImageScale uses Python identifier CellImageScale
    __CellImageScale = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'CellImageScale'), 'CellImageScale', '__httpwww_stibosystems_comstep_TableTypeType_CellImageScale', pyxb.binding.datatypes.string)
    __CellImageScale._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7574, 8)
    __CellImageScale._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7574, 8)
    
    CellImageScale = property(__CellImageScale.value, __CellImageScale.set, None, None)

    
    # Attribute Width uses Python identifier Width
    __Width = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Width'), 'Width', '__httpwww_stibosystems_comstep_TableTypeType_Width', pyxb.binding.datatypes.decimal)
    __Width._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7575, 8)
    __Width._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7575, 8)
    
    Width = property(__Width.value, __Width.set, None, None)

    
    # Attribute WidthUnit uses Python identifier WidthUnit
    __WidthUnit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'WidthUnit'), 'WidthUnit', '__httpwww_stibosystems_comstep_TableTypeType_WidthUnit', pyxb.binding.datatypes.string)
    __WidthUnit._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7576, 8)
    __WidthUnit._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7576, 8)
    
    WidthUnit = property(__WidthUnit.value, __WidthUnit.set, None, None)

    
    # Attribute Height uses Python identifier Height
    __Height = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Height'), 'Height', '__httpwww_stibosystems_comstep_TableTypeType_Height', pyxb.binding.datatypes.decimal)
    __Height._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7577, 8)
    __Height._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7577, 8)
    
    Height = property(__Height.value, __Height.set, None, None)

    
    # Attribute HeightUnit uses Python identifier HeightUnit
    __HeightUnit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'HeightUnit'), 'HeightUnit', '__httpwww_stibosystems_comstep_TableTypeType_HeightUnit', pyxb.binding.datatypes.string)
    __HeightUnit._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7578, 8)
    __HeightUnit._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7578, 8)
    
    HeightUnit = property(__HeightUnit.value, __HeightUnit.set, None, None)

    
    # Attribute TableOrientation uses Python identifier TableOrientation
    __TableOrientation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TableOrientation'), 'TableOrientation', '__httpwww_stibosystems_comstep_TableTypeType_TableOrientation', pyxb.binding.datatypes.string)
    __TableOrientation._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7579, 8)
    __TableOrientation._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7579, 8)
    
    TableOrientation = property(__TableOrientation.value, __TableOrientation.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_TableTypeType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7580, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7580, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_TableTypeType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7581, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7581, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_TableTypeType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7582, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7582, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __UserTypeLink.name() : __UserTypeLink,
        __ColumnType.name() : __ColumnType,
        __RowType.name() : __RowType,
        __DimensionLink.name() : __DimensionLink,
        __TableTransformation.name() : __TableTransformation,
        __TablePaginationPlugin.name() : __TablePaginationPlugin
    })
    _AttributeMap.update({
        __ProcessFlag.name() : __ProcessFlag,
        __VerticalSpan.name() : __VerticalSpan,
        __HorizontalSpan.name() : __HorizontalSpan,
        __RuleAbove.name() : __RuleAbove,
        __BackgroundColor.name() : __BackgroundColor,
        __RuleBelow.name() : __RuleBelow,
        __RuleRight.name() : __RuleRight,
        __ID.name() : __ID,
        __ParentID.name() : __ParentID,
        __CellRotation.name() : __CellRotation,
        __RuleLeft.name() : __RuleLeft,
        __TextStyle.name() : __TextStyle,
        __VerticalAlignment.name() : __VerticalAlignment,
        __CellVerticalStoryDirection.name() : __CellVerticalStoryDirection,
        __CellImageScale.name() : __CellImageScale,
        __Width.name() : __Width,
        __WidthUnit.name() : __WidthUnit,
        __Height.name() : __Height,
        __HeightUnit.name() : __HeightUnit,
        __TableOrientation.name() : __TableOrientation,
        __Referenced.name() : __Referenced,
        __Selected.name() : __Selected,
        __Changed.name() : __Changed
    })
_module_typeBindings.TableTypeType = TableTypeType
Namespace.addCategoryObject('typeBinding', 'TableTypeType', TableTypeType)


# Complex type {http://www.stibosystems.com/step}TargetUserTypeLinkType with content type EMPTY
class TargetUserTypeLinkType (pyxb.binding.basis.complexTypeDefinition):
    """
                Valid target object type for a reference or classification product link type.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TargetUserTypeLinkType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7690, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute UserTypeID uses Python identifier UserTypeID
    __UserTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserTypeID'), 'UserTypeID', '__httpwww_stibosystems_comstep_TargetUserTypeLinkType_UserTypeID', _module_typeBindings.StepObjectTypeID, required=True)
    __UserTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7696, 8)
    __UserTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7696, 8)
    
    UserTypeID = property(__UserTypeID.value, __UserTypeID.set, None, '\n                    Target object type ID.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __UserTypeID.name() : __UserTypeID
    })
_module_typeBindings.TargetUserTypeLinkType = TargetUserTypeLinkType
Namespace.addCategoryObject('typeBinding', 'TargetUserTypeLinkType', TargetUserTypeLinkType)


# Complex type {http://www.stibosystems.com/step}TaskType with content type EMPTY
class TaskType (pyxb.binding.basis.complexTypeDefinition):
    """
                Information about a task - like assignee, deadline, priority etc.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TaskType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7704, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute STEPWorkflowID uses Python identifier STEPWorkflowID
    __STEPWorkflowID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'STEPWorkflowID'), 'STEPWorkflowID', '__httpwww_stibosystems_comstep_TaskType_STEPWorkflowID', _module_typeBindings.StepWorkflowID, required=True)
    __STEPWorkflowID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7710, 8)
    __STEPWorkflowID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7710, 8)
    
    STEPWorkflowID = property(__STEPWorkflowID.value, __STEPWorkflowID.set, None, '\n                    The ID of the workflow.\n                ')

    
    # Attribute StateID uses Python identifier StateID
    __StateID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'StateID'), 'StateID', '__httpwww_stibosystems_comstep_TaskType_StateID', pyxb.binding.datatypes.string, required=True)
    __StateID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7717, 8)
    __StateID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7717, 8)
    
    StateID = property(__StateID.value, __StateID.set, None, '\n                    The ID of the state.\n                ')

    
    # Attribute AssigneeID uses Python identifier AssigneeID
    __AssigneeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AssigneeID'), 'AssigneeID', '__httpwww_stibosystems_comstep_TaskType_AssigneeID', _module_typeBindings.StepID, required=True)
    __AssigneeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7724, 8)
    __AssigneeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7724, 8)
    
    AssigneeID = property(__AssigneeID.value, __AssigneeID.set, None, '\n                    The ID of the assignee.\n                ')

    
    # Attribute AssignedToGroup uses Python identifier AssignedToGroup
    __AssignedToGroup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AssignedToGroup'), 'AssignedToGroup', '__httpwww_stibosystems_comstep_TaskType_AssignedToGroup', pyxb.binding.datatypes.boolean, required=True)
    __AssignedToGroup._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7731, 8)
    __AssignedToGroup._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7731, 8)
    
    AssignedToGroup = property(__AssignedToGroup.value, __AssignedToGroup.set, None, '\n                    Is the task assigned to a group (or individual user).\n                ')

    
    # Attribute EntryTime uses Python identifier EntryTime
    __EntryTime = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'EntryTime'), 'EntryTime', '__httpwww_stibosystems_comstep_TaskType_EntryTime', pyxb.binding.datatypes.string, required=True)
    __EntryTime._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7738, 8)
    __EntryTime._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7738, 8)
    
    EntryTime = property(__EntryTime.value, __EntryTime.set, None, '\n                    The time the task was created.\n                ')

    
    # Attribute Deadline uses Python identifier Deadline
    __Deadline = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Deadline'), 'Deadline', '__httpwww_stibosystems_comstep_TaskType_Deadline', pyxb.binding.datatypes.string)
    __Deadline._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7745, 8)
    __Deadline._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7745, 8)
    
    Deadline = property(__Deadline.value, __Deadline.set, None, '\n                    The deadline of the task.\n                ')

    
    # Attribute Priority uses Python identifier Priority
    __Priority = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Priority'), 'Priority', '__httpwww_stibosystems_comstep_TaskType_Priority', pyxb.binding.datatypes.integer)
    __Priority._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7752, 8)
    __Priority._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7752, 8)
    
    Priority = property(__Priority.value, __Priority.set, None, '\n                    The priority of the task.\n                ')

    
    # Attribute StatusID uses Python identifier StatusID
    __StatusID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'StatusID'), 'StatusID', '__httpwww_stibosystems_comstep_TaskType_StatusID', _module_typeBindings.StepID)
    __StatusID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7759, 8)
    __StatusID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7759, 8)
    
    StatusID = property(__StatusID.value, __StatusID.set, None, '\n                    The (ID of the) status of the task.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __STEPWorkflowID.name() : __STEPWorkflowID,
        __StateID.name() : __StateID,
        __AssigneeID.name() : __AssigneeID,
        __AssignedToGroup.name() : __AssignedToGroup,
        __EntryTime.name() : __EntryTime,
        __Deadline.name() : __Deadline,
        __Priority.name() : __Priority,
        __StatusID.name() : __StatusID
    })
_module_typeBindings.TaskType = TaskType
Namespace.addCategoryObject('typeBinding', 'TaskType', TaskType)


# Complex type {http://www.stibosystems.com/step}TermType with content type MIXED
class TermType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}TermType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TermType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7775, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute MaximumQuantity uses Python identifier MaximumQuantity
    __MaximumQuantity = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MaximumQuantity'), 'MaximumQuantity', '__httpwww_stibosystems_comstep_TermType_MaximumQuantity', pyxb.binding.datatypes.string)
    __MaximumQuantity._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7776, 8)
    __MaximumQuantity._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7776, 8)
    
    MaximumQuantity = property(__MaximumQuantity.value, __MaximumQuantity.set, None, None)

    
    # Attribute EndDate uses Python identifier EndDate
    __EndDate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'EndDate'), 'EndDate', '__httpwww_stibosystems_comstep_TermType_EndDate', pyxb.binding.datatypes.string)
    __EndDate._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7777, 8)
    __EndDate._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7777, 8)
    
    EndDate = property(__EndDate.value, __EndDate.set, None, None)

    
    # Attribute TermsListID uses Python identifier TermsListID
    __TermsListID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TermsListID'), 'TermsListID', '__httpwww_stibosystems_comstep_TermType_TermsListID', _module_typeBindings.StepTermsListID)
    __TermsListID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7778, 8)
    __TermsListID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7778, 8)
    
    TermsListID = property(__TermsListID.value, __TermsListID.set, None, None)

    
    # Attribute MinimumQuantity uses Python identifier MinimumQuantity
    __MinimumQuantity = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MinimumQuantity'), 'MinimumQuantity', '__httpwww_stibosystems_comstep_TermType_MinimumQuantity', pyxb.binding.datatypes.string)
    __MinimumQuantity._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7779, 8)
    __MinimumQuantity._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7779, 8)
    
    MinimumQuantity = property(__MinimumQuantity.value, __MinimumQuantity.set, None, None)

    
    # Attribute LeadTime uses Python identifier LeadTime
    __LeadTime = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LeadTime'), 'LeadTime', '__httpwww_stibosystems_comstep_TermType_LeadTime', pyxb.binding.datatypes.string)
    __LeadTime._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7780, 8)
    __LeadTime._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7780, 8)
    
    LeadTime = property(__LeadTime.value, __LeadTime.set, None, None)

    
    # Attribute UnitID uses Python identifier UnitID
    __UnitID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UnitID'), 'UnitID', '__httpwww_stibosystems_comstep_TermType_UnitID', _module_typeBindings.StepUnitID)
    __UnitID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7781, 8)
    __UnitID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7781, 8)
    
    UnitID = property(__UnitID.value, __UnitID.set, None, None)

    
    # Attribute StartDate uses Python identifier StartDate
    __StartDate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'StartDate'), 'StartDate', '__httpwww_stibosystems_comstep_TermType_StartDate', pyxb.binding.datatypes.string)
    __StartDate._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7782, 8)
    __StartDate._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7782, 8)
    
    StartDate = property(__StartDate.value, __StartDate.set, None, None)

    
    # Attribute LotSize uses Python identifier LotSize
    __LotSize = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LotSize'), 'LotSize', '__httpwww_stibosystems_comstep_TermType_LotSize', pyxb.binding.datatypes.string)
    __LotSize._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7783, 8)
    __LotSize._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7783, 8)
    
    LotSize = property(__LotSize.value, __LotSize.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __MaximumQuantity.name() : __MaximumQuantity,
        __EndDate.name() : __EndDate,
        __TermsListID.name() : __TermsListID,
        __MinimumQuantity.name() : __MinimumQuantity,
        __LeadTime.name() : __LeadTime,
        __UnitID.name() : __UnitID,
        __StartDate.name() : __StartDate,
        __LotSize.name() : __LotSize
    })
_module_typeBindings.TermType = TermType
Namespace.addCategoryObject('typeBinding', 'TermType', TermType)


# Complex type {http://www.stibosystems.com/step}TermsListLinkType with content type EMPTY
class TermsListLinkType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}TermsListLinkType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TermsListLinkType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7785, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute TermsListID uses Python identifier TermsListID
    __TermsListID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TermsListID'), 'TermsListID', '__httpwww_stibosystems_comstep_TermsListLinkType_TermsListID', _module_typeBindings.StepTermsListID, required=True)
    __TermsListID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7786, 8)
    __TermsListID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7786, 8)
    
    TermsListID = property(__TermsListID.value, __TermsListID.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __TermsListID.name() : __TermsListID
    })
_module_typeBindings.TermsListLinkType = TermsListLinkType
Namespace.addCategoryObject('typeBinding', 'TermsListLinkType', TermsListLinkType)


# Complex type {http://www.stibosystems.com/step}TransformationLookupTableConfigurationType with content type ELEMENT_ONLY
class TransformationLookupTableConfigurationType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a transformation lookup table in STEP.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TransformationLookupTableConfigurationType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7809, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_TransformationLookupTableConfigurationType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7816, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_TransformationLookupTableConfigurationType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7817, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}ClassificationReference uses Python identifier ClassificationReference
    __ClassificationReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClassificationReference'), 'ClassificationReference', '__httpwww_stibosystems_comstep_TransformationLookupTableConfigurationType_httpwww_stibosystems_comstepClassificationReference', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7818, 12), )

    
    ClassificationReference = property(__ClassificationReference.value, __ClassificationReference.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Configuration uses Python identifier Configuration
    __Configuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), 'Configuration', '__httpwww_stibosystems_comstep_TransformationLookupTableConfigurationType_httpwww_stibosystems_comstepConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7820, 12), )

    
    Configuration = property(__Configuration.value, __Configuration.set, None, '\n                        The configruation in encoded form.\n                    ')

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_TransformationLookupTableConfigurationType_ID', _module_typeBindings.StepAssetID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7828, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7828, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    The ID. Not required for creation if auto IDs are configured for the object type.\n                ')

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __ClassificationReference.name() : __ClassificationReference,
        __Configuration.name() : __Configuration
    })
    _AttributeMap.update({
        __ID.name() : __ID
    })
_module_typeBindings.TransformationLookupTableConfigurationType = TransformationLookupTableConfigurationType
Namespace.addCategoryObject('typeBinding', 'TransformationLookupTableConfigurationType', TransformationLookupTableConfigurationType)


# Complex type {http://www.stibosystems.com/step}UnitConversionType with content type EMPTY
class UnitConversionType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a conversion from a unit to a base unit (BaseValue = Value * Factor + Offset).
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UnitConversionType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7836, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute Factor uses Python identifier Factor
    __Factor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Factor'), 'Factor', '__httpwww_stibosystems_comstep_UnitConversionType_Factor', pyxb.binding.datatypes.string)
    __Factor._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7842, 8)
    __Factor._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7842, 8)
    
    Factor = property(__Factor.value, __Factor.set, None, '\n                    The factor in converting value to base unit.\n                ')

    
    # Attribute BaseUnitID uses Python identifier BaseUnitID
    __BaseUnitID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'BaseUnitID'), 'BaseUnitID', '__httpwww_stibosystems_comstep_UnitConversionType_BaseUnitID', _module_typeBindings.StepUnitID, required=True)
    __BaseUnitID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7849, 8)
    __BaseUnitID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7849, 8)
    
    BaseUnitID = property(__BaseUnitID.value, __BaseUnitID.set, None, '\n                    The ID of the base unit for this conversion.\n                ')

    
    # Attribute Offset uses Python identifier Offset
    __Offset = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Offset'), 'Offset', '__httpwww_stibosystems_comstep_UnitConversionType_Offset', pyxb.binding.datatypes.string, unicode_default='0')
    __Offset._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7856, 8)
    __Offset._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7856, 8)
    
    Offset = property(__Offset.value, __Offset.set, None, '\n                    The offset in converting value to base unit.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Factor.name() : __Factor,
        __BaseUnitID.name() : __BaseUnitID,
        __Offset.name() : __Offset
    })
_module_typeBindings.UnitConversionType = UnitConversionType
Namespace.addCategoryObject('typeBinding', 'UnitConversionType', UnitConversionType)


# Complex type {http://www.stibosystems.com/step}UnitFamilyType with content type ELEMENT_ONLY
class UnitFamilyType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a unit family / group.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UnitFamilyType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7864, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_UnitFamilyType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7871, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_UnitFamilyType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7872, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Unit uses Python identifier Unit
    __Unit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Unit'), 'Unit', '__httpwww_stibosystems_comstep_UnitFamilyType_httpwww_stibosystems_comstepUnit', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7873, 12), )

    
    Unit = property(__Unit.value, __Unit.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_UnitFamilyType_ID', _module_typeBindings.StepUnitID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7875, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7875, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    The ID of the unit family / group. Not required for creation if auto IDs are configured for the\n                    object type.\n                ')

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_UnitFamilyType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7883, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7883, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_UnitFamilyType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7884, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7884, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_UnitFamilyType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7885, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7885, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __Unit.name() : __Unit
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed
    })
_module_typeBindings.UnitFamilyType = UnitFamilyType
Namespace.addCategoryObject('typeBinding', 'UnitFamilyType', UnitFamilyType)


# Complex type {http://www.stibosystems.com/step}UnitLinkType with content type EMPTY
class UnitLinkType (pyxb.binding.basis.complexTypeDefinition):
    """
                A link to a unit.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UnitLinkType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7887, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute UnitID uses Python identifier UnitID
    __UnitID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UnitID'), 'UnitID', '__httpwww_stibosystems_comstep_UnitLinkType_UnitID', _module_typeBindings.StepUnitID, required=True)
    __UnitID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7893, 8)
    __UnitID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7893, 8)
    
    UnitID = property(__UnitID.value, __UnitID.set, None, '\n                    The ID of the unit.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __UnitID.name() : __UnitID
    })
_module_typeBindings.UnitLinkType = UnitLinkType
Namespace.addCategoryObject('typeBinding', 'UnitLinkType', UnitLinkType)


# Complex type {http://www.stibosystems.com/step}UnitTemplateType with content type MIXED
class UnitTemplateType (pyxb.binding.basis.complexTypeDefinition):
    """
                The template of the unit part of a derived / calculated attribute specification. The template derives to
                the ID of the unit in question.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UnitTemplateType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7914, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_UnitTemplateType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7921, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7921, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, '\n                    Identifies which contexts this object is visible in. If not specified the current context is used.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __QualifierID.name() : __QualifierID
    })
_module_typeBindings.UnitTemplateType = UnitTemplateType
Namespace.addCategoryObject('typeBinding', 'UnitTemplateType', UnitTemplateType)


# Complex type {http://www.stibosystems.com/step}UnitType with content type ELEMENT_ONLY
class UnitType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a unit in STEP.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UnitType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7929, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_UnitType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7936, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}UnitConversion uses Python identifier UnitConversion
    __UnitConversion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UnitConversion'), 'UnitConversion', '__httpwww_stibosystems_comstep_UnitType_httpwww_stibosystems_comstepUnitConversion', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7937, 12), )

    
    UnitConversion = property(__UnitConversion.value, __UnitConversion.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_UnitType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7938, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}GDSNReceiverUnit uses Python identifier GDSNReceiverUnit
    __GDSNReceiverUnit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GDSNReceiverUnit'), 'GDSNReceiverUnit', '__httpwww_stibosystems_comstep_UnitType_httpwww_stibosystems_comstepGDSNReceiverUnit', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7939, 12), )

    
    GDSNReceiverUnit = property(__GDSNReceiverUnit.value, __GDSNReceiverUnit.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_UnitType_ID', _module_typeBindings.StepUnitID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7941, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7941, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    ID of the unit. Not required for creation if auto IDs are configured for the unit object type.\n                ')

    
    # Attribute ParentID uses Python identifier ParentID
    __ParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ParentID'), 'ParentID', '__httpwww_stibosystems_comstep_UnitType_ParentID', _module_typeBindings.StepUnitID)
    __ParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7948, 8)
    __ParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7948, 8)
    
    ParentID = property(__ParentID.value, __ParentID.set, None, '\n                    ID of the parent unit group. Not required for creation if the unit element is nested inside a unit\n                    family element.\n                ')

    
    # Attribute GDSNPublisherUnitID uses Python identifier GDSNPublisherUnitID
    __GDSNPublisherUnitID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'GDSNPublisherUnitID'), 'GDSNPublisherUnitID', '__httpwww_stibosystems_comstep_UnitType_GDSNPublisherUnitID', _module_typeBindings.StepUnitID)
    __GDSNPublisherUnitID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7956, 8)
    __GDSNPublisherUnitID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7956, 8)
    
    GDSNPublisherUnitID = property(__GDSNPublisherUnitID.value, __GDSNPublisherUnitID.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_UnitType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7957, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7957, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_UnitType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7958, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7958, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_UnitType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7959, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7959, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __UnitConversion.name() : __UnitConversion,
        __MetaData.name() : __MetaData,
        __GDSNReceiverUnit.name() : __GDSNReceiverUnit
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __ParentID.name() : __ParentID,
        __GDSNPublisherUnitID.name() : __GDSNPublisherUnitID,
        __Referenced.name() : __Referenced,
        __Selected.name() : __Selected,
        __Changed.name() : __Changed
    })
_module_typeBindings.UnitType = UnitType
Namespace.addCategoryObject('typeBinding', 'UnitType', UnitType)


# Complex type {http://www.stibosystems.com/step}UserType with content type ELEMENT_ONLY
class UserType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a user object in STEP. Notice that passwords cannot be exported or imported.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UserType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7961, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_UserType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7968, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_UserType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7969, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}UserGroupLink uses Python identifier UserGroupLink
    __UserGroupLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UserGroupLink'), 'UserGroupLink', '__httpwww_stibosystems_comstep_UserType_httpwww_stibosystems_comstepUserGroupLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7970, 12), )

    
    UserGroupLink = property(__UserGroupLink.value, __UserGroupLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}GUISetup uses Python identifier GUISetup
    __GUISetup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GUISetup'), 'GUISetup', '__httpwww_stibosystems_comstep_UserType_httpwww_stibosystems_comstepGUISetup', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7971, 12), )

    
    GUISetup = property(__GUISetup.value, __GUISetup.set, None, None)

    
    # Element {http://www.stibosystems.com/step}GUITop uses Python identifier GUITop
    __GUITop = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GUITop'), 'GUITop', '__httpwww_stibosystems_comstep_UserType_httpwww_stibosystems_comstepGUITop', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7972, 12), )

    
    GUITop = property(__GUITop.value, __GUITop.set, None, None)

    
    # Element {http://www.stibosystems.com/step}SystemSetup uses Python identifier SystemSetup
    __SystemSetup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SystemSetup'), 'SystemSetup', '__httpwww_stibosystems_comstep_UserType_httpwww_stibosystems_comstepSystemSetup', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7973, 12), )

    
    SystemSetup = property(__SystemSetup.value, __SystemSetup.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DimensionLink uses Python identifier DimensionLink
    __DimensionLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink'), 'DimensionLink', '__httpwww_stibosystems_comstep_UserType_httpwww_stibosystems_comstepDimensionLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7974, 12), )

    
    DimensionLink = property(__DimensionLink.value, __DimensionLink.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_UserType_ID', _module_typeBindings.StepUserID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7976, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7976, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute Password uses Python identifier Password
    __Password = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Password'), 'Password', '__httpwww_stibosystems_comstep_UserType_Password', pyxb.binding.datatypes.string)
    __Password._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7977, 8)
    __Password._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7977, 8)
    
    Password = property(__Password.value, __Password.set, None, '\n                    No longer supported.\n                ')

    
    # Attribute ForceAuthentication uses Python identifier ForceAuthentication
    __ForceAuthentication = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ForceAuthentication'), 'ForceAuthentication', '__httpwww_stibosystems_comstep_UserType_ForceAuthentication', pyxb.binding.datatypes.boolean, unicode_default='false')
    __ForceAuthentication._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7984, 8)
    __ForceAuthentication._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7984, 8)
    
    ForceAuthentication = property(__ForceAuthentication.value, __ForceAuthentication.set, None, None)

    
    # Attribute EMail uses Python identifier EMail
    __EMail = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'EMail'), 'EMail', '__httpwww_stibosystems_comstep_UserType_EMail', pyxb.binding.datatypes.string)
    __EMail._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7985, 8)
    __EMail._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7985, 8)
    
    EMail = property(__EMail.value, __EMail.set, None, None)

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_UserType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7986, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7986, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_UserType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7987, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7987, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_UserType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7988, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7988, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __UserGroupLink.name() : __UserGroupLink,
        __GUISetup.name() : __GUISetup,
        __GUITop.name() : __GUITop,
        __SystemSetup.name() : __SystemSetup,
        __DimensionLink.name() : __DimensionLink
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __Password.name() : __Password,
        __ForceAuthentication.name() : __ForceAuthentication,
        __EMail.name() : __EMail,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed
    })
_module_typeBindings.UserType = UserType
Namespace.addCategoryObject('typeBinding', 'UserType', UserType)


# Complex type {http://www.stibosystems.com/step}UserGroupType with content type ELEMENT_ONLY
class UserGroupType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a user group in STEP.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UserGroupType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7990, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_UserGroupType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7997, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}UserGroup uses Python identifier UserGroup
    __UserGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UserGroup'), 'UserGroup', '__httpwww_stibosystems_comstep_UserGroupType_httpwww_stibosystems_comstepUserGroup', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7998, 12), )

    
    UserGroup = property(__UserGroup.value, __UserGroup.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_UserGroupType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7999, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}PrivilegeRule uses Python identifier PrivilegeRule
    __PrivilegeRule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PrivilegeRule'), 'PrivilegeRule', '__httpwww_stibosystems_comstep_UserGroupType_httpwww_stibosystems_comstepPrivilegeRule', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8000, 12), )

    
    PrivilegeRule = property(__PrivilegeRule.value, __PrivilegeRule.set, None, None)

    
    # Element {http://www.stibosystems.com/step}GUISetup uses Python identifier GUISetup
    __GUISetup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GUISetup'), 'GUISetup', '__httpwww_stibosystems_comstep_UserGroupType_httpwww_stibosystems_comstepGUISetup', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8001, 12), )

    
    GUISetup = property(__GUISetup.value, __GUISetup.set, None, None)

    
    # Element {http://www.stibosystems.com/step}GUITop uses Python identifier GUITop
    __GUITop = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GUITop'), 'GUITop', '__httpwww_stibosystems_comstep_UserGroupType_httpwww_stibosystems_comstepGUITop', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8002, 12), )

    
    GUITop = property(__GUITop.value, __GUITop.set, None, None)

    
    # Attribute ReadOnly uses Python identifier ReadOnly
    __ReadOnly = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ReadOnly'), 'ReadOnly', '__httpwww_stibosystems_comstep_UserGroupType_ReadOnly', pyxb.binding.datatypes.boolean, unicode_default='false')
    __ReadOnly._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8004, 8)
    __ReadOnly._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8004, 8)
    
    ReadOnly = property(__ReadOnly.value, __ReadOnly.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_UserGroupType_ID', _module_typeBindings.StepUserGroupID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8005, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8005, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute LDAPSynchronizationID uses Python identifier LDAPSynchronizationID
    __LDAPSynchronizationID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LDAPSynchronizationID'), 'LDAPSynchronizationID', '__httpwww_stibosystems_comstep_UserGroupType_LDAPSynchronizationID', pyxb.binding.datatypes.string)
    __LDAPSynchronizationID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8006, 8)
    __LDAPSynchronizationID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8006, 8)
    
    LDAPSynchronizationID = property(__LDAPSynchronizationID.value, __LDAPSynchronizationID.set, None, '\n                    ID for LDAP synchronization.\n                ')

    
    # Attribute VendorRoot uses Python identifier VendorRoot
    __VendorRoot = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'VendorRoot'), 'VendorRoot', '__httpwww_stibosystems_comstep_UserGroupType_VendorRoot', pyxb.binding.datatypes.string)
    __VendorRoot._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8013, 8)
    __VendorRoot._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8013, 8)
    
    VendorRoot = property(__VendorRoot.value, __VendorRoot.set, None, '\n                    Marks this user group as a supplier user group. Value is the ID of the vendor / supplier specific\n                    classification.\n                ')

    
    # Attribute ParentID uses Python identifier ParentID
    __ParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ParentID'), 'ParentID', '__httpwww_stibosystems_comstep_UserGroupType_ParentID', _module_typeBindings.StepUserGroupID)
    __ParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8021, 8)
    __ParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8021, 8)
    
    ParentID = property(__ParentID.value, __ParentID.set, None, '\n                    The parent group, if the group is a part of a hierarchy.\n                ')

    
    # Attribute MultifactorAuthenticationEnabled uses Python identifier MultifactorAuthenticationEnabled
    __MultifactorAuthenticationEnabled = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MultifactorAuthenticationEnabled'), 'MultifactorAuthenticationEnabled', '__httpwww_stibosystems_comstep_UserGroupType_MultifactorAuthenticationEnabled', pyxb.binding.datatypes.boolean, unicode_default='false')
    __MultifactorAuthenticationEnabled._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8028, 8)
    __MultifactorAuthenticationEnabled._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8028, 8)
    
    MultifactorAuthenticationEnabled = property(__MultifactorAuthenticationEnabled.value, __MultifactorAuthenticationEnabled.set, None, None)

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_UserGroupType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8029, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8029, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_UserGroupType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8030, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8030, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_UserGroupType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8031, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8031, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __UserGroup.name() : __UserGroup,
        __MetaData.name() : __MetaData,
        __PrivilegeRule.name() : __PrivilegeRule,
        __GUISetup.name() : __GUISetup,
        __GUITop.name() : __GUITop
    })
    _AttributeMap.update({
        __ReadOnly.name() : __ReadOnly,
        __ID.name() : __ID,
        __LDAPSynchronizationID.name() : __LDAPSynchronizationID,
        __VendorRoot.name() : __VendorRoot,
        __ParentID.name() : __ParentID,
        __MultifactorAuthenticationEnabled.name() : __MultifactorAuthenticationEnabled,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed
    })
_module_typeBindings.UserGroupType = UserGroupType
Namespace.addCategoryObject('typeBinding', 'UserGroupType', UserGroupType)


# Complex type {http://www.stibosystems.com/step}UserGroupLinkType with content type EMPTY
class UserGroupLinkType (pyxb.binding.basis.complexTypeDefinition):
    """
                A link to a user group.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UserGroupLinkType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8033, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute UserGroupID uses Python identifier UserGroupID
    __UserGroupID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserGroupID'), 'UserGroupID', '__httpwww_stibosystems_comstep_UserGroupLinkType_UserGroupID', _module_typeBindings.StepUserGroupID, required=True)
    __UserGroupID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8039, 8)
    __UserGroupID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8039, 8)
    
    UserGroupID = property(__UserGroupID.value, __UserGroupID.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __UserGroupID.name() : __UserGroupID
    })
_module_typeBindings.UserGroupLinkType = UserGroupLinkType
Namespace.addCategoryObject('typeBinding', 'UserGroupLinkType', UserGroupLinkType)


# Complex type {http://www.stibosystems.com/step}UserTypeType with content type ELEMENT_ONLY
class UserTypeType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents an object type in STEP.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UserTypeType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8061, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_UserTypeType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8068, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Icon uses Python identifier Icon
    __Icon = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Icon'), 'Icon', '__httpwww_stibosystems_comstep_UserTypeType_httpwww_stibosystems_comstepIcon', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8069, 12), )

    
    Icon = property(__Icon.value, __Icon.set, None, '\n                        Base64 encoded custom icon.\n                    ')

    
    # Element {http://www.stibosystems.com/step}VisibleTermFields uses Python identifier VisibleTermFields
    __VisibleTermFields = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VisibleTermFields'), 'VisibleTermFields', '__httpwww_stibosystems_comstep_UserTypeType_httpwww_stibosystems_comstepVisibleTermFields', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8076, 12), )

    
    VisibleTermFields = property(__VisibleTermFields.value, __VisibleTermFields.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_UserTypeType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8077, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DimensionLink uses Python identifier DimensionLink
    __DimensionLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink'), 'DimensionLink', '__httpwww_stibosystems_comstep_UserTypeType_httpwww_stibosystems_comstepDimensionLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8078, 12), )

    
    DimensionLink = property(__DimensionLink.value, __DimensionLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}UserTypeLink uses Python identifier UserTypeLink
    __UserTypeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink'), 'UserTypeLink', '__httpwww_stibosystems_comstep_UserTypeType_httpwww_stibosystems_comstepUserTypeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8079, 12), )

    
    UserTypeLink = property(__UserTypeLink.value, __UserTypeLink.set, None, '\n                        Link to a parent object type.\n                    ')

    
    # Element {http://www.stibosystems.com/step}AttributeLink uses Python identifier AttributeLink
    __AttributeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink'), 'AttributeLink', '__httpwww_stibosystems_comstep_UserTypeType_httpwww_stibosystems_comstepAttributeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8086, 12), )

    
    AttributeLink = property(__AttributeLink.value, __AttributeLink.set, None, '\n                        Represents an attribute valid for this object type. Export only. Has no effect during import.\n                        Use Attribute/UserTypeLink instead to maintain the attribute validity with imports.\n                    ')

    
    # Element {http://www.stibosystems.com/step}Validation uses Python identifier Validation
    __Validation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Validation'), 'Validation', '__httpwww_stibosystems_comstep_UserTypeType_httpwww_stibosystems_comstepValidation', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8094, 12), )

    
    Validation = property(__Validation.value, __Validation.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MIMEType uses Python identifier MIMEType
    __MIMEType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MIMEType'), 'MIMEType', '__httpwww_stibosystems_comstep_UserTypeType_httpwww_stibosystems_comstepMIMEType', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8095, 12), )

    
    MIMEType = property(__MIMEType.value, __MIMEType.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_UserTypeType_ID', _module_typeBindings.StepObjectTypeID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8097, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8097, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute AllowOverlappingTerms uses Python identifier AllowOverlappingTerms
    __AllowOverlappingTerms = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AllowOverlappingTerms'), 'AllowOverlappingTerms', '__httpwww_stibosystems_comstep_UserTypeType_AllowOverlappingTerms', pyxb.binding.datatypes.boolean)
    __AllowOverlappingTerms._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8098, 8)
    __AllowOverlappingTerms._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8098, 8)
    
    AllowOverlappingTerms = property(__AllowOverlappingTerms.value, __AllowOverlappingTerms.set, None, None)

    
    # Attribute AllowQuarkTemplate uses Python identifier AllowQuarkTemplate
    __AllowQuarkTemplate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AllowQuarkTemplate'), 'AllowQuarkTemplate', '__httpwww_stibosystems_comstep_UserTypeType_AllowQuarkTemplate', pyxb.binding.datatypes.boolean)
    __AllowQuarkTemplate._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8099, 8)
    __AllowQuarkTemplate._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8099, 8)
    
    AllowQuarkTemplate = property(__AllowQuarkTemplate.value, __AllowQuarkTemplate.set, None, None)

    
    # Attribute AllowInDesignTemplate uses Python identifier AllowInDesignTemplate
    __AllowInDesignTemplate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AllowInDesignTemplate'), 'AllowInDesignTemplate', '__httpwww_stibosystems_comstep_UserTypeType_AllowInDesignTemplate', pyxb.binding.datatypes.boolean)
    __AllowInDesignTemplate._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8100, 8)
    __AllowInDesignTemplate._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8100, 8)
    
    AllowInDesignTemplate = property(__AllowInDesignTemplate.value, __AllowInDesignTemplate.set, None, None)

    
    # Attribute Revisability uses Python identifier Revisability
    __Revisability = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Revisability'), 'Revisability', '__httpwww_stibosystems_comstep_UserTypeType_Revisability', _module_typeBindings.EntityRevisabilityType)
    __Revisability._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8101, 8)
    __Revisability._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8101, 8)
    
    Revisability = property(__Revisability.value, __Revisability.set, None, None)

    
    # Attribute IsCategory uses Python identifier IsCategory
    __IsCategory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsCategory'), 'IsCategory', '__httpwww_stibosystems_comstep_UserTypeType_IsCategory', pyxb.binding.datatypes.boolean)
    __IsCategory._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8102, 8)
    __IsCategory._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8102, 8)
    
    IsCategory = property(__IsCategory.value, __IsCategory.set, None, None)

    
    # Attribute DefaultProfileConfiguration uses Python identifier DefaultProfileConfiguration
    __DefaultProfileConfiguration = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DefaultProfileConfiguration'), 'DefaultProfileConfiguration', '__httpwww_stibosystems_comstep_UserTypeType_DefaultProfileConfiguration', pyxb.binding.datatypes.string)
    __DefaultProfileConfiguration._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8103, 8)
    __DefaultProfileConfiguration._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8103, 8)
    
    DefaultProfileConfiguration = property(__DefaultProfileConfiguration.value, __DefaultProfileConfiguration.set, None, None)

    
    # Attribute ClassificationOwnsProductLinks uses Python identifier ClassificationOwnsProductLinks
    __ClassificationOwnsProductLinks = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ClassificationOwnsProductLinks'), 'ClassificationOwnsProductLinks', '__httpwww_stibosystems_comstep_UserTypeType_ClassificationOwnsProductLinks', pyxb.binding.datatypes.boolean)
    __ClassificationOwnsProductLinks._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8104, 8)
    __ClassificationOwnsProductLinks._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8104, 8)
    
    ClassificationOwnsProductLinks = property(__ClassificationOwnsProductLinks.value, __ClassificationOwnsProductLinks.set, None, None)

    
    # Attribute NamePattern uses Python identifier NamePattern
    __NamePattern = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'NamePattern'), 'NamePattern', '__httpwww_stibosystems_comstep_UserTypeType_NamePattern', pyxb.binding.datatypes.string)
    __NamePattern._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8105, 8)
    __NamePattern._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8105, 8)
    
    NamePattern = property(__NamePattern.value, __NamePattern.set, None, None)

    
    # Attribute IDPattern uses Python identifier IDPattern
    __IDPattern = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IDPattern'), 'IDPattern', '__httpwww_stibosystems_comstep_UserTypeType_IDPattern', pyxb.binding.datatypes.string)
    __IDPattern._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8106, 8)
    __IDPattern._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8106, 8)
    
    IDPattern = property(__IDPattern.value, __IDPattern.set, None, None)

    
    # Attribute ManuallySorted uses Python identifier ManuallySorted
    __ManuallySorted = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ManuallySorted'), 'ManuallySorted', '__httpwww_stibosystems_comstep_UserTypeType_ManuallySorted', pyxb.binding.datatypes.boolean)
    __ManuallySorted._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8107, 8)
    __ManuallySorted._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8107, 8)
    
    ManuallySorted = property(__ManuallySorted.value, __ManuallySorted.set, None, None)

    
    # Attribute ReferenceTargetLockPolicy uses Python identifier ReferenceTargetLockPolicy
    __ReferenceTargetLockPolicy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ReferenceTargetLockPolicy'), 'ReferenceTargetLockPolicy', '__httpwww_stibosystems_comstep_UserTypeType_ReferenceTargetLockPolicy', _module_typeBindings.ReferenceTargetLockPolicyType)
    __ReferenceTargetLockPolicy._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8108, 8)
    __ReferenceTargetLockPolicy._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8108, 8)
    
    ReferenceTargetLockPolicy = property(__ReferenceTargetLockPolicy.value, __ReferenceTargetLockPolicy.set, None, None)

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_UserTypeType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8109, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8109, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_UserTypeType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8110, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8110, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_UserTypeType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8111, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8111, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    
    # Attribute Deleted uses Python identifier Deleted
    __Deleted = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Deleted'), 'Deleted', '__httpwww_stibosystems_comstep_UserTypeType_Deleted', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Deleted._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8112, 8)
    __Deleted._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8112, 8)
    
    Deleted = property(__Deleted.value, __Deleted.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __Icon.name() : __Icon,
        __VisibleTermFields.name() : __VisibleTermFields,
        __MetaData.name() : __MetaData,
        __DimensionLink.name() : __DimensionLink,
        __UserTypeLink.name() : __UserTypeLink,
        __AttributeLink.name() : __AttributeLink,
        __Validation.name() : __Validation,
        __MIMEType.name() : __MIMEType
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __AllowOverlappingTerms.name() : __AllowOverlappingTerms,
        __AllowQuarkTemplate.name() : __AllowQuarkTemplate,
        __AllowInDesignTemplate.name() : __AllowInDesignTemplate,
        __Revisability.name() : __Revisability,
        __IsCategory.name() : __IsCategory,
        __DefaultProfileConfiguration.name() : __DefaultProfileConfiguration,
        __ClassificationOwnsProductLinks.name() : __ClassificationOwnsProductLinks,
        __NamePattern.name() : __NamePattern,
        __IDPattern.name() : __IDPattern,
        __ManuallySorted.name() : __ManuallySorted,
        __ReferenceTargetLockPolicy.name() : __ReferenceTargetLockPolicy,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed,
        __Deleted.name() : __Deleted
    })
_module_typeBindings.UserTypeType = UserTypeType
Namespace.addCategoryObject('typeBinding', 'UserTypeType', UserTypeType)


# Complex type {http://www.stibosystems.com/step}UserTypeLinkType with content type EMPTY
class UserTypeLinkType (pyxb.binding.basis.complexTypeDefinition):
    """
                Links an attribute to an object type of which objects are allowed to have values for the attribute.
                Also used for linking reference source types to reference types.
                Notice that in AssetCrossReferenceTypeType, ClassificationCrossReferenceTypeType,
                EntityCrossReferenceTypeType and ProductCrossReferenceTypeType this can link to a DataContainerType.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UserTypeLinkType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8114, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute UserTypeID uses Python identifier UserTypeID
    __UserTypeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserTypeID'), 'UserTypeID', '__httpwww_stibosystems_comstep_UserTypeLinkType_UserTypeID', _module_typeBindings.StepObjectTypeID, required=True)
    __UserTypeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8123, 8)
    __UserTypeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8123, 8)
    
    UserTypeID = property(__UserTypeID.value, __UserTypeID.set, None, '\n                    The ID of the object type.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __UserTypeID.name() : __UserTypeID
    })
_module_typeBindings.UserTypeLinkType = UserTypeLinkType
Namespace.addCategoryObject('typeBinding', 'UserTypeLinkType', UserTypeLinkType)


# Complex type {http://www.stibosystems.com/step}ValidObjectTypeType with content type EMPTY
class ValidObjectTypeType (pyxb.binding.basis.complexTypeDefinition):
    """
                A link to an object type valid for the enclosing element (e.g. a business rules).
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ValidObjectTypeType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8205, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_ValidObjectTypeType_ID', _module_typeBindings.StepObjectTypeID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8211, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8211, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    The ID of the valid object type.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ID.name() : __ID
    })
_module_typeBindings.ValidObjectTypeType = ValidObjectTypeType
Namespace.addCategoryObject('typeBinding', 'ValidObjectTypeType', ValidObjectTypeType)


# Complex type {http://www.stibosystems.com/step}ValueType with content type MIXED
class ValueType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a value for an attribute.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ValueType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8253, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute UnitID uses Python identifier UnitID
    __UnitID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UnitID'), 'UnitID', '__httpwww_stibosystems_comstep_ValueType_UnitID', _module_typeBindings.StepUnitID)
    __UnitID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8259, 8)
    __UnitID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8259, 8)
    
    UnitID = property(__UnitID.value, __UnitID.set, None, '\n                    The ID of the unit of this value. Alternatively the UnitName can be used. However be aware that the\n                    name of a unit might not be unique, so if possible use the UnitID.\n                ')

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_ValueType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8267, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8267, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    
    # Attribute LOVQualifierID uses Python identifier LOVQualifierID
    __LOVQualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LOVQualifierID'), 'LOVQualifierID', '__httpwww_stibosystems_comstep_ValueType_LOVQualifierID', _module_typeBindings.StepQualifierID)
    __LOVQualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8268, 8)
    __LOVQualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8268, 8)
    
    LOVQualifierID = property(__LOVQualifierID.value, __LOVQualifierID.set, None, '\n                    Qualifier information for values for LOV based attributes for which the LOV is dimension dependent.\n                ')

    
    # Attribute AttributeID uses Python identifier AttributeID
    __AttributeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AttributeID'), 'AttributeID', '__httpwww_stibosystems_comstep_ValueType_AttributeID', _module_typeBindings.StepAttributeID)
    __AttributeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8275, 8)
    __AttributeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8275, 8)
    
    AttributeID = property(__AttributeID.value, __AttributeID.set, None, '\n                    The ID of the attribute of this value. Can be omitted if value is part of a MultiValue element.\n                ')

    
    # Attribute DerivedContextID uses Python identifier DerivedContextID
    __DerivedContextID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DerivedContextID'), 'DerivedContextID', '__httpwww_stibosystems_comstep_ValueType_DerivedContextID', _module_typeBindings.StepQualifierID)
    __DerivedContextID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8282, 8)
    __DerivedContextID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8282, 8)
    
    DerivedContextID = property(__DerivedContextID.value, __DerivedContextID.set, None, '\n                    Identifies the calculation context for derived / calculated attribute values.\n                ')

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_ValueType_ID', _module_typeBindings.LOVValueID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8289, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8289, 8)
    
    ID = property(__ID.value, __ID.set, None, '\n                    Value ID for LOV based attributes for which the LOV uses value IDs.\n                ')

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_ValueType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8296, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8296, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, '\n                    Identifies which contexts this value is visible in. If not specified during import, the current\n                    context is used.\n                ')

    
    # Attribute InheritedFrom uses Python identifier InheritedFrom
    __InheritedFrom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'InheritedFrom'), 'InheritedFrom', '__httpwww_stibosystems_comstep_ValueType_InheritedFrom', pyxb.binding.datatypes.string)
    __InheritedFrom._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8304, 8)
    __InheritedFrom._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8304, 8)
    
    InheritedFrom = property(__InheritedFrom.value, __InheritedFrom.set, None, None)

    
    # Attribute Inherited uses Python identifier Inherited
    __Inherited = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Inherited'), 'Inherited', '__httpwww_stibosystems_comstep_ValueType_Inherited', pyxb.binding.datatypes.string)
    __Inherited._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8305, 8)
    __Inherited._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8305, 8)
    
    Inherited = property(__Inherited.value, __Inherited.set, None, None)

    
    # Attribute Derived uses Python identifier Derived
    __Derived = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Derived'), 'Derived', '__httpwww_stibosystems_comstep_ValueType_Derived', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Derived._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8306, 8)
    __Derived._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8306, 8)
    
    Derived = property(__Derived.value, __Derived.set, None, '\n                    Is the value derived / calculated or not.\n                ')

    
    # Attribute UnitName uses Python identifier UnitName
    __UnitName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UnitName'), 'UnitName', '__httpwww_stibosystems_comstep_ValueType_UnitName', pyxb.binding.datatypes.string)
    __UnitName._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8313, 8)
    __UnitName._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8313, 8)
    
    UnitName = property(__UnitName.value, __UnitName.set, None, '\n                    The name of the unit of this value. Use UnitID instead to avoid ambiguity.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __UnitID.name() : __UnitID,
        __Changed.name() : __Changed,
        __LOVQualifierID.name() : __LOVQualifierID,
        __AttributeID.name() : __AttributeID,
        __DerivedContextID.name() : __DerivedContextID,
        __ID.name() : __ID,
        __QualifierID.name() : __QualifierID,
        __InheritedFrom.name() : __InheritedFrom,
        __Inherited.name() : __Inherited,
        __Derived.name() : __Derived,
        __UnitName.name() : __UnitName
    })
_module_typeBindings.ValueType = ValueType
Namespace.addCategoryObject('typeBinding', 'ValueType', ValueType)


# Complex type {http://www.stibosystems.com/step}ValueGroupType with content type ELEMENT_ONLY
class ValueGroupType (pyxb.binding.basis.complexTypeDefinition):
    """
                This element encapsulates a number of qualifies specific values for the same logical value in a LOV.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ValueGroupType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8327, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Value uses Python identifier Value
    __Value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Value'), 'Value', '__httpwww_stibosystems_comstep_ValueGroupType_httpwww_stibosystems_comstepValue', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8334, 12), )

    
    Value = property(__Value.value, __Value.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_ValueGroupType_ID', _module_typeBindings.LOVValueID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8336, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8336, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute Inherited uses Python identifier Inherited
    __Inherited = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Inherited'), 'Inherited', '__httpwww_stibosystems_comstep_ValueGroupType_Inherited', pyxb.binding.datatypes.string)
    __Inherited._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8337, 8)
    __Inherited._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8337, 8)
    
    Inherited = property(__Inherited.value, __Inherited.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_ValueGroupType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8338, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8338, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    
    # Attribute AttributeID uses Python identifier AttributeID
    __AttributeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AttributeID'), 'AttributeID', '__httpwww_stibosystems_comstep_ValueGroupType_AttributeID', _module_typeBindings.StepAttributeID)
    __AttributeID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8339, 8)
    __AttributeID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8339, 8)
    
    AttributeID = property(__AttributeID.value, __AttributeID.set, None, None)

    _ElementMap.update({
        __Value.name() : __Value
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __Inherited.name() : __Inherited,
        __Changed.name() : __Changed,
        __AttributeID.name() : __AttributeID
    })
_module_typeBindings.ValueGroupType = ValueGroupType
Namespace.addCategoryObject('typeBinding', 'ValueGroupType', ValueGroupType)


# Complex type {http://www.stibosystems.com/step}ValueTemplateType with content type MIXED
class ValueTemplateType (pyxb.binding.basis.complexTypeDefinition):
    """
                The template of the value part of a derived / calculated attribute specification.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ValueTemplateType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8353, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_ValueTemplateType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8359, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8359, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, '\n                    Identifies which contexts this object is visible in. If not specified the current context is used.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __QualifierID.name() : __QualifierID
    })
_module_typeBindings.ValueTemplateType = ValueTemplateType
Namespace.addCategoryObject('typeBinding', 'ValueTemplateType', ValueTemplateType)


# Complex type {http://www.stibosystems.com/step}VersionType with content type ELEMENT_ONLY
class VersionType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}VersionType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VersionType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8371, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_VersionType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8373, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_VersionType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8374, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}TermsListLink uses Python identifier TermsListLink
    __TermsListLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TermsListLink'), 'TermsListLink', '__httpwww_stibosystems_comstep_VersionType_httpwww_stibosystems_comstepTermsListLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8375, 12), )

    
    TermsListLink = property(__TermsListLink.value, __TermsListLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}LayerMapping uses Python identifier LayerMapping
    __LayerMapping = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LayerMapping'), 'LayerMapping', '__httpwww_stibosystems_comstep_VersionType_httpwww_stibosystems_comstepLayerMapping', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8376, 12), )

    
    LayerMapping = property(__LayerMapping.value, __LayerMapping.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_VersionType_ID', _module_typeBindings.StepID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8378, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8378, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute ContextID uses Python identifier ContextID
    __ContextID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ContextID'), 'ContextID', '__httpwww_stibosystems_comstep_VersionType_ContextID', _module_typeBindings.StepQualifierID, required=True)
    __ContextID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8379, 8)
    __ContextID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8379, 8)
    
    ContextID = property(__ContextID.value, __ContextID.set, None, None)

    
    # Attribute IsMaster uses Python identifier IsMaster
    __IsMaster = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsMaster'), 'IsMaster', '__httpwww_stibosystems_comstep_VersionType_IsMaster', pyxb.binding.datatypes.string)
    __IsMaster._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8380, 8)
    __IsMaster._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8380, 8)
    
    IsMaster = property(__IsMaster.value, __IsMaster.set, None, None)

    
    # Attribute WorkspaceID uses Python identifier WorkspaceID
    __WorkspaceID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'WorkspaceID'), 'WorkspaceID', '__httpwww_stibosystems_comstep_VersionType_WorkspaceID', _module_typeBindings.StepID, required=True)
    __WorkspaceID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8381, 8)
    __WorkspaceID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8381, 8)
    
    WorkspaceID = property(__WorkspaceID.value, __WorkspaceID.set, None, None)

    
    # Attribute ParentID uses Python identifier ParentID
    __ParentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ParentID'), 'ParentID', '__httpwww_stibosystems_comstep_VersionType_ParentID', _module_typeBindings.StepID)
    __ParentID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8382, 8)
    __ParentID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8382, 8)
    
    ParentID = property(__ParentID.value, __ParentID.set, None, '\n                    The parent publication of this version. Only required if version not available in current context.\n                ')

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __TermsListLink.name() : __TermsListLink,
        __LayerMapping.name() : __LayerMapping
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __ContextID.name() : __ContextID,
        __IsMaster.name() : __IsMaster,
        __WorkspaceID.name() : __WorkspaceID,
        __ParentID.name() : __ParentID
    })
_module_typeBindings.VersionType = VersionType
Namespace.addCategoryObject('typeBinding', 'VersionType', VersionType)


# Complex type {http://www.stibosystems.com/step}WorkspaceCrossReferenceType with content type ELEMENT_ONLY
class WorkspaceCrossReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}WorkspaceCrossReferenceType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'WorkspaceCrossReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8408, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_WorkspaceCrossReferenceType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8410, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_stibosystems_comstep_WorkspaceCrossReferenceType_Type', _module_typeBindings.StepLinkTypeID, required=True)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8412, 8)
    __Type._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8412, 8)
    
    Type = property(__Type.value, __Type.set, None, None)

    
    # Attribute WorkspaceID uses Python identifier WorkspaceID
    __WorkspaceID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'WorkspaceID'), 'WorkspaceID', '__httpwww_stibosystems_comstep_WorkspaceCrossReferenceType_WorkspaceID', _module_typeBindings.StepID, required=True)
    __WorkspaceID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8413, 8)
    __WorkspaceID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8413, 8)
    
    WorkspaceID = property(__WorkspaceID.value, __WorkspaceID.set, None, None)

    
    # Attribute AnalyzerResult uses Python identifier AnalyzerResult
    __AnalyzerResult = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AnalyzerResult'), 'AnalyzerResult', '__httpwww_stibosystems_comstep_WorkspaceCrossReferenceType_AnalyzerResult', pyxb.binding.datatypes.string)
    __AnalyzerResult._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8414, 8)
    __AnalyzerResult._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8414, 8)
    
    AnalyzerResult = property(__AnalyzerResult.value, __AnalyzerResult.set, None, '\n                    @Deprecated, to be removed in a future release.\n                ')

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_WorkspaceCrossReferenceType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8421, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8421, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    
    # Attribute QualifierID uses Python identifier QualifierID
    __QualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'QualifierID'), 'QualifierID', '__httpwww_stibosystems_comstep_WorkspaceCrossReferenceType_QualifierID', _module_typeBindings.StepQualifierID)
    __QualifierID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8422, 8)
    __QualifierID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8422, 8)
    
    QualifierID = property(__QualifierID.value, __QualifierID.set, None, None)

    
    # Attribute Inherited uses Python identifier Inherited
    __Inherited = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Inherited'), 'Inherited', '__httpwww_stibosystems_comstep_WorkspaceCrossReferenceType_Inherited', pyxb.binding.datatypes.integer)
    __Inherited._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8423, 8)
    __Inherited._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8423, 8)
    
    Inherited = property(__Inherited.value, __Inherited.set, None, '\n                    Only relevant during export when nested inside a partial hierarchy. If present during import,\n                    the link is simply ignored. If this attribute is present then link is inherited. Will not\n                    be exported for local links (thus only numbers 1 and upward will be exported - 1 indicating\n                    inherited from immediate parent).\n                    The integer value of this attribute indicates how far up this link is inherited from.\n                    In cross context exports it might be relevant to have this number to find the most relevant link\n                    for a given context.\n                    NOTE: will only inherit inside hierarchy of equal node types - ie. will not inherit from\n                    classification to product hierarchy.\n                ')

    _ElementMap.update({
        __MetaData.name() : __MetaData
    })
    _AttributeMap.update({
        __Type.name() : __Type,
        __WorkspaceID.name() : __WorkspaceID,
        __AnalyzerResult.name() : __AnalyzerResult,
        __Changed.name() : __Changed,
        __QualifierID.name() : __QualifierID,
        __Inherited.name() : __Inherited
    })
_module_typeBindings.WorkspaceCrossReferenceType = WorkspaceCrossReferenceType
Namespace.addCategoryObject('typeBinding', 'WorkspaceCrossReferenceType', WorkspaceCrossReferenceType)


# Complex type {http://www.stibosystems.com/step}WorkspaceCrossReferenceTypeType with content type ELEMENT_ONLY
class WorkspaceCrossReferenceTypeType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.stibosystems.com/step}WorkspaceCrossReferenceTypeType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'WorkspaceCrossReferenceTypeType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8439, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_WorkspaceCrossReferenceTypeType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8441, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_WorkspaceCrossReferenceTypeType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8442, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeLink uses Python identifier AttributeLink
    __AttributeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink'), 'AttributeLink', '__httpwww_stibosystems_comstep_WorkspaceCrossReferenceTypeType_httpwww_stibosystems_comstepAttributeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8443, 12), )

    
    AttributeLink = property(__AttributeLink.value, __AttributeLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}DimensionLink uses Python identifier DimensionLink
    __DimensionLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink'), 'DimensionLink', '__httpwww_stibosystems_comstep_WorkspaceCrossReferenceTypeType_httpwww_stibosystems_comstepDimensionLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8444, 12), )

    
    DimensionLink = property(__DimensionLink.value, __DimensionLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}AttributeGroupLink uses Python identifier AttributeGroupLink
    __AttributeGroupLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), 'AttributeGroupLink', '__httpwww_stibosystems_comstep_WorkspaceCrossReferenceTypeType_httpwww_stibosystems_comstepAttributeGroupLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8445, 12), )

    
    AttributeGroupLink = property(__AttributeGroupLink.value, __AttributeGroupLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}UserTypeLink uses Python identifier UserTypeLink
    __UserTypeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink'), 'UserTypeLink', '__httpwww_stibosystems_comstep_WorkspaceCrossReferenceTypeType_httpwww_stibosystems_comstepUserTypeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8446, 12), )

    
    UserTypeLink = property(__UserTypeLink.value, __UserTypeLink.set, None, None)

    
    # Element {http://www.stibosystems.com/step}TargetUserTypeLink uses Python identifier TargetUserTypeLink
    __TargetUserTypeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TargetUserTypeLink'), 'TargetUserTypeLink', '__httpwww_stibosystems_comstep_WorkspaceCrossReferenceTypeType_httpwww_stibosystems_comstepTargetUserTypeLink', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8447, 12), )

    
    TargetUserTypeLink = property(__TargetUserTypeLink.value, __TargetUserTypeLink.set, None, None)

    
    # Attribute Inherited uses Python identifier Inherited
    __Inherited = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Inherited'), 'Inherited', '__httpwww_stibosystems_comstep_WorkspaceCrossReferenceTypeType_Inherited', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Inherited._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8449, 8)
    __Inherited._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8449, 8)
    
    Inherited = property(__Inherited.value, __Inherited.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_WorkspaceCrossReferenceTypeType_ID', _module_typeBindings.StepLinkTypeID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8450, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8450, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute Revised uses Python identifier Revised
    __Revised = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Revised'), 'Revised', '__httpwww_stibosystems_comstep_WorkspaceCrossReferenceTypeType_Revised', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Revised._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8451, 8)
    __Revised._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8451, 8)
    
    Revised = property(__Revised.value, __Revised.set, None, None)

    
    # Attribute Completeness uses Python identifier Completeness
    __Completeness = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Completeness'), 'Completeness', '__httpwww_stibosystems_comstep_WorkspaceCrossReferenceTypeType_Completeness', pyxb.binding.datatypes.string)
    __Completeness._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8452, 8)
    __Completeness._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8452, 8)
    
    Completeness = property(__Completeness.value, __Completeness.set, None, '\n                    @Deprecated, not used anymore after the introduction of Completeness Metrics in STEP 7.4 (see\n                    documentation on Completeness Metrics and migration from old pre-7.4 completeness functionality).\n                ')

    
    # Attribute MultiValued uses Python identifier MultiValued
    __MultiValued = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MultiValued'), 'MultiValued', '__httpwww_stibosystems_comstep_WorkspaceCrossReferenceTypeType_MultiValued', pyxb.binding.datatypes.boolean, unicode_default='true')
    __MultiValued._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8460, 8)
    __MultiValued._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8460, 8)
    
    MultiValued = property(__MultiValued.value, __MultiValued.set, None, None)

    
    # Attribute Mandatory uses Python identifier Mandatory
    __Mandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Mandatory'), 'Mandatory', '__httpwww_stibosystems_comstep_WorkspaceCrossReferenceTypeType_Mandatory', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Mandatory._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8461, 8)
    __Mandatory._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8461, 8)
    
    Mandatory = property(__Mandatory.value, __Mandatory.set, None, None)

    
    # Attribute Accumulated uses Python identifier Accumulated
    __Accumulated = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Accumulated'), 'Accumulated', '__httpwww_stibosystems_comstep_WorkspaceCrossReferenceTypeType_Accumulated', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Accumulated._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8462, 8)
    __Accumulated._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8462, 8)
    
    Accumulated = property(__Accumulated.value, __Accumulated.set, None, None)

    
    # Attribute Selected uses Python identifier Selected
    __Selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Selected'), 'Selected', '__httpwww_stibosystems_comstep_WorkspaceCrossReferenceTypeType_Selected', pyxb.binding.datatypes.boolean, unicode_default='true')
    __Selected._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8463, 8)
    __Selected._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8463, 8)
    
    Selected = property(__Selected.value, __Selected.set, None, None)

    
    # Attribute Referenced uses Python identifier Referenced
    __Referenced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Referenced'), 'Referenced', '__httpwww_stibosystems_comstep_WorkspaceCrossReferenceTypeType_Referenced', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Referenced._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8464, 8)
    __Referenced._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8464, 8)
    
    Referenced = property(__Referenced.value, __Referenced.set, None, None)

    
    # Attribute Changed uses Python identifier Changed
    __Changed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Changed'), 'Changed', '__httpwww_stibosystems_comstep_WorkspaceCrossReferenceTypeType_Changed', pyxb.binding.datatypes.boolean, unicode_default='false')
    __Changed._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8465, 8)
    __Changed._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8465, 8)
    
    Changed = property(__Changed.value, __Changed.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __AttributeLink.name() : __AttributeLink,
        __DimensionLink.name() : __DimensionLink,
        __AttributeGroupLink.name() : __AttributeGroupLink,
        __UserTypeLink.name() : __UserTypeLink,
        __TargetUserTypeLink.name() : __TargetUserTypeLink
    })
    _AttributeMap.update({
        __Inherited.name() : __Inherited,
        __ID.name() : __ID,
        __Revised.name() : __Revised,
        __Completeness.name() : __Completeness,
        __MultiValued.name() : __MultiValued,
        __Mandatory.name() : __Mandatory,
        __Accumulated.name() : __Accumulated,
        __Selected.name() : __Selected,
        __Referenced.name() : __Referenced,
        __Changed.name() : __Changed
    })
_module_typeBindings.WorkspaceCrossReferenceTypeType = WorkspaceCrossReferenceTypeType
Namespace.addCategoryObject('typeBinding', 'WorkspaceCrossReferenceTypeType', WorkspaceCrossReferenceTypeType)


# Complex type {http://www.stibosystems.com/step}ScheduledProcessType with content type ELEMENT_ONLY
class ScheduledProcessType (pyxb.binding.basis.complexTypeDefinition):
    """
                Represents a scheduled background process.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ScheduledProcessType')
    _XSDLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8477, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.stibosystems.com/step}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_stibosystems_comstep_ScheduledProcessType_httpwww_stibosystems_comstepName', True, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8484, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://www.stibosystems.com/step}MetaData uses Python identifier MetaData
    __MetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), 'MetaData', '__httpwww_stibosystems_comstep_ScheduledProcessType_httpwww_stibosystems_comstepMetaData', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8485, 12), )

    
    MetaData = property(__MetaData.value, __MetaData.set, None, None)

    
    # Element {http://www.stibosystems.com/step}Configuration uses Python identifier Configuration
    __Configuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), 'Configuration', '__httpwww_stibosystems_comstep_ScheduledProcessType_httpwww_stibosystems_comstepConfiguration', False, pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8486, 12), )

    
    Configuration = property(__Configuration.value, __Configuration.set, None, '\n                        The configuration in encoded form.\n                    ')

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__httpwww_stibosystems_comstep_ScheduledProcessType_ID', _module_typeBindings.StepProcessID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8494, 8)
    __ID._UseLocation = pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8494, 8)
    
    ID = property(__ID.value, __ID.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __MetaData.name() : __MetaData,
        __Configuration.name() : __Configuration
    })
    _AttributeMap.update({
        __ID.name() : __ID
    })
_module_typeBindings.ScheduledProcessType = ScheduledProcessType
Namespace.addCategoryObject('typeBinding', 'ScheduledProcessType', ScheduledProcessType)


STEP_ProductInformation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'STEP-ProductInformation'), CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6, 4))
Namespace.addCategoryObject('elementBinding', STEP_ProductInformation.name().localName(), STEP_ProductInformation)



ActionSetListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ActionSet'), ActionSetType, scope=ActionSetListType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 434, 12)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 434, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ActionSetListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ActionSet')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 434, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ActionSetListType._Automaton = _BuildAutomaton()




AssetContentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssetContentSpecification'), AssetContentSpecificationType, scope=AssetContentType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 516, 12)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 516, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AssetContentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssetContentSpecification')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 516, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AssetContentType._Automaton = _BuildAutomaton_()




AssetPushEventQueuesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssetPushEventQueue'), AssetPushEventQueueType, scope=AssetPushEventQueuesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 738, 12)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 738, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AssetPushEventQueuesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssetPushEventQueue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 738, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AssetPushEventQueuesType._Automaton = _BuildAutomaton_2()




AssetPushConfigurationsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssetPushConfiguration'), AssetPushConfigurationType, scope=AssetPushConfigurationsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 772, 12)))

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 772, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AssetPushConfigurationsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssetPushConfiguration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 772, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AssetPushConfigurationsType._Automaton = _BuildAutomaton_3()




AssetPushConfigurationMIMETypesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssetPushMIMEType'), pyxb.binding.datatypes.string, scope=AssetPushConfigurationMIMETypesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 818, 12)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 818, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AssetPushConfigurationMIMETypesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssetPushMIMEType')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 818, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AssetPushConfigurationMIMETypesType._Automaton = _BuildAutomaton_4()




AssetPushConfigurationAttributesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssetPushAttribute'), pyxb.binding.datatypes.string, scope=AssetPushConfigurationAttributesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 828, 12)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 828, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AssetPushConfigurationAttributesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssetPushAttribute')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 828, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AssetPushConfigurationAttributesType._Automaton = _BuildAutomaton_5()




AssetPushConfigurationClassificationsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssetPushClassification'), pyxb.binding.datatypes.string, scope=AssetPushConfigurationClassificationsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 838, 12)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 838, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AssetPushConfigurationClassificationsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssetPushClassification')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 838, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AssetPushConfigurationClassificationsType._Automaton = _BuildAutomaton_6()




AssetPushConfigurationEventQueuesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssetPushEventQueue'), pyxb.binding.datatypes.string, scope=AssetPushConfigurationEventQueuesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 848, 12)))

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 848, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AssetPushConfigurationEventQueuesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssetPushEventQueue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 848, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AssetPushConfigurationEventQueuesType._Automaton = _BuildAutomaton_7()




AssetSettingsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink'), DimensionLinkType, scope=AssetSettingsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 873, 12)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 873, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AssetSettingsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 873, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AssetSettingsType._Automaton = _BuildAutomaton_8()




AttributeSequenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink'), AttributeLinkType, scope=AttributeSequenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1108, 12)))

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1108, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AttributeSequenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1108, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AttributeSequenceType._Automaton = _BuildAutomaton_9()




AttributeGroupListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroup'), AttributeGroupType, scope=AttributeGroupListType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1194, 12)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1194, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AttributeGroupListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1194, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AttributeGroupListType._Automaton = _BuildAutomaton_10()




AttributeListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Attribute'), AttributeType, scope=AttributeListType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1270, 12)))

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1270, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AttributeListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Attribute')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1270, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AttributeListType._Automaton = _BuildAutomaton_11()




AttributeTransformationGroupsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeTransformationGroup'), AttributeTransformationGroupType, scope=AttributeTransformationGroupsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1340, 12)))

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1340, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AttributeTransformationGroupsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeTransformationGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1340, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AttributeTransformationGroupsType._Automaton = _BuildAutomaton_12()




BasketType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClassificationBasketLink'), ClassificationBasketLinkType, scope=BasketType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1364, 12)))

BasketType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ProductBasketLink'), ProductBasketLinkType, scope=BasketType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1365, 12)))

BasketType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssetBasketLink'), AssetBasketLinkType, scope=BasketType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1366, 12)))

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1363, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(BasketType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClassificationBasketLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1364, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(BasketType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ProductBasketLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1365, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(BasketType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssetBasketLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1366, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
BasketType._Automaton = _BuildAutomaton_13()




BulkUpdateConfigurationsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BulkUpdateConfiguration'), BulkUpdateConfigurationType, scope=BulkUpdateConfigurationsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1410, 12)))

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1410, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(BulkUpdateConfigurationsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BulkUpdateConfiguration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1410, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
BulkUpdateConfigurationsType._Automaton = _BuildAutomaton_14()




BusinessLibrariesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BusinessRule'), BusinessRuleType, scope=BusinessLibrariesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1435, 12)))

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1435, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(BusinessLibrariesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BusinessRule')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1435, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
BusinessLibrariesType._Automaton = _BuildAutomaton_15()




def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
BusinessRuleDescriptionType._Automaton = _BuildAutomaton_16()




BusinessRulesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BusinessRule'), BusinessRuleType, scope=BusinessRulesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1487, 12)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1487, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(BusinessRulesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BusinessRule')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1487, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
BusinessRulesType._Automaton = _BuildAutomaton_17()




CalculatedAttributeSettingsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink'), DimensionLinkType, scope=CalculatedAttributeSettingsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1576, 12)))

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1576, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CalculatedAttributeSettingsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1576, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CalculatedAttributeSettingsType._Automaton = _BuildAutomaton_18()




ChangePackagesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ChangePackage'), ChangePackageType, scope=ChangePackagesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1613, 12)))

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1613, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ChangePackagesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ChangePackage')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1613, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ChangePackagesType._Automaton = _BuildAutomaton_19()




CollectionListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CollectionGroup'), CollectionGroupType, scope=CollectionListType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2231, 12)))

CollectionListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Collection'), CollectionType, scope=CollectionListType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2232, 12)))

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2231, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2232, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CollectionListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CollectionGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2231, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CollectionListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Collection')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2232, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CollectionListType._Automaton = _BuildAutomaton_20()




ColumnTypesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ColumnType'), ColumnTypeType, scope=ColumnTypesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2318, 12)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2318, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ColumnTypesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ColumnType')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2318, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ColumnTypesType._Automaton = _BuildAutomaton_21()




ContextListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Context'), ContextType, scope=ContextListType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2497, 12)))

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2497, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ContextListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Context')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2497, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ContextListType._Automaton = _BuildAutomaton_22()




CrossContextsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Context'), ContextType, scope=CrossContextsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2507, 12)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2507, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CrossContextsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Context')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2507, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CrossContextsType._Automaton = _BuildAutomaton_23()




ComponentModelsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Model'), ModelType, scope=ComponentModelsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2517, 12)))

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2517, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ComponentModelsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Model')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2517, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ComponentModelsType._Automaton = _BuildAutomaton_24()




CrossReferenceTypesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssetCrossReferenceType'), AssetCrossReferenceTypeType, scope=CrossReferenceTypesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2549, 16)))

CrossReferenceTypesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ProductCrossReferenceType'), ProductCrossReferenceTypeType, scope=CrossReferenceTypesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2550, 16)))

CrossReferenceTypesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClassificationCrossReferenceType'), ClassificationCrossReferenceTypeType, scope=CrossReferenceTypesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2551, 16)))

CrossReferenceTypesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EntityCrossReferenceType'), EntityCrossReferenceTypeType, scope=CrossReferenceTypesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2552, 16)))

CrossReferenceTypesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClassificationProductLinkType'), ClassificationProductLinkTypeType, scope=CrossReferenceTypesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2553, 16)))

CrossReferenceTypesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ContextCrossReferenceType'), ContextCrossReferenceTypeType, scope=CrossReferenceTypesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2554, 16)))

CrossReferenceTypesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'WorkspaceCrossReferenceType'), WorkspaceCrossReferenceTypeType, scope=CrossReferenceTypesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2555, 16)))

CrossReferenceTypesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LinkType'), DeletedLinkTypeType, scope=CrossReferenceTypesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2556, 16)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2548, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CrossReferenceTypesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssetCrossReferenceType')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2549, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CrossReferenceTypesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ProductCrossReferenceType')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2550, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CrossReferenceTypesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClassificationCrossReferenceType')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2551, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CrossReferenceTypesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EntityCrossReferenceType')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2552, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CrossReferenceTypesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClassificationProductLinkType')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2553, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CrossReferenceTypesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ContextCrossReferenceType')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2554, 16))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CrossReferenceTypesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'WorkspaceCrossReferenceType')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2555, 16))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CrossReferenceTypesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LinkType')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2556, 16))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CrossReferenceTypesType._Automaton = _BuildAutomaton_25()




CurrentTasksType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Task'), TaskType, scope=CurrentTasksType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2567, 12)))

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2567, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CurrentTasksType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Task')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2567, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CurrentTasksType._Automaton = _BuildAutomaton_26()




DataContainersType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DataContainer'), SingleDataContainerType, scope=DataContainersType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2577, 12)))

DataContainersType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MultiDataContainer'), MultiDataContainerType, scope=DataContainersType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2578, 12)))

DataContainersType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteDataContainer'), DeleteSingleDataContainerType, scope=DataContainersType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2579, 12)))

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2576, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DataContainersType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DataContainer')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2577, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DataContainersType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MultiDataContainer')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2578, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DataContainersType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteDataContainer')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2579, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DataContainersType._Automaton = _BuildAutomaton_27()




DataContainerTypesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DataContainerType'), DataContainerTypeType, scope=DataContainerTypesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2647, 12)))

def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2647, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DataContainerTypesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DataContainerType')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2647, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DataContainerTypesType._Automaton = _BuildAutomaton_28()




DeleteAssetsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteAsset'), DeleteAssetType, scope=DeleteAssetsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2789, 12)))

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2789, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeleteAssetsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteAsset')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2789, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DeleteAssetsType._Automaton = _BuildAutomaton_29()




DeleteAttributesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteAttributeOrGroup'), DeleteAttributeOrGroupType, scope=DeleteAttributesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2838, 12)))

DeleteAttributesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteAttribute'), DeleteAttributeType, scope=DeleteAttributesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2840, 12)))

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2838, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2840, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeleteAttributesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteAttributeOrGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2838, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DeleteAttributesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteAttribute')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2840, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DeleteAttributesType._Automaton = _BuildAutomaton_30()




DeleteClassificationsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteClassification'), DeleteClassificationType, scope=DeleteClassificationsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2889, 12)))

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2889, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeleteClassificationsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteClassification')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2889, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DeleteClassificationsType._Automaton = _BuildAutomaton_31()




DeleteEntitiesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteEntity'), DeleteEntityType, scope=DeleteEntitiesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3011, 12)))

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3011, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeleteEntitiesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteEntity')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3011, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DeleteEntitiesType._Automaton = _BuildAutomaton_32()




DeleteListOfValuesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteListOfValue'), DeleteListOfValueType, scope=DeleteListOfValuesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3021, 12)))

def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3021, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeleteListOfValuesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteListOfValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3021, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DeleteListOfValuesType._Automaton = _BuildAutomaton_33()




DeleteProductsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteProduct'), DeleteProductType, scope=DeleteProductsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3062, 12)))

def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3062, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeleteProductsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteProduct')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3062, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DeleteProductsType._Automaton = _BuildAutomaton_34()




DeleteUnitsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteUnitOrFamily'), DeleteUnitOrFamilyType, scope=DeleteUnitsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3262, 12)))

def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3262, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeleteUnitsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteUnitOrFamily')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3262, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DeleteUnitsType._Automaton = _BuildAutomaton_35()




DerivedEventTypesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DerivedEventType'), STD_ANON_7, scope=DerivedEventTypesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3306, 12)))

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3306, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DerivedEventTypesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DerivedEventType')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3306, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DerivedEventTypesType._Automaton = _BuildAutomaton_36()




DimensionListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Dimension'), DimensionType, scope=DimensionListType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3364, 12)))

def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3364, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DimensionListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Dimension')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3364, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DimensionListType._Automaton = _BuildAutomaton_37()




ECatalogsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ECatalog'), ECatalogType, scope=ECatalogsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3461, 12)))

def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3461, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ECatalogsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ECatalog')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3461, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ECatalogsType._Automaton = _BuildAutomaton_38()




EdgeTypesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EdgeType'), EdgeTypeType, scope=EdgeTypesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3500, 12)))

def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3500, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(EdgeTypesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EdgeType')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3500, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
EdgeTypesType._Automaton = _BuildAutomaton_39()




EmbeddedMatchCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValidObjectType'), ValidObjectTypeType, scope=EmbeddedMatchCodeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3510, 12)))

EmbeddedMatchCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValidForProductHierarchy'), MatchCodeObjectSubsetLink, scope=EmbeddedMatchCodeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3512, 16)))

EmbeddedMatchCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValidForClassificationHierarchy'), MatchCodeObjectSubsetLink, scope=EmbeddedMatchCodeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3513, 16)))

EmbeddedMatchCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValidForEntityHierarchy'), MatchCodeObjectSubsetLink, scope=EmbeddedMatchCodeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3514, 16)))

EmbeddedMatchCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValidForCollection'), MatchCodeObjectSubsetLink, scope=EmbeddedMatchCodeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3515, 16)))

def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3510, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3511, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(EmbeddedMatchCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValidObjectType')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3510, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(EmbeddedMatchCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValidForProductHierarchy')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3512, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(EmbeddedMatchCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValidForClassificationHierarchy')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3513, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(EmbeddedMatchCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValidForEntityHierarchy')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3514, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(EmbeddedMatchCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValidForCollection')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3515, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
EmbeddedMatchCodeType._Automaton = _BuildAutomaton_40()




EventProcessorsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EventProcessor'), EventProcessorType, scope=EventProcessorsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3829, 12)))

def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3829, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(EventProcessorsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EventProcessor')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3829, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
EventProcessorsType._Automaton = _BuildAutomaton_41()




EventQueuesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EventQueue'), EventQueueType, scope=EventQueuesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3930, 12)))

def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3930, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(EventQueuesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EventQueue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3930, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
EventQueuesType._Automaton = _BuildAutomaton_42()




ExportConfigurationsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExportConfiguration'), ExportConfigurationType, scope=ExportConfigurationsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3994, 12)))

def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3994, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ExportConfigurationsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExportConfiguration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3994, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ExportConfigurationsType._Automaton = _BuildAutomaton_43()




TranslationConfigurationsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TranslationConfiguration'), TranslationConfigurationType, scope=TranslationConfigurationsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4004, 12)))

def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4004, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TranslationConfigurationsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TranslationConfiguration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4004, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
TranslationConfigurationsType._Automaton = _BuildAutomaton_44()




def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
FormattingType._Automaton = _BuildAutomaton_45()




GlobalSettingsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CalculatedAttributeSettings'), CalculatedAttributeSettingsType, scope=GlobalSettingsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4173, 12)))

GlobalSettingsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssetSettings'), AssetSettingsType, scope=GlobalSettingsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4174, 12)))

def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4173, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4174, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(GlobalSettingsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CalculatedAttributeSettings')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4173, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(GlobalSettingsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssetSettings')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4174, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
GlobalSettingsType._Automaton = _BuildAutomaton_46()




GUISetupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GUISetupEnabled'), GUISetupEnabledType, scope=GUISetupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4186, 16)))

GUISetupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GUISetupDisabled'), GUISetupDisabledType, scope=GUISetupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4187, 16)))

GUISetupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GUISetupAdvanced'), GUISetupAdvancedType, scope=GUISetupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4188, 16)))

def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4185, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(GUISetupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GUISetupEnabled')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4186, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(GUISetupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GUISetupDisabled')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4187, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(GUISetupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GUISetupAdvanced')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4188, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
GUISetupType._Automaton = _BuildAutomaton_47()




ImportConfigurationsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ImportConfiguration'), ImportConfigurationType, scope=ImportConfigurationsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4323, 12)))

def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4323, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ImportConfigurationsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ImportConfiguration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4323, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ImportConfigurationsType._Automaton = _BuildAutomaton_48()




ImageConversionConfigurationsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ImageConversionConfiguration'), ImageConversionConfigurationType, scope=ImageConversionConfigurationsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4333, 12)))

def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4333, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ImageConversionConfigurationsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ImageConversionConfiguration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4333, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ImageConversionConfigurationsType._Automaton = _BuildAutomaton_49()




IntegrationEndpointsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OutBoundIntegrationEndpoint'), OutBoundIntegrationEndpointType, scope=IntegrationEndpointsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4572, 12)))

IntegrationEndpointsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InBoundIntegrationEndpoint'), InBoundIntegrationEndpointType, scope=IntegrationEndpointsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4573, 12)))

IntegrationEndpointsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GatewayIntegrationEndpoint'), GatewayIntegrationEndpointType, scope=IntegrationEndpointsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4574, 12)))

def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4571, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4572, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4573, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4574, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(IntegrationEndpointsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OutBoundIntegrationEndpoint')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4572, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(IntegrationEndpointsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InBoundIntegrationEndpoint')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4573, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(IntegrationEndpointsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GatewayIntegrationEndpoint')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4574, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
IntegrationEndpointsType._Automaton = _BuildAutomaton_50()




def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
KeyFormulaType._Automaton = _BuildAutomaton_51()




KeysType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Key'), KeyType, scope=KeysType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4627, 12)))

def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4627, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(KeysType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Key')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4627, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
KeysType._Automaton = _BuildAutomaton_52()




LinkAspectDescriptorsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LinkAspectDescriptor'), LinkAspectDescriptorType, scope=LinkAspectDescriptorsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4637, 12)))

def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4637, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(LinkAspectDescriptorsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LinkAspectDescriptor')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4637, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
LinkAspectDescriptorsType._Automaton = _BuildAutomaton_53()




def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4641, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4642, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.WildcardUse(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_skip, namespace_constraint=pyxb.binding.content.Wildcard.NC_any), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4642, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
LinkAspectDescriptorType._Automaton = _BuildAutomaton_54()




ListOfValuesGroupListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ListOfValuesGroup'), ListOfValuesGroupType, scope=ListOfValuesGroupListType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4710, 12)))

def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4710, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ListOfValuesGroupListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ListOfValuesGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4710, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ListOfValuesGroupListType._Automaton = _BuildAutomaton_55()




ListsOfValuesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ListOfValue'), ListOfValueType, scope=ListsOfValuesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4825, 12)))

def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4825, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ListsOfValuesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ListOfValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4825, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ListsOfValuesType._Automaton = _BuildAutomaton_56()




MatchCodesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MatchCode'), MatchCodeType, scope=MatchCodesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4900, 12)))

def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4900, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MatchCodesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MatchCode')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4900, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MatchCodesType._Automaton = _BuildAutomaton_57()




def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
MatchCodeTemplateType._Automaton = _BuildAutomaton_58()




def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
MatchingAlgorithmConfigurationType._Automaton = _BuildAutomaton_59()




MatchingAlgorithmsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MatchingAlgorithm'), MatchingAlgorithmType, scope=MatchingAlgorithmsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4981, 12)))

def _BuildAutomaton_60 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4981, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MatchingAlgorithmsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MatchingAlgorithm')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4981, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MatchingAlgorithmsType._Automaton = _BuildAutomaton_60()




MetaDataType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Value'), ValueType, scope=MetaDataType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5042, 12)))

MetaDataType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MultiValue'), MultiValueType, scope=MetaDataType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5043, 12)))

MetaDataType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValueGroup'), ValueGroupType, scope=MetaDataType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5044, 12)))

def _BuildAutomaton_61 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5041, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5042, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5043, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5044, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MetaDataType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Value')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5042, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MetaDataType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MultiValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5043, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MetaDataType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValueGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5044, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MetaDataType._Automaton = _BuildAutomaton_61()




def _BuildAutomaton_62 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
MIMETypeType._Automaton = _BuildAutomaton_62()




MissingObjectsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Classifications'), ClassificationsType, scope=MissingObjectsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5050, 12)))

MissingObjectsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Products'), ProductsType, scope=MissingObjectsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5051, 12)))

MissingObjectsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Assets'), AssetsType, scope=MissingObjectsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5052, 12)))

MissingObjectsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PublicationGroups'), PublicationGroupsType, scope=MissingObjectsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5053, 12)))

MissingObjectsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Publication'), PublicationType, scope=MissingObjectsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5054, 12)))

MissingObjectsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PlannedPage'), PlannedPageType, scope=MissingObjectsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5055, 12)))

def _BuildAutomaton_63 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5054, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5055, 12))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MissingObjectsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Classifications')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5050, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MissingObjectsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Products')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5051, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MissingObjectsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Assets')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5052, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MissingObjectsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PublicationGroups')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5053, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MissingObjectsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Publication')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5054, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MissingObjectsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PlannedPage')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5055, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MissingObjectsType._Automaton = _BuildAutomaton_63()




ModelType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NodeAspectDescriptors'), NodeAspectDescriptorsType, scope=ModelType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5065, 12)))

ModelType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LinkAspectDescriptors'), LinkAspectDescriptorsType, scope=ModelType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5066, 12)))

ModelType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValueAspectDescriptors'), ValueAspectDescriptorsType, scope=ModelType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5067, 12)))

def _BuildAutomaton_64 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5065, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5066, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5067, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ModelType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NodeAspectDescriptors')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5065, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ModelType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LinkAspectDescriptors')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5066, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ModelType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValueAspectDescriptors')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5067, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ModelType._Automaton = _BuildAutomaton_64()




NodeAspectDescriptorsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NodeAspectDescriptor'), NodeAspectDescriptorType, scope=NodeAspectDescriptorsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5142, 12)))

def _BuildAutomaton_65 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5142, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(NodeAspectDescriptorsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NodeAspectDescriptor')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5142, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
NodeAspectDescriptorsType._Automaton = _BuildAutomaton_65()




def _BuildAutomaton_66 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5147, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.WildcardUse(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_skip, namespace_constraint=pyxb.binding.content.Wildcard.NC_any), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5147, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
NodeAspectDescriptorType._Automaton = _BuildAutomaton_66()




def _BuildAutomaton_67 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
NoteRecordType._Automaton = _BuildAutomaton_67()




PageContentsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Frame'), FrameType, scope=PageContentsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5541, 12)))

PageContentsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NoteFrame'), NoteFrameType, scope=PageContentsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5542, 12)))

PageContentsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GalleyFrame'), GalleyFrameType, scope=PageContentsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5543, 12)))

def _BuildAutomaton_68 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5540, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PageContentsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Frame')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5541, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PageContentsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NoteFrame')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5542, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PageContentsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GalleyFrame')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5543, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PageContentsType._Automaton = _BuildAutomaton_68()




PagesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Page'), PageType, scope=PagesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5548, 12)))

def _BuildAutomaton_69 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5548, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PagesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Page')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5548, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PagesType._Automaton = _BuildAutomaton_69()




PortalConfigurationsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PortalConfiguration'), PortalConfigurationType, scope=PortalConfigurationsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5595, 12)))

def _BuildAutomaton_70 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5595, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PortalConfigurationsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PortalConfiguration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5595, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PortalConfigurationsType._Automaton = _BuildAutomaton_70()




ProductTemplateType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), ConfigurationType, scope=ProductTemplateType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6032, 12)))

def _BuildAutomaton_71 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ProductTemplateType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Configuration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6032, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ProductTemplateType._Automaton = _BuildAutomaton_71()




PublicationGroupsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PublicationGroup'), PublicationGroupType, scope=PublicationGroupsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6052, 12)))

def _BuildAutomaton_72 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6052, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PublicationGroupsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PublicationGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6052, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PublicationGroupsType._Automaton = _BuildAutomaton_72()




PublicationTypeValidityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IncludedPublicationType'), PublicationTypeLinkType, scope=PublicationTypeValidityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6117, 12)))

PublicationTypeValidityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExcludedPublicationType'), PublicationTypeLinkType, scope=PublicationTypeValidityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6118, 12)))

def _BuildAutomaton_73 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6117, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6118, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PublicationTypeValidityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IncludedPublicationType')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6117, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PublicationTypeValidityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExcludedPublicationType')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6118, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PublicationTypeValidityType._Automaton = _BuildAutomaton_73()




QualifiersType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Qualifier'), QualifierType, scope=QualifiersType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6148, 12)))

def _BuildAutomaton_74 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6148, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(QualifiersType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Qualifier')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6148, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
QualifiersType._Automaton = _BuildAutomaton_74()




ReplacementRulesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Attributes'), ReplaceAttributesType, scope=ReplacementRulesType, documentation='\n                        Replacement rules for attribute definitions\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6161, 12)))

ReplacementRulesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LinkTypes'), ReplaceLinkTypesType, scope=ReplacementRulesType, documentation='\n                        Replacement rules for link type definitions, i.e. reference type and classification product\n                        link type definitions.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6168, 12)))

ReplacementRulesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UserTypes'), ReplaceUserTypesType, scope=ReplacementRulesType, documentation='\n                        Replacement rules for user type a.k.a. object type definitions.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6176, 12)))

ReplacementRulesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UserGroups'), ReplaceUserGroupsType, scope=ReplacementRulesType, documentation='\n                        Replacement rules for user group definitions.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6183, 12)))

ReplacementRulesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Products'), ReplaceProductsType, scope=ReplacementRulesType, documentation='\n                        Replacement rules for products.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6190, 12)))

ReplacementRulesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Classifications'), ReplaceClassificationsType, scope=ReplacementRulesType, documentation='\n                        Replacement rules for classifications.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6197, 12)))

ReplacementRulesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Entities'), ReplaceEntitiesType, scope=ReplacementRulesType, documentation='\n                        Replacement rules for entities.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6204, 12)))

ReplacementRulesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Assets'), ReplaceAssetsType, scope=ReplacementRulesType, documentation='\n                        Replacement rules for assets.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6211, 12)))

ReplacementRulesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReplaceProductValuesForAttributeGroup'), ReplaceProductValuesForAttributeGroupType, scope=ReplacementRulesType, documentation='\n                        @Deprecated, use ReplacementRules/Products/ReplaceValues instead.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6218, 12)))

ReplacementRulesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReplaceProductToProductCrossReference'), ReplaceProductToProductCrossReferenceType, scope=ReplacementRulesType, documentation='\n                        @Deprecated, use ReplacementRules/Products/ReplaceCrossReferences instead.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6226, 12)))

ReplacementRulesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReplaceProductToAssetCrossReference'), ReplaceProductToAssetCrossReferenceType, scope=ReplacementRulesType, documentation='\n                        @Deprecated, use ReplacementRules/Products/ReplaceCrossReferences instead.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6234, 12)))

ReplacementRulesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReplaceClassificationReference'), ReplaceClassificationReferenceType, scope=ReplacementRulesType, documentation='\n                        @Deprecated, use ReplacementRules/Products/ReplaceClassificationReferences instead.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6242, 12)))

ReplacementRulesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReplaceCrossReference'), ReplaceCrossReferenceType, scope=ReplacementRulesType, documentation='\n                        @Deprecated, use ReplacementRules/Products/ReplaceCrossReferences,\n                        ReplacementRules/Classifications/ReplaceCrossReferences,\n                        ReplacementRules/Entities/ReplaceCrossReferences or\n                        ReplacementRules/Assets/ReplaceCrossReferences instead.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6250, 12)))

ReplacementRulesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReplaceDataContainer'), ReplaceDataContainerTypeType, scope=ReplacementRulesType, documentation='\n                        @Deprecated, use ReplacementRules/Entities/ReplaceDataContainers or\n                        ReplacementRules/Products/ReplaceDataContainers instead.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6261, 12)))

def _BuildAutomaton_75 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6161, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6168, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6176, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6183, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6190, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6197, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6204, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6211, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6218, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6226, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6234, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6242, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6250, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6261, 12))
    counters.add(cc_13)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ReplacementRulesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Attributes')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6161, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ReplacementRulesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LinkTypes')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6168, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ReplacementRulesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UserTypes')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6176, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ReplacementRulesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UserGroups')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6183, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ReplacementRulesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Products')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6190, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ReplacementRulesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Classifications')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6197, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ReplacementRulesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Entities')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6204, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ReplacementRulesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Assets')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6211, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ReplacementRulesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReplaceProductValuesForAttributeGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6218, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ReplacementRulesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReplaceProductToProductCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6226, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ReplacementRulesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReplaceProductToAssetCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6234, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ReplacementRulesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReplaceClassificationReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6242, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ReplacementRulesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReplaceCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6250, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(ReplacementRulesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReplaceDataContainer')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6261, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ReplacementRulesType._Automaton = _BuildAutomaton_75()




ReplaceAttributesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReplaceAttributeGroupLinks'), ReplaceAttributeGroupLinksType, scope=ReplaceAttributesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6279, 12)))

ReplaceAttributesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReplaceUserTypeLinks'), ReplaceUserTypeLinksType, scope=ReplaceAttributesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6281, 12)))

ReplaceAttributesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReplaceUnitLinks'), ReplaceUnitLinksType, scope=ReplaceAttributesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6282, 12)))

def _BuildAutomaton_76 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6279, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6281, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6282, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ReplaceAttributesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReplaceAttributeGroupLinks')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6279, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ReplaceAttributesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReplaceUserTypeLinks')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6281, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ReplaceAttributesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReplaceUnitLinks')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6282, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ReplaceAttributesType._Automaton = _BuildAutomaton_76()




ReplaceLinkTypesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReplaceAttributeGroupLinks'), ReplaceAttributeGroupLinksType, scope=ReplaceLinkTypesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6332, 12)))

ReplaceLinkTypesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReplaceUserTypeLinks'), ReplaceSourceUserTypeLinksType, scope=ReplaceLinkTypesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6334, 12)))

ReplaceLinkTypesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReplaceTargetUserTypeLinks'), ReplaceTargetUserTypeLinksType, scope=ReplaceLinkTypesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6335, 12)))

ReplaceLinkTypesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReplaceAttributeLinks'), ReplaceLinkTypeAttributeLinksType, scope=ReplaceLinkTypesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6337, 12)))

def _BuildAutomaton_77 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6332, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6334, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6335, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6337, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ReplaceLinkTypesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReplaceAttributeGroupLinks')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6332, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ReplaceLinkTypesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReplaceUserTypeLinks')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6334, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ReplaceLinkTypesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReplaceTargetUserTypeLinks')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6335, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ReplaceLinkTypesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReplaceAttributeLinks')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6337, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ReplaceLinkTypesType._Automaton = _BuildAutomaton_77()




ReplaceUserTypesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReplaceUserTypeLinks'), ReplaceUserTypeLinksType, scope=ReplaceUserTypesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6374, 12)))

def _BuildAutomaton_78 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6374, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ReplaceUserTypesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReplaceUserTypeLinks')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6374, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ReplaceUserTypesType._Automaton = _BuildAutomaton_78()




ReplaceUserGroupsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReplacePrivilegeRules'), ReplacePrivilegeRulesType, scope=ReplaceUserGroupsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6384, 12)))

def _BuildAutomaton_79 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_79
    del _BuildAutomaton_79
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6384, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ReplaceUserGroupsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReplacePrivilegeRules')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6384, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ReplaceUserGroupsType._Automaton = _BuildAutomaton_79()




ReplaceProductsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReplaceValues'), ReplaceValuesType, scope=ReplaceProductsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6402, 12)))

ReplaceProductsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReplaceCrossReferences'), ReplaceCrossReferencesType, scope=ReplaceProductsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6403, 12)))

ReplaceProductsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReplaceAttributeLinks'), ReplaceAttributeLinksType, scope=ReplaceProductsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6405, 12)))

ReplaceProductsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReplaceOverrideSubProducts'), ReplaceOverrideSubProductsType, scope=ReplaceProductsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6407, 12)))

ReplaceProductsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReplaceClassificationReferences'), ReplaceClassificationReferencesType, scope=ReplaceProductsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6409, 12)))

ReplaceProductsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReplaceDataContainers'), ReplaceDataContainersType, scope=ReplaceProductsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6411, 12)))

def _BuildAutomaton_80 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_80
    del _BuildAutomaton_80
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6402, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6403, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6405, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6407, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6409, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6411, 12))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ReplaceProductsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReplaceValues')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6402, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ReplaceProductsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReplaceCrossReferences')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6403, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ReplaceProductsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReplaceAttributeLinks')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6405, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ReplaceProductsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReplaceOverrideSubProducts')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6407, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ReplaceProductsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReplaceClassificationReferences')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6409, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ReplaceProductsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReplaceDataContainers')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6411, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ReplaceProductsType._Automaton = _BuildAutomaton_80()




ReplaceClassificationsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReplaceValues'), ReplaceValuesType, scope=ReplaceClassificationsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6422, 12)))

ReplaceClassificationsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReplaceCrossReferences'), ReplaceCrossReferencesType, scope=ReplaceClassificationsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6423, 12)))

ReplaceClassificationsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReplaceAttributeLinks'), ReplaceAttributeLinksType, scope=ReplaceClassificationsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6425, 12)))

ReplaceClassificationsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReplaceProductReferences'), ReplaceProductReferencesType, scope=ReplaceClassificationsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6427, 12)))

def _BuildAutomaton_81 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_81
    del _BuildAutomaton_81
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6422, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6423, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6425, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6427, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ReplaceClassificationsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReplaceValues')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6422, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ReplaceClassificationsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReplaceCrossReferences')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6423, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ReplaceClassificationsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReplaceAttributeLinks')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6425, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ReplaceClassificationsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReplaceProductReferences')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6427, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ReplaceClassificationsType._Automaton = _BuildAutomaton_81()




ReplaceEntitiesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReplaceValues'), ReplaceValuesType, scope=ReplaceEntitiesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6438, 12)))

ReplaceEntitiesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReplaceCrossReferences'), ReplaceCrossReferencesType, scope=ReplaceEntitiesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6439, 12)))

ReplaceEntitiesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReplaceDataContainers'), ReplaceDataContainersType, scope=ReplaceEntitiesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6441, 12)))

def _BuildAutomaton_82 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_82
    del _BuildAutomaton_82
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6438, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6439, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6441, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ReplaceEntitiesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReplaceValues')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6438, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ReplaceEntitiesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReplaceCrossReferences')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6439, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ReplaceEntitiesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReplaceDataContainers')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6441, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ReplaceEntitiesType._Automaton = _BuildAutomaton_82()




ReplaceAssetsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReplaceValues'), ReplaceValuesType, scope=ReplaceAssetsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6452, 12)))

ReplaceAssetsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReplaceCrossReferences'), ReplaceCrossReferencesType, scope=ReplaceAssetsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6453, 12)))

def _BuildAutomaton_83 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_83
    del _BuildAutomaton_83
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6452, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6453, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ReplaceAssetsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReplaceValues')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6452, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ReplaceAssetsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReplaceCrossReferences')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6453, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ReplaceAssetsType._Automaton = _BuildAutomaton_83()




RowColumnTableGroupListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RowColumnTableGroup'), RowColumnTableGroupType, scope=RowColumnTableGroupListType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6696, 12)))

def _BuildAutomaton_84 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_84
    del _BuildAutomaton_84
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6696, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(RowColumnTableGroupListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RowColumnTableGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6696, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
RowColumnTableGroupListType._Automaton = _BuildAutomaton_84()




RowTypesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RowType'), RowTypeType, scope=RowTypesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6766, 12)))

def _BuildAutomaton_85 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_85
    del _BuildAutomaton_85
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6766, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(RowTypesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RowType')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6766, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
RowTypesType._Automaton = _BuildAutomaton_85()




SetupEntitiesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SetupEntity'), SetupEntityType, scope=SetupEntitiesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6798, 12)))

def _BuildAutomaton_86 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_86
    del _BuildAutomaton_86
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6798, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SetupEntitiesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SetupEntity')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6798, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SetupEntitiesType._Automaton = _BuildAutomaton_86()




SetupGroupsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SetupGroup'), SetupGroupType, scope=SetupGroupsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6858, 12)))

def _BuildAutomaton_87 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_87
    del _BuildAutomaton_87
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6858, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SetupGroupsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SetupGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6858, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SetupGroupsType._Automaton = _BuildAutomaton_87()




StatusFlagsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StatusFlag'), StatusFlagType, scope=StatusFlagsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7013, 12)))

def _BuildAutomaton_88 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_88
    del _BuildAutomaton_88
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7013, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(StatusFlagsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StatusFlag')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7013, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
StatusFlagsType._Automaton = _BuildAutomaton_88()




STEPWorkflowsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Stateflow'), STEPWorkflowType, scope=STEPWorkflowsType, documentation='\n                        @Deprecated, replaced by STEPWorkflow.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7055, 12)))

STEPWorkflowsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'STEPWorkflow'), STEPWorkflowType, scope=STEPWorkflowsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7062, 12)))

def _BuildAutomaton_89 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_89
    del _BuildAutomaton_89
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7055, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7062, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(STEPWorkflowsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Stateflow')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7055, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(STEPWorkflowsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'STEPWorkflow')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7062, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
STEPWorkflowsType._Automaton = _BuildAutomaton_89()




STEPWorkflowProfilesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'STEPWorkflowProfile'), STEPWorkflowProfileType, scope=STEPWorkflowProfilesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7105, 12)))

def _BuildAutomaton_90 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_90
    del _BuildAutomaton_90
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7105, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(STEPWorkflowProfilesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'STEPWorkflowProfile')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7105, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
STEPWorkflowProfilesType._Automaton = _BuildAutomaton_90()




SystemSetupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SystemSetupValue'), SystemSetupValueType, scope=SystemSetupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7401, 12)))

def _BuildAutomaton_91 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_91
    del _BuildAutomaton_91
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7401, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SystemSetupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SystemSetupValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7401, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SystemSetupType._Automaton = _BuildAutomaton_91()




TableColorsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TableColor'), TableColorType, scope=TableColorsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7435, 12)))

def _BuildAutomaton_92 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_92
    del _BuildAutomaton_92
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7435, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TableColorsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TableColor')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7435, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
TableColorsType._Automaton = _BuildAutomaton_92()




TableConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), ConfigurationType, scope=TableConfigurationType, documentation='\n                        The configuration is an internal format.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7462, 12)))

def _BuildAutomaton_93 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_93
    del _BuildAutomaton_93
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7462, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TableConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Configuration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7462, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
TableConfigurationType._Automaton = _BuildAutomaton_93()




TableRulesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TableRule'), TableRuleType, scope=TableRulesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7487, 12)))

def _BuildAutomaton_94 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_94
    del _BuildAutomaton_94
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7487, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TableRulesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TableRule')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7487, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
TableRulesType._Automaton = _BuildAutomaton_94()




TableTextType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Text'), TableTextType, scope=TableTextType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7522, 12)))

def _BuildAutomaton_95 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_95
    del _BuildAutomaton_95
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7521, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TableTextType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Text')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7522, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
TableTextType._Automaton = _BuildAutomaton_95()




TablesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TableDefinition'), TableDefinitionType, scope=TablesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7528, 12)))

TablesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Table'), TableType, scope=TablesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7529, 12)))

def _BuildAutomaton_96 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_96
    del _BuildAutomaton_96
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7527, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TablesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TableDefinition')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7528, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TablesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Table')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7529, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
TablesType._Automaton = _BuildAutomaton_96()




TableTypesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TableType'), TableTypeType, scope=TableTypesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7547, 12)))

def _BuildAutomaton_97 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_97
    del _BuildAutomaton_97
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7547, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TableTypesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TableType')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7547, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
TableTypesType._Automaton = _BuildAutomaton_97()




TagFormatType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FormattingStart'), pyxb.binding.datatypes.string, scope=TagFormatType, documentation='\n                        How tag should be converted to given output format.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7591, 12)))

TagFormatType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FormattingStop'), pyxb.binding.datatypes.string, scope=TagFormatType, documentation='\n                        How end tag should be converted to given output format. Not relevant for character and special\n                        character tags.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7598, 12)))

def _BuildAutomaton_98 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_98
    del _BuildAutomaton_98
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7598, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TagFormatType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FormattingStart')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7591, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TagFormatType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FormattingStop')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7598, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TagFormatType._Automaton = _BuildAutomaton_98()




TagGroupListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StyleTagGroup'), StyleTagGroupType, scope=TagGroupListType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7622, 12)))

TagGroupListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SpecialCharacterTagGroup'), SpecialCharacterTagGroupType, scope=TagGroupListType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7623, 12)))

TagGroupListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CharacterTagGroup'), CharacterTagGroupType, scope=TagGroupListType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7625, 12)))

TagGroupListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FootnoteTagGroup'), FootnoteTagGroupType, scope=TagGroupListType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7626, 12)))

TagGroupListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HyperlinkTagGroup'), HyperlinkTagGroupType, scope=TagGroupListType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7627, 12)))

def _BuildAutomaton_99 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_99
    del _BuildAutomaton_99
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7621, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7622, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7623, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7625, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7626, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7627, 12))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TagGroupListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StyleTagGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7622, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TagGroupListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SpecialCharacterTagGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7623, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TagGroupListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CharacterTagGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7625, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(TagGroupListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FootnoteTagGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7626, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TagGroupListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HyperlinkTagGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7627, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
TagGroupListType._Automaton = _BuildAutomaton_99()




TagListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Tag'), TagType, scope=TagListType, documentation='\n                        @Deprecated, for backward compatibility. Contains all the step tags only.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7637, 12)))

TagListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StyleTag'), StyleTagType, scope=TagListType, documentation='\n                        A style tag.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7644, 12)))

TagListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SpecialCharacterTag'), SpecialCharacterTagType, scope=TagListType, documentation='\n                        A special character tag.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7651, 12)))

TagListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CharacterTag'), CharacterTagType, scope=TagListType, documentation='\n                        A character tag.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7658, 12)))

TagListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FootnoteTag'), FootnoteTagType, scope=TagListType, documentation='\n                        A footnote tag.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7665, 12)))

TagListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HyperlinkTag'), HyperlinkTagType, scope=TagListType, documentation='\n                        A hyperlink tag.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7672, 12)))

def _BuildAutomaton_100 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_100
    del _BuildAutomaton_100
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7636, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TagListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Tag')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7637, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TagListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StyleTag')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7644, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TagListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SpecialCharacterTag')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7651, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TagListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CharacterTag')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7658, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TagListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FootnoteTag')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7665, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TagListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HyperlinkTag')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7672, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
TagListType._Automaton = _BuildAutomaton_100()




TermsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Term'), TermType, scope=TermsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7772, 12)))

def _BuildAutomaton_101 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_101
    del _BuildAutomaton_101
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7772, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TermsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Term')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7772, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
TermsType._Automaton = _BuildAutomaton_101()




TextType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Image'), pyxb.binding.datatypes.anyType, scope=TextType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7795, 12)))

def _BuildAutomaton_102 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_102
    del _BuildAutomaton_102
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7794, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TextType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Image')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7795, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
TextType._Automaton = _BuildAutomaton_102()




TransformationLookupTableConfigurationsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TransformationLookupTableConfiguration'), TransformationLookupTableConfigurationType, scope=TransformationLookupTableConfigurationsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7805, 12)))

def _BuildAutomaton_103 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_103
    del _BuildAutomaton_103
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7805, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TransformationLookupTableConfigurationsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TransformationLookupTableConfiguration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7805, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
TransformationLookupTableConfigurationsType._Automaton = _BuildAutomaton_103()




UnitListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UnitFamily'), UnitFamilyType, scope=UnitListType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7909, 16)))

UnitListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Unit'), UnitType, scope=UnitListType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7910, 16)))

def _BuildAutomaton_104 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_104
    del _BuildAutomaton_104
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7908, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(UnitListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UnitFamily')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7909, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(UnitListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Unit')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7910, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
UnitListType._Automaton = _BuildAutomaton_104()




UserGroupListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UserGroup'), UserGroupType, scope=UserGroupListType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8048, 12)))

def _BuildAutomaton_105 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_105
    del _BuildAutomaton_105
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8048, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(UserGroupListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UserGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8048, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
UserGroupListType._Automaton = _BuildAutomaton_105()




UserListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'User'), UserType, scope=UserListType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8058, 12)))

def _BuildAutomaton_106 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_106
    del _BuildAutomaton_106
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8058, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(UserListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'User')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8058, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
UserListType._Automaton = _BuildAutomaton_106()




DataContainerKeyDefinitionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Attribute'), AttributeTypeType, scope=DataContainerKeyDefinitionType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8141, 12)))

DataContainerKeyDefinitionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReferenceType'), ReferenceTypeType, scope=DataContainerKeyDefinitionType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8142, 12)))

def _BuildAutomaton_107 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_107
    del _BuildAutomaton_107
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8141, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8142, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DataContainerKeyDefinitionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Attribute')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8141, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DataContainerKeyDefinitionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReferenceType')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8142, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DataContainerKeyDefinitionType._Automaton = _BuildAutomaton_107()




UserTypesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UserType'), UserTypeType, scope=UserTypesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8152, 12)))

def _BuildAutomaton_108 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_108
    del _BuildAutomaton_108
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8152, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(UserTypesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UserType')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8152, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
UserTypesType._Automaton = _BuildAutomaton_108()




ValidationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UnitLink'), UnitLinkType, scope=ValidationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8163, 12)))

def _BuildAutomaton_109 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_109
    del _BuildAutomaton_109
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8163, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ValidationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UnitLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8163, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ValidationType._Automaton = _BuildAutomaton_109()




ValidObjectTypesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValidObjectType'), ValidObjectTypeType, scope=ValidObjectTypesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8226, 12)))

def _BuildAutomaton_110 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_110
    del _BuildAutomaton_110
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8226, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ValidObjectTypesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValidObjectType')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8226, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ValidObjectTypesType._Automaton = _BuildAutomaton_110()




ValueAspectDescriptorsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValueAspectDescriptor'), ValueAspectDescriptorType, scope=ValueAspectDescriptorsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8238, 12)))

def _BuildAutomaton_111 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_111
    del _BuildAutomaton_111
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8238, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ValueAspectDescriptorsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValueAspectDescriptor')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8238, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ValueAspectDescriptorsType._Automaton = _BuildAutomaton_111()




def _BuildAutomaton_112 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_112
    del _BuildAutomaton_112
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8243, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.WildcardUse(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_skip, namespace_constraint=pyxb.binding.content.Wildcard.NC_any), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8243, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ValueAspectDescriptorType._Automaton = _BuildAutomaton_112()




ValueFilterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Value'), ValueType, scope=ValueFilterType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8323, 12)))

ValueFilterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValueGroup'), ValueGroupType, scope=ValueFilterType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8324, 12)))

def _BuildAutomaton_113 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_113
    del _BuildAutomaton_113
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8323, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8324, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ValueFilterType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Value')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8323, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ValueFilterType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValueGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8324, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ValueFilterType._Automaton = _BuildAutomaton_113()




ValuesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Value'), ValueType, scope=ValuesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8348, 12)))

ValuesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MultiValue'), MultiValueType, scope=ValuesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8349, 12)))

ValuesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValueGroup'), ValueGroupType, scope=ValuesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8350, 12)))

def _BuildAutomaton_114 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_114
    del _BuildAutomaton_114
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8347, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ValuesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Value')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8348, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ValuesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MultiValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8349, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ValuesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValueGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8350, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ValuesType._Automaton = _BuildAutomaton_114()




VisibleTermFieldsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VisibleTermField'), VisibleTermFieldType, scope=VisibleTermFieldsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8392, 12)))

def _BuildAutomaton_115 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_115
    del _BuildAutomaton_115
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8392, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(VisibleTermFieldsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VisibleTermField')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8392, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
VisibleTermFieldsType._Automaton = _BuildAutomaton_115()




ScheduledProcessesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScheduledProcess'), ScheduledProcessType, scope=ScheduledProcessesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8474, 12)))

def _BuildAutomaton_116 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_116
    del _BuildAutomaton_116
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8474, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ScheduledProcessesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScheduledProcess')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8474, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ScheduledProcessesType._Automaton = _BuildAutomaton_116()




BulkUpdateConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=BulkUpdateConfigurationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1376, 12)))

BulkUpdateConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=BulkUpdateConfigurationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1377, 12)))

BulkUpdateConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClassificationReference'), ClassificationReferenceType, scope=BulkUpdateConfigurationType, documentation='\n                        The classification(s) that the configuration is present in.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1378, 12)))

BulkUpdateConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), ConfigurationType, scope=BulkUpdateConfigurationType, documentation='\n                        The configuration in encoded form.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1386, 12)))

def _BuildAutomaton_117 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_117
    del _BuildAutomaton_117
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1376, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1377, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1378, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1386, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(BulkUpdateConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1376, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(BulkUpdateConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1377, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(BulkUpdateConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClassificationReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1378, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(BulkUpdateConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Configuration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1386, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
BulkUpdateConfigurationType._Automaton = _BuildAutomaton_117()




ChangePackageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink'), SetupGroupLinkType, scope=ChangePackageType, documentation='\n                        The setup group the package is located in.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1623, 12)))

ChangePackageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=ChangePackageType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1630, 12)))

ChangePackageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=ChangePackageType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1631, 12)))

ChangePackageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), ConfigurationType, scope=ChangePackageType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1632, 12)))

def _BuildAutomaton_118 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_118
    del _BuildAutomaton_118
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1623, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1630, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1631, 12))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ChangePackageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1623, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ChangePackageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1630, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ChangePackageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1631, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ChangePackageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Configuration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1632, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ChangePackageType._Automaton = _BuildAutomaton_118()




CharacterTagGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=CharacterTagGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1646, 12)))

CharacterTagGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=CharacterTagGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1647, 12)))

CharacterTagGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), AttributeGroupLinkType, scope=CharacterTagGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1648, 12)))

CharacterTagGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CharacterTagGroup'), CharacterTagGroupType, scope=CharacterTagGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1649, 12)))

def _BuildAutomaton_119 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_119
    del _BuildAutomaton_119
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1646, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1647, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1648, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1649, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CharacterTagGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1646, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CharacterTagGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1647, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CharacterTagGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1648, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CharacterTagGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CharacterTagGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1649, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CharacterTagGroupType._Automaton = _BuildAutomaton_119()




DataContainerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Values'), ValuesType, scope=DataContainerType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2589, 12)))

DataContainerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssetCrossReference'), AssetCrossReferenceType, scope=DataContainerType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2590, 12)))

DataContainerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteAssetCrossReference'), DeleteAssetCrossReferenceType, scope=DataContainerType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2591, 12)))

DataContainerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClassificationCrossReference'), ClassificationCrossReferenceType, scope=DataContainerType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2592, 12)))

DataContainerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteClassificationReference'), DeleteClassificationReferenceType, scope=DataContainerType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2593, 12)))

DataContainerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EntityCrossReference'), EntityCrossReferenceType, scope=DataContainerType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2594, 12)))

DataContainerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteEntityCrossReference'), DeleteEntityCrossReferenceType, scope=DataContainerType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2595, 12)))

DataContainerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ProductCrossReference'), ProductCrossReferenceType, scope=DataContainerType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2596, 12)))

DataContainerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteProductCrossReference'), DeleteProductCrossReferenceType, scope=DataContainerType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2597, 12)))

def _BuildAutomaton_120 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_120
    del _BuildAutomaton_120
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2589, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2590, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2591, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2592, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2593, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2594, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2595, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2596, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2597, 12))
    counters.add(cc_8)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DataContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Values')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2589, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DataContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssetCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2590, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DataContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteAssetCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2591, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DataContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClassificationCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2592, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(DataContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteClassificationReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2593, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(DataContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EntityCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2594, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(DataContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteEntityCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2595, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(DataContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ProductCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2596, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(DataContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteProductCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2597, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DataContainerType._Automaton = _BuildAutomaton_120()




DeleteDataContainerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Values'), ValuesType, scope=DeleteDataContainerType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2936, 12)))

DeleteDataContainerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssetCrossReference'), AssetCrossReferenceType, scope=DeleteDataContainerType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2937, 12)))

DeleteDataContainerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClassificationCrossReference'), ClassificationCrossReferenceType, scope=DeleteDataContainerType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2938, 12)))

DeleteDataContainerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EntityCrossReference'), EntityCrossReferenceType, scope=DeleteDataContainerType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2939, 12)))

DeleteDataContainerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ProductCrossReference'), ProductCrossReferenceType, scope=DeleteDataContainerType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2940, 12)))

def _BuildAutomaton_121 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_121
    del _BuildAutomaton_121
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2936, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2937, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2938, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2939, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2940, 12))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeleteDataContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Values')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2936, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DeleteDataContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssetCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2937, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DeleteDataContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClassificationCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2938, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DeleteDataContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EntityCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2939, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(DeleteDataContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ProductCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2940, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DeleteDataContainerType._Automaton = _BuildAutomaton_121()




def _BuildAutomaton_122 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_122
    del _BuildAutomaton_122
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
DeleteValueType._Automaton = _BuildAutomaton_122()




EdgeTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink'), DimensionLinkType, scope=EdgeTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3474, 12)))

EdgeTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink'), AttributeLinkType, scope=EdgeTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3475, 12)))

def _BuildAutomaton_123 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_123
    del _BuildAutomaton_123
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3474, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3475, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(EdgeTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3474, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(EdgeTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3475, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
EdgeTypeType._Automaton = _BuildAutomaton_123()




FootnoteTagGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=FootnoteTagGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4014, 12)))

FootnoteTagGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=FootnoteTagGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4015, 12)))

FootnoteTagGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), AttributeGroupLinkType, scope=FootnoteTagGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4016, 12)))

FootnoteTagGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FootnoteTagGroup'), FootnoteTagGroupType, scope=FootnoteTagGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4017, 12)))

def _BuildAutomaton_124 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_124
    del _BuildAutomaton_124
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4014, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4015, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4016, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4017, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(FootnoteTagGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4014, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(FootnoteTagGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4015, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(FootnoteTagGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4016, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(FootnoteTagGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FootnoteTagGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4017, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
FootnoteTagGroupType._Automaton = _BuildAutomaton_124()




HyperlinkTagGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=HyperlinkTagGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4199, 12)))

HyperlinkTagGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=HyperlinkTagGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4200, 12)))

HyperlinkTagGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), AttributeGroupLinkType, scope=HyperlinkTagGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4201, 12)))

HyperlinkTagGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HyperlinkTagGroup'), HyperlinkTagGroupType, scope=HyperlinkTagGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4202, 12)))

def _BuildAutomaton_125 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_125
    del _BuildAutomaton_125
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4199, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4200, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4201, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4202, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(HyperlinkTagGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4199, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(HyperlinkTagGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4200, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(HyperlinkTagGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4201, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(HyperlinkTagGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HyperlinkTagGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4202, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
HyperlinkTagGroupType._Automaton = _BuildAutomaton_125()




NoteElementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NoteRecord'), NoteRecordType, scope=NoteElementType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5159, 12)))

def _BuildAutomaton_126 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_126
    del _BuildAutomaton_126
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5159, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(NoteElementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NoteRecord')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5159, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
NoteElementType._Automaton = _BuildAutomaton_126()




OnApproveType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LocalBusinessRule'), LocalBusinessRuleType, scope=OnApproveType, documentation='\n                        @Deprecated, may be removed in a future release.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5189, 12)))

def _BuildAutomaton_127 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_127
    del _BuildAutomaton_127
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5189, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(OnApproveType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LocalBusinessRule')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5189, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
OnApproveType._Automaton = _BuildAutomaton_127()




PageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=PageType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5521, 12)))

PageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SuppressedClassificationReference'), SuppressedClassificationReferenceType, scope=PageType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5522, 12)))

PageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClassificationReference'), ClassificationReferenceType, scope=PageType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5524, 12)))

PageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SuppressedProductCrossReference'), SuppressedProductCrossReferenceType, scope=PageType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5526, 12)))

PageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ProductCrossReference'), ProductCrossReferenceType, scope=PageType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5528, 12)))

PageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SuppressedAssetCrossReference'), SuppressedAssetCrossReferenceType, scope=PageType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5530, 12)))

PageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssetCrossReference'), AssetCrossReferenceType, scope=PageType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5532, 12)))

PageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Values'), ValuesType, scope=PageType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5533, 12)))

def _BuildAutomaton_128 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_128
    del _BuildAutomaton_128
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5521, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5522, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5524, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5526, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5528, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5530, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5532, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5533, 12))
    counters.add(cc_7)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5521, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SuppressedClassificationReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5522, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClassificationReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5524, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SuppressedProductCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5526, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(PageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ProductCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5528, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(PageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SuppressedAssetCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5530, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(PageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssetCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5532, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(PageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Values')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5533, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PageType._Automaton = _BuildAutomaton_128()




PlannedPageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=PlannedPageType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5574, 12)))

PlannedPageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=PlannedPageType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5575, 12)))

PlannedPageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Basket'), BasketType, scope=PlannedPageType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5576, 12)))

PlannedPageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VersionLink'), VersionLinkType, scope=PlannedPageType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5577, 12)))

PlannedPageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TemplateLayout'), TemplateLayoutType, scope=PlannedPageType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5579, 16)))

PlannedPageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PickupPage'), PickupPageType, scope=PlannedPageType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5580, 16)))

PlannedPageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PageContents'), PageContentsType, scope=PlannedPageType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5582, 12)))

def _BuildAutomaton_129 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_129
    del _BuildAutomaton_129
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5574, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5575, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5576, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5577, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5578, 12))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PlannedPageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5574, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PlannedPageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5575, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PlannedPageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Basket')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5576, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PlannedPageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VersionLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5577, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PlannedPageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TemplateLayout')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5579, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PlannedPageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PickupPage')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5580, 16))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PlannedPageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PageContents')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5582, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PlannedPageType._Automaton = _BuildAutomaton_129()




SampleFileType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SampleFileContents'), ConfigurationType, scope=SampleFileType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6771, 12)))

def _BuildAutomaton_130 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_130
    del _BuildAutomaton_130
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SampleFileType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SampleFileContents')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6771, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SampleFileType._Automaton = _BuildAutomaton_130()




SpecialCharacterTagGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=SpecialCharacterTagGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6946, 12)))

SpecialCharacterTagGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=SpecialCharacterTagGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6947, 12)))

SpecialCharacterTagGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), AttributeGroupLinkType, scope=SpecialCharacterTagGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6948, 12)))

SpecialCharacterTagGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SpecialCharacterTagGroup'), SpecialCharacterTagGroupType, scope=SpecialCharacterTagGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6949, 12)))

def _BuildAutomaton_131 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_131
    del _BuildAutomaton_131
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6946, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6947, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6948, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6949, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SpecialCharacterTagGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6946, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SpecialCharacterTagGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6947, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SpecialCharacterTagGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6948, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SpecialCharacterTagGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SpecialCharacterTagGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6949, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SpecialCharacterTagGroupType._Automaton = _BuildAutomaton_131()




StatusFlagType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink'), SetupGroupLinkType, scope=StatusFlagType, documentation='\n                        Setup groups the status flag is located in.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7023, 12)))

StatusFlagType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=StatusFlagType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7030, 12)))

def _BuildAutomaton_132 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_132
    del _BuildAutomaton_132
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7023, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7030, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(StatusFlagType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7023, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(StatusFlagType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7030, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
StatusFlagType._Automaton = _BuildAutomaton_132()




def _BuildAutomaton_133 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_133
    del _BuildAutomaton_133
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
TextElementType._Automaton = _BuildAutomaton_133()




CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReplacementRules'), ReplacementRulesType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 9, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TagGroupList'), TagGroupListType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 10, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TagList'), TagListType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 11, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DimensionList'), DimensionListType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 12, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Qualifiers'), QualifiersType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 13, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ContextList'), ContextListType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 14, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CrossContexts'), CrossContextsType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 15, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GlobalSettings'), GlobalSettingsType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 16, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UserTypes'), UserTypesType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 17, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Keys'), KeysType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 18, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EdgeTypes'), EdgeTypesType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 19, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DerivedEventTypes'), DerivedEventTypesType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 20, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CrossReferenceTypes'), CrossReferenceTypesType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 21, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteAssets'), DeleteAssetsType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 22, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteProducts'), DeleteProductsType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 23, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteEntities'), DeleteEntitiesType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 24, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteClassifications'), DeleteClassificationsType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 25, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UnitList'), UnitListType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 26, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CollectionList'), CollectionListType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 27, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ListOfValuesGroupList'), ListOfValuesGroupListType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 28, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ListsOfValues'), ListsOfValuesType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 29, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupList'), AttributeGroupListType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 30, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeList'), AttributeListType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 31, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeTransformationGroups'), AttributeTransformationGroupsType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 32, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TableColors'), TableColorsType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 34, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TableRules'), TableRulesType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 35, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TableTypeGroupList'), RowColumnTableGroupListType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 36, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ColumnTypeGroupList'), RowColumnTableGroupListType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 37, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RowTypeGroupList'), RowColumnTableGroupListType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 38, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TableTypes'), TableTypesType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 39, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ColumnTypes'), ColumnTypesType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 40, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RowTypes'), RowTypesType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 41, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DataContainerTypes'), DataContainerTypesType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 42, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SetupGroups'), SetupGroupsType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 43, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SetupEntities'), SetupEntitiesType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 44, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BusinessLibraries'), BusinessLibrariesType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 45, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BusinessRules'), BusinessRulesType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 46, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'STEPWorkflows'), STEPWorkflowsType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 47, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StatusFlags'), StatusFlagsType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 48, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'STEPWorkflowProfiles'), STEPWorkflowProfilesType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 49, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MatchCodes'), MatchCodesType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 50, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MatchingAlgorithms'), MatchingAlgorithmsType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 51, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Classifications'), ClassificationsType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 52, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PublicationGroups'), PublicationGroupsType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 53, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Assets'), AssetsType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 54, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Entities'), EntitiesType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 55, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Products'), ProductsType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 56, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ActionSetList'), ActionSetListType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 57, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UserGroupList'), UserGroupListType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 58, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UserList'), UserListType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 59, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SystemSetup'), SystemSetupType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 60, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ImportConfigurations'), ImportConfigurationsType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 61, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExportConfigurations'), ExportConfigurationsType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 62, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TranslationConfigurations'), TranslationConfigurationsType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 63, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BulkUpdateConfigurations'), BulkUpdateConfigurationsType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 64, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TransformationLookupTableConfigurations'), TransformationLookupTableConfigurationsType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 65, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ImageConversionConfigurations'), ImageConversionConfigurationsType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 66, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssetPushEventQueues'), AssetPushEventQueuesType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 67, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssetPushConfigurations'), AssetPushConfigurationsType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 68, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ECatalogs'), ECatalogsType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 69, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PortalConfigurations'), PortalConfigurationsType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 70, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteUnits'), DeleteUnitsType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 71, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteAttributes'), DeleteAttributesType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 72, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteListOfValues'), DeleteListOfValuesType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 73, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EventQueues'), EventQueuesType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 74, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MissingObjects'), MissingObjectsType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 75, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IntegrationEndpoints'), IntegrationEndpointsType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 76, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EventProcessors'), EventProcessorsType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 77, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ChangePackages'), ChangePackagesType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 78, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ComponentModels'), ComponentModelsType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 79, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScheduledProcesses'), ScheduledProcessesType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 80, 16)))

def _BuildAutomaton_134 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_134
    del _BuildAutomaton_134
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 9, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 10, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 11, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 12, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 13, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 14, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 15, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 16, 16))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 17, 16))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 18, 16))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 19, 16))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 20, 16))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 21, 16))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 22, 16))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 23, 16))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 24, 16))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 25, 16))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 26, 16))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 27, 16))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 28, 16))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 29, 16))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 30, 16))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 31, 16))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 32, 16))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 34, 16))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 35, 16))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 36, 16))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 37, 16))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 38, 16))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 39, 16))
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 40, 16))
    counters.add(cc_30)
    cc_31 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 41, 16))
    counters.add(cc_31)
    cc_32 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 42, 16))
    counters.add(cc_32)
    cc_33 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 43, 16))
    counters.add(cc_33)
    cc_34 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 44, 16))
    counters.add(cc_34)
    cc_35 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 45, 16))
    counters.add(cc_35)
    cc_36 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 46, 16))
    counters.add(cc_36)
    cc_37 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 47, 16))
    counters.add(cc_37)
    cc_38 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 48, 16))
    counters.add(cc_38)
    cc_39 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 49, 16))
    counters.add(cc_39)
    cc_40 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 50, 16))
    counters.add(cc_40)
    cc_41 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 51, 16))
    counters.add(cc_41)
    cc_42 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 52, 16))
    counters.add(cc_42)
    cc_43 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 53, 16))
    counters.add(cc_43)
    cc_44 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 54, 16))
    counters.add(cc_44)
    cc_45 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 55, 16))
    counters.add(cc_45)
    cc_46 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 56, 16))
    counters.add(cc_46)
    cc_47 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 57, 16))
    counters.add(cc_47)
    cc_48 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 58, 16))
    counters.add(cc_48)
    cc_49 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 59, 16))
    counters.add(cc_49)
    cc_50 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 60, 16))
    counters.add(cc_50)
    cc_51 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 61, 16))
    counters.add(cc_51)
    cc_52 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 62, 16))
    counters.add(cc_52)
    cc_53 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 63, 16))
    counters.add(cc_53)
    cc_54 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 64, 16))
    counters.add(cc_54)
    cc_55 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 65, 16))
    counters.add(cc_55)
    cc_56 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 66, 16))
    counters.add(cc_56)
    cc_57 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 67, 16))
    counters.add(cc_57)
    cc_58 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 68, 16))
    counters.add(cc_58)
    cc_59 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 69, 16))
    counters.add(cc_59)
    cc_60 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 70, 16))
    counters.add(cc_60)
    cc_61 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 71, 16))
    counters.add(cc_61)
    cc_62 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 72, 16))
    counters.add(cc_62)
    cc_63 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 73, 16))
    counters.add(cc_63)
    cc_64 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 74, 16))
    counters.add(cc_64)
    cc_65 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 75, 16))
    counters.add(cc_65)
    cc_66 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 76, 16))
    counters.add(cc_66)
    cc_67 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 77, 16))
    counters.add(cc_67)
    cc_68 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 78, 16))
    counters.add(cc_68)
    cc_69 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 79, 16))
    counters.add(cc_69)
    cc_70 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 80, 16))
    counters.add(cc_70)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReplacementRules')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 9, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TagGroupList')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 10, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TagList')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 11, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DimensionList')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 12, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Qualifiers')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 13, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ContextList')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 14, 16))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CrossContexts')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 15, 16))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GlobalSettings')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 16, 16))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UserTypes')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 17, 16))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Keys')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 18, 16))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EdgeTypes')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 19, 16))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DerivedEventTypes')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 20, 16))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CrossReferenceTypes')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 21, 16))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteAssets')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 22, 16))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteProducts')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 23, 16))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteEntities')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 24, 16))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteClassifications')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 25, 16))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UnitList')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 26, 16))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CollectionList')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 27, 16))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ListOfValuesGroupList')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 28, 16))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ListsOfValues')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 29, 16))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupList')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 30, 16))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeList')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 31, 16))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeTransformationGroups')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 32, 16))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TableColors')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 34, 16))
    st_24 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TableRules')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 35, 16))
    st_25 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_26, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TableTypeGroupList')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 36, 16))
    st_26 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_27, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ColumnTypeGroupList')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 37, 16))
    st_27 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_28, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RowTypeGroupList')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 38, 16))
    st_28 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_29, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TableTypes')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 39, 16))
    st_29 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_30, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ColumnTypes')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 40, 16))
    st_30 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_31, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RowTypes')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 41, 16))
    st_31 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_31)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_32, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DataContainerTypes')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 42, 16))
    st_32 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_32)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_33, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SetupGroups')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 43, 16))
    st_33 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_33)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_34, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SetupEntities')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 44, 16))
    st_34 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_34)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_35, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BusinessLibraries')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 45, 16))
    st_35 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_35)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_36, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BusinessRules')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 46, 16))
    st_36 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_36)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_37, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'STEPWorkflows')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 47, 16))
    st_37 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_37)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_38, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StatusFlags')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 48, 16))
    st_38 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_38)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_39, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'STEPWorkflowProfiles')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 49, 16))
    st_39 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_39)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_40, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MatchCodes')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 50, 16))
    st_40 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_40)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_41, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MatchingAlgorithms')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 51, 16))
    st_41 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_41)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_42, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Classifications')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 52, 16))
    st_42 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_42)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_43, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PublicationGroups')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 53, 16))
    st_43 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_43)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_44, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Assets')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 54, 16))
    st_44 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_44)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_45, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Entities')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 55, 16))
    st_45 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_45)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_46, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Products')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 56, 16))
    st_46 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_46)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_47, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ActionSetList')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 57, 16))
    st_47 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_47)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_48, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UserGroupList')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 58, 16))
    st_48 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_48)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_49, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UserList')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 59, 16))
    st_49 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_49)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_50, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SystemSetup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 60, 16))
    st_50 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_50)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_51, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ImportConfigurations')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 61, 16))
    st_51 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_51)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_52, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExportConfigurations')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 62, 16))
    st_52 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_52)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_53, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TranslationConfigurations')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 63, 16))
    st_53 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_53)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_54, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BulkUpdateConfigurations')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 64, 16))
    st_54 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_54)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_55, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TransformationLookupTableConfigurations')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 65, 16))
    st_55 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_55)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_56, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ImageConversionConfigurations')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 66, 16))
    st_56 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_56)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_57, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssetPushEventQueues')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 67, 16))
    st_57 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_57)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_58, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssetPushConfigurations')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 68, 16))
    st_58 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_58)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_59, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ECatalogs')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 69, 16))
    st_59 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_59)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_60, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PortalConfigurations')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 70, 16))
    st_60 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_60)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_61, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteUnits')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 71, 16))
    st_61 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_61)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_62, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteAttributes')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 72, 16))
    st_62 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_62)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_63, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteListOfValues')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 73, 16))
    st_63 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_63)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_64, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EventQueues')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 74, 16))
    st_64 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_64)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_65, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MissingObjects')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 75, 16))
    st_65 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_65)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_66, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IntegrationEndpoints')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 76, 16))
    st_66 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_66)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_67, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EventProcessors')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 77, 16))
    st_67 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_67)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_68, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ChangePackages')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 78, 16))
    st_68 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_68)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_69, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ComponentModels')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 79, 16))
    st_69 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_69)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_70, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScheduledProcesses')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 80, 16))
    st_70 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_70)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_24, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_25, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_25, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_26, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_26, False) ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_27, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_27, False) ]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_28, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_28, False) ]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_29, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_29, False) ]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_30, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_30, False) ]))
    st_30._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_31, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_31, False) ]))
    st_31._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_32, True) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_32, False) ]))
    st_32._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_33, True) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_33, False) ]))
    st_33._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_34, True) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_34, False) ]))
    st_34._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_35, True) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_35, False) ]))
    st_35._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_36, True) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_36, False) ]))
    st_36._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_37, True) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_37, False) ]))
    st_37._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_38, True) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_38, False) ]))
    st_38._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_39, True) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_39, False) ]))
    st_39._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_40, True) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_40, False) ]))
    st_40._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_41, True) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_41, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_41, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_41, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_41, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_41, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_41, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_41, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_41, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_41, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_41, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_41, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_41, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_41, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_41, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_41, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_41, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_41, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_41, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_41, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_41, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_41, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_41, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_41, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_41, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_41, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_41, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_41, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_41, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_41, False) ]))
    st_41._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_42, True) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_42, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_42, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_42, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_42, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_42, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_42, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_42, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_42, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_42, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_42, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_42, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_42, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_42, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_42, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_42, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_42, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_42, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_42, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_42, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_42, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_42, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_42, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_42, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_42, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_42, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_42, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_42, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_42, False) ]))
    st_42._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_43, True) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_43, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_43, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_43, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_43, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_43, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_43, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_43, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_43, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_43, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_43, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_43, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_43, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_43, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_43, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_43, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_43, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_43, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_43, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_43, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_43, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_43, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_43, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_43, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_43, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_43, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_43, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_43, False) ]))
    st_43._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_44, True) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_44, False) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_44, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_44, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_44, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_44, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_44, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_44, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_44, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_44, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_44, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_44, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_44, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_44, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_44, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_44, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_44, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_44, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_44, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_44, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_44, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_44, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_44, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_44, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_44, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_44, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_44, False) ]))
    st_44._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_45, True) ]))
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_45, False) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_45, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_45, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_45, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_45, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_45, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_45, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_45, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_45, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_45, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_45, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_45, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_45, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_45, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_45, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_45, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_45, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_45, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_45, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_45, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_45, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_45, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_45, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_45, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_45, False) ]))
    st_45._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_46, [
        fac.UpdateInstruction(cc_46, True) ]))
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_46, False) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_46, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_46, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_46, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_46, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_46, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_46, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_46, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_46, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_46, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_46, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_46, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_46, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_46, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_46, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_46, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_46, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_46, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_46, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_46, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_46, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_46, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_46, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_46, False) ]))
    st_46._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_47, [
        fac.UpdateInstruction(cc_47, True) ]))
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_47, False) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_47, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_47, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_47, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_47, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_47, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_47, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_47, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_47, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_47, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_47, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_47, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_47, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_47, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_47, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_47, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_47, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_47, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_47, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_47, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_47, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_47, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_47, False) ]))
    st_47._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_48, [
        fac.UpdateInstruction(cc_48, True) ]))
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_48, False) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_48, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_48, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_48, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_48, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_48, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_48, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_48, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_48, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_48, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_48, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_48, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_48, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_48, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_48, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_48, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_48, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_48, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_48, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_48, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_48, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_48, False) ]))
    st_48._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_49, [
        fac.UpdateInstruction(cc_49, True) ]))
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_49, False) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_49, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_49, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_49, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_49, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_49, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_49, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_49, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_49, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_49, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_49, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_49, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_49, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_49, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_49, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_49, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_49, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_49, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_49, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_49, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_49, False) ]))
    st_49._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_50, [
        fac.UpdateInstruction(cc_50, True) ]))
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_50, False) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_50, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_50, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_50, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_50, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_50, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_50, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_50, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_50, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_50, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_50, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_50, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_50, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_50, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_50, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_50, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_50, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_50, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_50, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_50, False) ]))
    st_50._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_51, [
        fac.UpdateInstruction(cc_51, True) ]))
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_51, False) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_51, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_51, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_51, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_51, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_51, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_51, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_51, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_51, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_51, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_51, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_51, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_51, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_51, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_51, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_51, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_51, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_51, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_51, False) ]))
    st_51._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_52, [
        fac.UpdateInstruction(cc_52, True) ]))
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_52, False) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_52, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_52, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_52, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_52, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_52, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_52, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_52, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_52, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_52, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_52, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_52, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_52, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_52, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_52, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_52, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_52, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_52, False) ]))
    st_52._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_53, [
        fac.UpdateInstruction(cc_53, True) ]))
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_53, False) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_53, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_53, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_53, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_53, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_53, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_53, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_53, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_53, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_53, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_53, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_53, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_53, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_53, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_53, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_53, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_53, False) ]))
    st_53._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_54, [
        fac.UpdateInstruction(cc_54, True) ]))
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_54, False) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_54, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_54, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_54, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_54, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_54, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_54, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_54, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_54, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_54, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_54, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_54, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_54, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_54, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_54, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_54, False) ]))
    st_54._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_55, [
        fac.UpdateInstruction(cc_55, True) ]))
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_55, False) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_55, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_55, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_55, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_55, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_55, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_55, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_55, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_55, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_55, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_55, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_55, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_55, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_55, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_55, False) ]))
    st_55._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_56, [
        fac.UpdateInstruction(cc_56, True) ]))
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_56, False) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_56, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_56, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_56, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_56, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_56, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_56, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_56, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_56, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_56, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_56, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_56, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_56, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_56, False) ]))
    st_56._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_57, [
        fac.UpdateInstruction(cc_57, True) ]))
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_57, False) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_57, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_57, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_57, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_57, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_57, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_57, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_57, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_57, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_57, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_57, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_57, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_57, False) ]))
    st_57._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_58, [
        fac.UpdateInstruction(cc_58, True) ]))
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_58, False) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_58, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_58, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_58, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_58, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_58, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_58, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_58, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_58, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_58, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_58, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_58, False) ]))
    st_58._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_59, [
        fac.UpdateInstruction(cc_59, True) ]))
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_59, False) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_59, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_59, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_59, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_59, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_59, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_59, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_59, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_59, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_59, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_59, False) ]))
    st_59._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_60, [
        fac.UpdateInstruction(cc_60, True) ]))
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_60, False) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_60, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_60, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_60, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_60, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_60, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_60, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_60, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_60, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_60, False) ]))
    st_60._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_61, [
        fac.UpdateInstruction(cc_61, True) ]))
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_61, False) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_61, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_61, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_61, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_61, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_61, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_61, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_61, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_61, False) ]))
    st_61._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_62, [
        fac.UpdateInstruction(cc_62, True) ]))
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_62, False) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_62, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_62, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_62, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_62, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_62, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_62, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_62, False) ]))
    st_62._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_63, [
        fac.UpdateInstruction(cc_63, True) ]))
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_63, False) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_63, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_63, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_63, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_63, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_63, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_63, False) ]))
    st_63._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_64, [
        fac.UpdateInstruction(cc_64, True) ]))
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_64, False) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_64, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_64, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_64, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_64, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_64, False) ]))
    st_64._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_65, [
        fac.UpdateInstruction(cc_65, True) ]))
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_65, False) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_65, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_65, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_65, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_65, False) ]))
    st_65._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_66, [
        fac.UpdateInstruction(cc_66, True) ]))
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_66, False) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_66, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_66, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_66, False) ]))
    st_66._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_67, [
        fac.UpdateInstruction(cc_67, True) ]))
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_67, False) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_67, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_67, False) ]))
    st_67._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_68, [
        fac.UpdateInstruction(cc_68, True) ]))
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_68, False) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_68, False) ]))
    st_68._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_69, [
        fac.UpdateInstruction(cc_69, True) ]))
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_69, False) ]))
    st_69._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_70, [
        fac.UpdateInstruction(cc_70, True) ]))
    st_70._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton_134()




ActionSetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=ActionSetType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 404, 12)))

ActionSetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=ActionSetType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 405, 12)))

ActionSetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ActionLink'), ActionLinkType, scope=ActionSetType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 406, 12)))

def _BuildAutomaton_135 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_135
    del _BuildAutomaton_135
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 404, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 405, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 406, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ActionSetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 404, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ActionSetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 405, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ActionSetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ActionLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 406, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ActionSetType._Automaton = _BuildAutomaton_135()




AssetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=AssetType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 448, 12)))

AssetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=AssetType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 449, 12)))

AssetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssetPushLocation'), AssetPushLocationType, scope=AssetType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 450, 12)))

AssetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedClassificationReference'), DeleteSuppressedClassificationReferenceType, scope=AssetType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 452, 16)))

AssetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteClassificationReference'), DeleteClassificationReferenceType, scope=AssetType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 454, 16)))

AssetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SuppressedClassificationReference'), SuppressedClassificationReferenceType, scope=AssetType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 456, 16)))

AssetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClassificationReference'), ClassificationReferenceType, scope=AssetType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 458, 16)))

AssetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedEntityCrossReference'), DeleteSuppressedEntityCrossReferenceType, scope=AssetType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 462, 16)))

AssetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteEntityCrossReference'), DeleteEntityCrossReferenceType, scope=AssetType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 464, 16)))

AssetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SuppressedEntityCrossReference'), SuppressedEntityCrossReferenceType, scope=AssetType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 466, 16)))

AssetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EntityCrossReference'), EntityCrossReferenceType, scope=AssetType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 468, 16)))

AssetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Values'), ValuesType, scope=AssetType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 471, 12)))

AssetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CurrentTasks'), CurrentTasksType, scope=AssetType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 472, 12)))

AssetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pages'), PagesType, scope=AssetType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 473, 12)))

AssetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssetContent'), AssetContentType, scope=AssetType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 474, 12)))

AssetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssetBinaryContent'), AssetBinaryContentType, scope=AssetType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 475, 12)))

def _BuildAutomaton_136 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_136
    del _BuildAutomaton_136
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 448, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 449, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 450, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 452, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 454, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 456, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 458, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 462, 16))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 464, 16))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 466, 16))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 468, 16))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 471, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 472, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 473, 12))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 474, 12))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 475, 12))
    counters.add(cc_15)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AssetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 448, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AssetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 449, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AssetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssetPushLocation')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 450, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(AssetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedClassificationReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 452, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(AssetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteClassificationReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 454, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(AssetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SuppressedClassificationReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 456, 16))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(AssetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClassificationReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 458, 16))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(AssetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedEntityCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 462, 16))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(AssetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteEntityCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 464, 16))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(AssetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SuppressedEntityCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 466, 16))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(AssetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EntityCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 468, 16))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(AssetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Values')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 471, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(AssetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CurrentTasks')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 472, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(AssetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pages')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 473, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(AssetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssetContent')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 474, 12))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(AssetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssetBinaryContent')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 475, 12))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AssetType._Automaton = _BuildAutomaton_136()




AssetBinaryContentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BinaryContent'), ConfigurationType, scope=AssetBinaryContentType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 545, 12)))

def _BuildAutomaton_137 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_137
    del _BuildAutomaton_137
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AssetBinaryContentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BinaryContent')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 545, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AssetBinaryContentType._Automaton = _BuildAutomaton_137()




AssetBasketLinkType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=AssetBasketLinkType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 562, 12)))

def _BuildAutomaton_138 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_138
    del _BuildAutomaton_138
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 561, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AssetBasketLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 562, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AssetBasketLinkType._Automaton = _BuildAutomaton_138()




AssetCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=AssetCrossReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 573, 12)))

AssetCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=AssetCrossReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 575, 16)))

AssetCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Asset'), AssetType, scope=AssetCrossReferenceType, documentation='\n                            Embedded reference target. Has no effect during import.\n                        ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 576, 16)))

def _BuildAutomaton_139 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_139
    del _BuildAutomaton_139
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 573, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 574, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 575, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 576, 16))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AssetCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 573, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AssetCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 575, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(AssetCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Asset')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 576, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AssetCrossReferenceType._Automaton = _BuildAutomaton_139()




AssetCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=AssetCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 642, 12)))

AssetCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=AssetCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 643, 12)))

AssetCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink'), AttributeLinkType, scope=AssetCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 644, 12)))

AssetCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink'), DimensionLinkType, scope=AssetCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 645, 12)))

AssetCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), AttributeGroupLinkType, scope=AssetCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 646, 12)))

AssetCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink'), UserTypeLinkType, scope=AssetCrossReferenceTypeType, documentation='\n                        Link to a valid source type. Notice that this source can be a DataContainerType.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 647, 12)))

AssetCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TargetUserTypeLink'), TargetUserTypeLinkType, scope=AssetCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 654, 12)))

def _BuildAutomaton_140 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_140
    del _BuildAutomaton_140
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 642, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 643, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 644, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 645, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 646, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 647, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 654, 12))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AssetCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 642, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AssetCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 643, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AssetCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 644, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(AssetCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 645, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(AssetCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 646, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(AssetCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 647, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(AssetCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TargetUserTypeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 654, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AssetCrossReferenceTypeType._Automaton = _BuildAutomaton_140()




AssetElementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RuleBasedLayout'), RuleBasedLayoutType, scope=AssetElementType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 713, 12)))

AssetElementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=AssetElementType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 714, 12)))

AssetElementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TemplateLayout'), TemplateLayoutType, scope=AssetElementType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 715, 12)))

AssetElementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PickupLayout'), PickupLayoutType, scope=AssetElementType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 716, 12)))

def _BuildAutomaton_141 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_141
    del _BuildAutomaton_141
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 712, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AssetElementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RuleBasedLayout')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 713, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AssetElementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 714, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AssetElementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TemplateLayout')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 715, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AssetElementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PickupLayout')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 716, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AssetElementType._Automaton = _BuildAutomaton_141()




AssetPushEventQueueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=AssetPushEventQueueType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 748, 12)))

AssetPushEventQueueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=AssetPushEventQueueType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 749, 12)))

def _BuildAutomaton_142 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_142
    del _BuildAutomaton_142
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 748, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 749, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AssetPushEventQueueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 748, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AssetPushEventQueueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 749, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AssetPushEventQueueType._Automaton = _BuildAutomaton_142()




AssetPushConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=AssetPushConfigurationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 782, 12)))

AssetPushConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssetPushMIMETypes'), AssetPushConfigurationMIMETypesType, scope=AssetPushConfigurationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 783, 12)))

AssetPushConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssetPushAttributes'), AssetPushConfigurationAttributesType, scope=AssetPushConfigurationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 784, 12)))

AssetPushConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssetPushClassifications'), AssetPushConfigurationClassificationsType, scope=AssetPushConfigurationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 785, 12)))

AssetPushConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssetPushEventQueues'), AssetPushConfigurationEventQueuesType, scope=AssetPushConfigurationType, documentation='\n                        @Deprecated, not used anymore, replaced with EventQueueLink.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 786, 12)))

AssetPushConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EventQueueLink'), EventQueueLinkType, scope=AssetPushConfigurationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 793, 12)))

def _BuildAutomaton_143 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_143
    del _BuildAutomaton_143
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 782, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 783, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 784, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 785, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 786, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 793, 12))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AssetPushConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 782, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AssetPushConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssetPushMIMETypes')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 783, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AssetPushConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssetPushAttributes')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 784, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(AssetPushConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssetPushClassifications')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 785, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(AssetPushConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssetPushEventQueues')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 786, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(AssetPushConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EventQueueLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 793, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AssetPushConfigurationType._Automaton = _BuildAutomaton_143()




def _BuildAutomaton_144 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_144
    del _BuildAutomaton_144
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
AssetPushLocationType._Automaton = _BuildAutomaton_144()




AssetsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Asset'), AssetType, scope=AssetsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 883, 12)))

def _BuildAutomaton_145 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_145
    del _BuildAutomaton_145
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 883, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AssetsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Asset')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 883, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AssetsType._Automaton = _BuildAutomaton_145()




AttributeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=AttributeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 922, 12)))

AttributeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Validation'), ValidationType, scope=AttributeType, documentation='\n                            Validation specification for non-LOV based attributes. During import, for existing\n                            attributes with values, the validation can be modified if the import is running in single\n                            update mode and no conflicting present values exist. Existing attributes can be changed to\n                            be LOV validated if the import is running in single update mode, the revisability settings\n                            (externally maintained or not) of attribute and LOV match and if the existing data fits the\n                            LOV validation. In this case existing values will be added to the LOV.\n                        ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 924, 16)))

AttributeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ListOfValueLink'), ListOfValueLinkType, scope=AttributeType, documentation='\n                            List of values link for LOV-validated attributes. Existing attributes can be changed to not\n                            be LOV validated if the import is running in single update mode and the existing values\n                            match the defined (target) validation.\n                        ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 936, 16)))

AttributeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValueTemplate'), ValueTemplateType, scope=AttributeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 947, 16)))

AttributeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UnitTemplate'), UnitTemplateType, scope=AttributeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 948, 16)))

AttributeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink'), DimensionLinkType, scope=AttributeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 950, 12)))

AttributeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=AttributeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 951, 12)))

AttributeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), AttributeGroupLinkType, scope=AttributeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 952, 12)))

AttributeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink'), UserTypeLinkType, scope=AttributeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 953, 12)))

AttributeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LinkType'), LinkTypeType, scope=AttributeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 954, 12)))

AttributeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValueFilter'), ValueFilterType, scope=AttributeType, documentation='\n                        LOV value filter.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 955, 12)))

AttributeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CurrentTasks'), CurrentTasksType, scope=AttributeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 962, 12)))

def _BuildAutomaton_146 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_146
    del _BuildAutomaton_146
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 922, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 924, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 946, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 950, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 951, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 952, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 953, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 954, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 955, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 962, 12))
    counters.add(cc_9)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AttributeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 922, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AttributeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Validation')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 924, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AttributeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ListOfValueLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 936, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AttributeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValueTemplate')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 947, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AttributeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UnitTemplate')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 948, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(AttributeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 950, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(AttributeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 951, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(AttributeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 952, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(AttributeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 953, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(AttributeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LinkType')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 954, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(AttributeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValueFilter')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 955, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(AttributeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CurrentTasks')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 962, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AttributeType._Automaton = _BuildAutomaton_146()




AttributeGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=AttributeGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1118, 12)))

AttributeGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=AttributeGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1119, 12)))

AttributeGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), ConfigurationType, scope=AttributeGroupType, documentation='\n                        View definition in encoded form.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1120, 12)))

AttributeGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeSequence'), AttributeSequenceType, scope=AttributeGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1127, 12)))

AttributeGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroup'), AttributeGroupType, scope=AttributeGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1128, 12)))

def _BuildAutomaton_147 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_147
    del _BuildAutomaton_147
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1118, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1119, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1120, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1127, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1128, 12))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AttributeGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1118, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AttributeGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1119, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AttributeGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Configuration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1120, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(AttributeGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeSequence')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1127, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(AttributeGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1128, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AttributeGroupType._Automaton = _BuildAutomaton_147()




AttributeLinkType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=AttributeLinkType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1205, 12)))

AttributeLinkType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValueFilter'), ValueFilterType, scope=AttributeLinkType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1206, 12)))

def _BuildAutomaton_148 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_148
    del _BuildAutomaton_148
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1205, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1206, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AttributeLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1205, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AttributeLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValueFilter')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1206, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AttributeLinkType._Automaton = _BuildAutomaton_148()




AttributeTransformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=AttributeTransformationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1282, 12)))

AttributeTransformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink'), UserTypeLinkType, scope=AttributeTransformationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1283, 12)))

AttributeTransformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), AttributeGroupLinkType, scope=AttributeTransformationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1284, 12)))

AttributeTransformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink'), AttributeLinkType, scope=AttributeTransformationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1285, 12)))

AttributeTransformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), ConfigurationType, scope=AttributeTransformationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1286, 12)))

def _BuildAutomaton_149 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_149
    del _BuildAutomaton_149
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1282, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1283, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1284, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1285, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1286, 12))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AttributeTransformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1282, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AttributeTransformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1283, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AttributeTransformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1284, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(AttributeTransformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1285, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(AttributeTransformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Configuration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1286, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AttributeTransformationType._Automaton = _BuildAutomaton_149()




AttributeTransformationGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=AttributeTransformationGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1314, 12)))

AttributeTransformationGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeTransformationGroup'), AttributeTransformationGroupType, scope=AttributeTransformationGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1315, 12)))

AttributeTransformationGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeTransformation'), AttributeTransformationType, scope=AttributeTransformationGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1317, 12)))

def _BuildAutomaton_150 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_150
    del _BuildAutomaton_150
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1314, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1315, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1317, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AttributeTransformationGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1314, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AttributeTransformationGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeTransformationGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1315, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AttributeTransformationGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeTransformation')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1317, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AttributeTransformationGroupType._Automaton = _BuildAutomaton_150()




AutoPageAssetLinkType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=AutoPageAssetLinkType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1346, 12)))

def _BuildAutomaton_151 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_151
    del _BuildAutomaton_151
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1345, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AutoPageAssetLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1346, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AutoPageAssetLinkType._Automaton = _BuildAutomaton_151()




AutoPageClassificationLinkType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=AutoPageClassificationLinkType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1352, 12)))

def _BuildAutomaton_152 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_152
    del _BuildAutomaton_152
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1351, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AutoPageClassificationLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1352, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AutoPageClassificationLinkType._Automaton = _BuildAutomaton_152()




AutoPageProductLinkType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=AutoPageProductLinkType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1358, 12)))

def _BuildAutomaton_153 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_153
    del _BuildAutomaton_153
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1357, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AutoPageProductLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1358, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AutoPageProductLinkType._Automaton = _BuildAutomaton_153()




BusinessRuleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink'), SetupGroupLinkType, scope=BusinessRuleType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1497, 12)))

BusinessRuleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=BusinessRuleType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1498, 12)))

BusinessRuleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Description'), BusinessRuleDescriptionType, scope=BusinessRuleType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1499, 12)))

BusinessRuleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Dependency'), BusinessRuleDependencyType, scope=BusinessRuleType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1500, 12)))

BusinessRuleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FunctionDependency'), BusinessFunctionDependencyType, scope=BusinessRuleType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1501, 12)))

BusinessRuleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OnApprove'), OnApproveType, scope=BusinessRuleType, documentation='\n                        Ignored for business rules of type library.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1502, 12)))

BusinessRuleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), ConfigurationType, scope=BusinessRuleType, documentation='\n                        The configuration in encoded form.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1509, 12)))

BusinessRuleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValidObjectTypes'), ValidObjectTypesType, scope=BusinessRuleType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1516, 12)))

def _BuildAutomaton_154 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_154
    del _BuildAutomaton_154
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1497, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1498, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1499, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1500, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1501, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1502, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1509, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1516, 12))
    counters.add(cc_7)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(BusinessRuleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1497, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(BusinessRuleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1498, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(BusinessRuleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Description')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1499, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(BusinessRuleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Dependency')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1500, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(BusinessRuleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FunctionDependency')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1501, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(BusinessRuleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OnApprove')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1502, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(BusinessRuleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Configuration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1509, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(BusinessRuleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValidObjectTypes')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1516, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
BusinessRuleType._Automaton = _BuildAutomaton_154()




CellType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ProductOrigin'), ProductOriginType, scope=CellType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1587, 12)))

CellType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClassificationOrigin'), ClassificationOriginType, scope=CellType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1588, 12)))

CellType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EntityOrigin'), EntityOriginType, scope=CellType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1590, 12)))

CellType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssetOrigin'), AssetOriginType, scope=CellType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1591, 12)))

CellType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeOrigin'), AttributeOriginType, scope=CellType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1592, 12)))

CellType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Text'), TextType, scope=CellType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1593, 12)))

def _BuildAutomaton_155 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_155
    del _BuildAutomaton_155
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1587, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1588, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1590, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1591, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1592, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1593, 12))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CellType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ProductOrigin')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1587, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CellType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClassificationOrigin')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1588, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CellType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EntityOrigin')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1590, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CellType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssetOrigin')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1591, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CellType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeOrigin')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1592, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CellType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Text')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1593, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CellType._Automaton = _BuildAutomaton_155()




CharacterTagType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), ConfigurationType, scope=CharacterTagType, documentation='\n                        How tag content should be styled in STEP GUI.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1677, 12)))

CharacterTagType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Formatting'), FormattingType, scope=CharacterTagType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1684, 12)))

def _BuildAutomaton_156 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_156
    del _BuildAutomaton_156
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1677, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1684, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CharacterTagType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Configuration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1677, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CharacterTagType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Formatting')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1684, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CharacterTagType._Automaton = _BuildAutomaton_156()




ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1726, 12)))

ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ParentKeyValue'), ParentKeyValueType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1727, 12)))

ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1729, 16)))

ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SequenceProduct'), SequenceProductType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1730, 16)))

ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Classification'), ClassificationType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1731, 16)))

ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedProductReference'), DeleteSuppressedProductReferenceType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1733, 20)))

ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteProductReference'), DeleteProductReferenceType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1735, 20)))

ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ProductReference'), ProductReferenceType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1737, 20)))

ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedClassificationCrossReference'), DeleteSuppressedClassificationCrossReferenceType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1740, 20)))

ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteClassificationCrossReference'), DeleteClassificationCrossReferenceType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1743, 20)))

ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SuppressedClassificationCrossReference'), SuppressedClassificationCrossReferenceType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1745, 20)))

ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClassificationCrossReference'), ClassificationCrossReferenceType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1748, 20)))

ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedProductCrossReference'), DeleteSuppressedProductCrossReferenceType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1752, 20)))

ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteProductCrossReference'), DeleteProductCrossReferenceType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1754, 20)))

ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SuppressedProductCrossReference'), SuppressedProductCrossReferenceType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1756, 20)))

ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ProductCrossReference'), ProductCrossReferenceType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1758, 20)))

ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedEntityCrossReference'), DeleteSuppressedEntityCrossReferenceType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1762, 20)))

ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteEntityCrossReference'), DeleteEntityCrossReferenceType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1764, 20)))

ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SuppressedEntityCrossReference'), SuppressedEntityCrossReferenceType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1766, 20)))

ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EntityCrossReference'), EntityCrossReferenceType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1769, 20)))

ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedAssetCrossReference'), DeleteSuppressedAssetCrossReferenceType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1773, 20)))

ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteAssetCrossReference'), DeleteAssetCrossReferenceType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1775, 20)))

ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SuppressedAssetCrossReference'), SuppressedAssetCrossReferenceType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1777, 20)))

ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssetCrossReference'), AssetCrossReferenceType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1779, 20)))

ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteAttributeLink'), DeleteAttributeLinkType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1783, 20)))

ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink'), AttributeLinkType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1785, 20)))

ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteDataContainerTypeLink'), DeleteDataContainerTypeLinkType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1788, 20)))

ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DataContainerTypeLink'), DataContainerTypeLinkType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1790, 20)))

ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1793, 16)))

ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Tables'), TablesType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1794, 16)))

ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Asset'), AssetType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1795, 16)))

ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PublicationGroup'), PublicationGroupType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1796, 16)))

ClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CurrentTasks'), CurrentTasksType, scope=ClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1797, 16)))

def _BuildAutomaton_157 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_157
    del _BuildAutomaton_157
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1726, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1727, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1728, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1733, 20))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1735, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1737, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1740, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1743, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1745, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1748, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1752, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1754, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1756, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1758, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1762, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1764, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1766, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1769, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1773, 20))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1775, 20))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1777, 20))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1779, 20))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1783, 20))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1788, 20))
    counters.add(cc_23)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1726, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ParentKeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1727, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1729, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SequenceProduct')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1730, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Classification')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1731, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedProductReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1733, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteProductReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1735, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ProductReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1737, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedClassificationCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1740, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteClassificationCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1743, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SuppressedClassificationCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1745, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClassificationCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1748, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedProductCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1752, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteProductCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1754, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SuppressedProductCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1756, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ProductCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1758, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedEntityCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1762, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteEntityCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1764, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SuppressedEntityCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1766, 20))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EntityCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1769, 20))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedAssetCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1773, 20))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteAssetCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1775, 20))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SuppressedAssetCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1777, 20))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssetCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1779, 20))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteAttributeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1783, 20))
    st_24 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1785, 20))
    st_25 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteDataContainerTypeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1788, 20))
    st_26 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DataContainerTypeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1790, 20))
    st_27 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1793, 16))
    st_28 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Tables')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1794, 16))
    st_29 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Asset')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1795, 16))
    st_30 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PublicationGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1796, 16))
    st_31 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_31)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CurrentTasks')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1797, 16))
    st_32 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_32)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_15, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_16, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_17, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_18, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_19, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_20, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_21, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_30._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_31._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_32._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ClassificationType._Automaton = _BuildAutomaton_157()




ClassificationBasketLinkType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=ClassificationBasketLinkType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1849, 12)))

def _BuildAutomaton_158 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_158
    del _BuildAutomaton_158
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1848, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationBasketLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1849, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ClassificationBasketLinkType._Automaton = _BuildAutomaton_158()




ClassificationCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=ClassificationCrossReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1860, 12)))

ClassificationCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=ClassificationCrossReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1862, 16)))

ClassificationCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Classification'), ClassificationType, scope=ClassificationCrossReferenceType, documentation='\n                            Embedded reference target. Has no effect during import.\n                        ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1863, 16)))

def _BuildAutomaton_159 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_159
    del _BuildAutomaton_159
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1860, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1861, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1862, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1863, 16))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1860, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1862, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Classification')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1863, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ClassificationCrossReferenceType._Automaton = _BuildAutomaton_159()




ClassificationCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=ClassificationCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1929, 12)))

ClassificationCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=ClassificationCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1930, 12)))

ClassificationCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink'), AttributeLinkType, scope=ClassificationCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1931, 12)))

ClassificationCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink'), DimensionLinkType, scope=ClassificationCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1932, 12)))

ClassificationCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), AttributeGroupLinkType, scope=ClassificationCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1933, 12)))

ClassificationCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink'), UserTypeLinkType, scope=ClassificationCrossReferenceTypeType, documentation='\n                        Link to a valid source type. Notice that this source can be a DataContainerType.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1934, 12)))

ClassificationCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TargetUserTypeLink'), TargetUserTypeLinkType, scope=ClassificationCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1941, 12)))

def _BuildAutomaton_160 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_160
    del _BuildAutomaton_160
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1929, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1930, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1931, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1932, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1933, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1934, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1941, 12))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1929, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1930, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1931, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1932, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1933, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1934, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TargetUserTypeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 1941, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ClassificationCrossReferenceTypeType._Automaton = _BuildAutomaton_160()




ClassificationElementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RuleBasedLayout'), RuleBasedLayoutType, scope=ClassificationElementType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2000, 12)))

ClassificationElementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=ClassificationElementType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2001, 12)))

ClassificationElementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TemplateLayout'), TemplateLayoutType, scope=ClassificationElementType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2002, 12)))

ClassificationElementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PickupLayout'), PickupLayoutType, scope=ClassificationElementType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2003, 12)))

def _BuildAutomaton_161 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_161
    del _BuildAutomaton_161
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ClassificationElementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RuleBasedLayout')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2000, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ClassificationElementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2001, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ClassificationElementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TemplateLayout')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2002, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ClassificationElementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PickupLayout')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2003, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ClassificationElementType._Automaton = _BuildAutomaton_161()




ClassificationProductLinkTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=ClassificationProductLinkTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2012, 12)))

ClassificationProductLinkTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=ClassificationProductLinkTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2013, 12)))

ClassificationProductLinkTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink'), AttributeLinkType, scope=ClassificationProductLinkTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2014, 12)))

ClassificationProductLinkTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink'), DimensionLinkType, scope=ClassificationProductLinkTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2015, 12)))

ClassificationProductLinkTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), AttributeGroupLinkType, scope=ClassificationProductLinkTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2016, 12)))

ClassificationProductLinkTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink'), UserTypeLinkType, scope=ClassificationProductLinkTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2017, 12)))

ClassificationProductLinkTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TargetUserTypeLink'), TargetUserTypeLinkType, scope=ClassificationProductLinkTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2018, 12)))

def _BuildAutomaton_162 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_162
    del _BuildAutomaton_162
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2012, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2013, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2014, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2015, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2016, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2017, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2018, 12))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationProductLinkTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2012, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationProductLinkTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2013, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationProductLinkTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2014, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationProductLinkTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2015, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationProductLinkTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2016, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationProductLinkTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2017, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationProductLinkTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TargetUserTypeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2018, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ClassificationProductLinkTypeType._Automaton = _BuildAutomaton_162()




ClassificationReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=ClassificationReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2085, 12)))

ClassificationReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=ClassificationReferenceType, documentation='\n                            Classification product link metadata. Only used when the element expresses a link from a\n                            product to a classification.\n                        ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2087, 16)))

ClassificationReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Classification'), ClassificationType, scope=ClassificationReferenceType, documentation='\n                            Embedded link target. Has no effect during import.\n                        ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2095, 16)))

def _BuildAutomaton_163 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_163
    del _BuildAutomaton_163
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2085, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2086, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2087, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2095, 16))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2085, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2087, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Classification')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2095, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ClassificationReferenceType._Automaton = _BuildAutomaton_163()




ClassificationsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Classification'), ClassificationType, scope=ClassificationsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2171, 12)))

def _BuildAutomaton_164 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_164
    del _BuildAutomaton_164
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2171, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ClassificationsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Classification')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2171, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ClassificationsType._Automaton = _BuildAutomaton_164()




CollectionGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=CollectionGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2209, 12)))

CollectionGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=CollectionGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2210, 12)))

CollectionGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CollectionGroup'), CollectionGroupType, scope=CollectionGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2211, 12)))

CollectionGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Collection'), CollectionType, scope=CollectionGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2212, 12)))

def _BuildAutomaton_165 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_165
    del _BuildAutomaton_165
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2209, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2210, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2211, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2212, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CollectionGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2209, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CollectionGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2210, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CollectionGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CollectionGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2211, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CollectionGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Collection')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2212, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CollectionGroupType._Automaton = _BuildAutomaton_165()




CollectionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=CollectionType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2243, 12)))

CollectionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=CollectionType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2244, 12)))

def _BuildAutomaton_166 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_166
    del _BuildAutomaton_166
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2243, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2244, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CollectionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2243, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CollectionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2244, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CollectionType._Automaton = _BuildAutomaton_166()




ColumnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Origin'), OriginType, scope=ColumnType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2273, 12)))

ColumnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ProductOrigin'), ProductOriginType, scope=ColumnType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2274, 12)))

ColumnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClassificationOrigin'), ClassificationOriginType, scope=ColumnType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2275, 12)))

ColumnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EntityOrigin'), EntityOriginType, scope=ColumnType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2276, 12)))

ColumnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssetOrigin'), AssetOriginType, scope=ColumnType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2277, 12)))

ColumnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeOrigin'), AttributeOriginType, scope=ColumnType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2278, 12)))

def _BuildAutomaton_167 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_167
    del _BuildAutomaton_167
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2273, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2274, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2275, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2276, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2277, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2278, 12))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ColumnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Origin')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2273, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ColumnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ProductOrigin')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2274, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ColumnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClassificationOrigin')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2275, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ColumnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EntityOrigin')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2276, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ColumnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssetOrigin')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2277, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ColumnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeOrigin')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2278, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ColumnType._Automaton = _BuildAutomaton_167()




ColumnTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=ColumnTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2294, 12)))

ColumnTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TableTypeLink'), TableTypeLinkType, scope=ColumnTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2295, 12)))

ColumnTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PublicationTypeValidity'), PublicationTypeValidityType, scope=ColumnTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2296, 12)))

def _BuildAutomaton_168 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_168
    del _BuildAutomaton_168
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2294, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2295, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2296, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ColumnTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2294, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ColumnTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TableTypeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2295, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ColumnTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PublicationTypeValidity')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2296, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ColumnTypeType._Automaton = _BuildAutomaton_168()




CommercialListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=CommercialListType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2328, 12)))

CommercialListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=CommercialListType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2329, 12)))

def _BuildAutomaton_169 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_169
    del _BuildAutomaton_169
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2328, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2329, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CommercialListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2328, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CommercialListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2329, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CommercialListType._Automaton = _BuildAutomaton_169()




ContextCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=ContextCrossReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2397, 12)))

def _BuildAutomaton_170 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_170
    del _BuildAutomaton_170
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2397, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ContextCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2397, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ContextCrossReferenceType._Automaton = _BuildAutomaton_170()




ContextCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=ContextCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2428, 12)))

ContextCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=ContextCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2429, 12)))

ContextCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink'), AttributeLinkType, scope=ContextCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2430, 12)))

ContextCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink'), DimensionLinkType, scope=ContextCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2431, 12)))

ContextCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), AttributeGroupLinkType, scope=ContextCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2432, 12)))

ContextCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink'), UserTypeLinkType, scope=ContextCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2433, 12)))

ContextCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TargetUserTypeLink'), TargetUserTypeLinkType, scope=ContextCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2434, 12)))

def _BuildAutomaton_171 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_171
    del _BuildAutomaton_171
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2428, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2429, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2430, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2431, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2432, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2433, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2434, 12))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ContextCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2428, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ContextCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2429, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ContextCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2430, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ContextCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2431, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ContextCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2432, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ContextCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2433, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ContextCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TargetUserTypeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2434, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ContextCrossReferenceTypeType._Automaton = _BuildAutomaton_171()




ContextType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=ContextType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2461, 12)))

ContextType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DimensionPointLink'), DimensionPointLinkType, scope=ContextType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2462, 12)))

def _BuildAutomaton_172 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_172
    del _BuildAutomaton_172
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2461, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2462, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ContextType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2461, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ContextType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DimensionPointLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2462, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ContextType._Automaton = _BuildAutomaton_172()




DataContainerTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=DataContainerTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2657, 12)))

DataContainerTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=DataContainerTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2658, 12)))

DataContainerTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), AttributeGroupLinkType, scope=DataContainerTypeType, documentation='\n                        Link to the parent attribute group.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2659, 12)))

DataContainerTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink'), AttributeValidationType, scope=DataContainerTypeType, documentation='\n                        Link to an attribute which is valid for this data container type.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2666, 12)))

DataContainerTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink'), UserTypeLinkType, scope=DataContainerTypeType, documentation='\n                        Link to an object type for which this data container type is valid.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2673, 12)))

DataContainerTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyDefinition'), DataContainerKeyDefinitionType, scope=DataContainerTypeType, documentation='\n                        Key definition of the data container type.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2680, 12)))

def _BuildAutomaton_173 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_173
    del _BuildAutomaton_173
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2657, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2658, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2659, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2666, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2673, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2680, 12))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DataContainerTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2657, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DataContainerTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2658, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DataContainerTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2659, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DataContainerTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2666, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(DataContainerTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2673, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(DataContainerTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyDefinition')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2680, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DataContainerTypeType._Automaton = _BuildAutomaton_173()




DeleteAssetCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=DeleteAssetCrossReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2752, 12)))

DeleteAssetCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=DeleteAssetCrossReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2753, 12)))

def _BuildAutomaton_174 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_174
    del _BuildAutomaton_174
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2752, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2753, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeleteAssetCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2752, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DeleteAssetCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2753, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DeleteAssetCrossReferenceType._Automaton = _BuildAutomaton_174()




DeleteAssetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=DeleteAssetType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2771, 12)))

def _BuildAutomaton_175 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_175
    del _BuildAutomaton_175
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2771, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeleteAssetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2771, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DeleteAssetType._Automaton = _BuildAutomaton_175()




DeleteClassificationCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=DeleteClassificationCrossReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2855, 12)))

DeleteClassificationCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=DeleteClassificationCrossReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2856, 12)))

def _BuildAutomaton_176 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_176
    del _BuildAutomaton_176
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2855, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2856, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeleteClassificationCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2855, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DeleteClassificationCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2856, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DeleteClassificationCrossReferenceType._Automaton = _BuildAutomaton_176()




DeleteClassificationReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=DeleteClassificationReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2874, 12)))

DeleteClassificationReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=DeleteClassificationReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2875, 12)))

def _BuildAutomaton_177 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_177
    del _BuildAutomaton_177
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2874, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2875, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeleteClassificationReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2874, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DeleteClassificationReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2875, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DeleteClassificationReferenceType._Automaton = _BuildAutomaton_177()




DeleteClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=DeleteClassificationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2904, 12)))

def _BuildAutomaton_178 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_178
    del _BuildAutomaton_178
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2904, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeleteClassificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2904, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DeleteClassificationType._Automaton = _BuildAutomaton_178()




DeleteEntityCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=DeleteEntityCrossReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2974, 12)))

DeleteEntityCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=DeleteEntityCrossReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2975, 12)))

def _BuildAutomaton_179 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_179
    del _BuildAutomaton_179
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2974, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2975, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeleteEntityCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2974, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DeleteEntityCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2975, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DeleteEntityCrossReferenceType._Automaton = _BuildAutomaton_179()




DeleteEntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=DeleteEntityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2993, 12)))

def _BuildAutomaton_180 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_180
    del _BuildAutomaton_180
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2993, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeleteEntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 2993, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DeleteEntityType._Automaton = _BuildAutomaton_180()




DeleteProductCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=DeleteProductCrossReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3046, 12)))

DeleteProductCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=DeleteProductCrossReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3047, 12)))

def _BuildAutomaton_181 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_181
    del _BuildAutomaton_181
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3046, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3047, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeleteProductCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3046, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DeleteProductCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3047, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DeleteProductCrossReferenceType._Automaton = _BuildAutomaton_181()




DeleteProductReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=DeleteProductReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3076, 12)))

DeleteProductReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=DeleteProductReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3077, 12)))

def _BuildAutomaton_182 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_182
    del _BuildAutomaton_182
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3076, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3077, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeleteProductReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3076, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DeleteProductReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3077, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DeleteProductReferenceType._Automaton = _BuildAutomaton_182()




DeleteProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=DeleteProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3094, 12)))

def _BuildAutomaton_183 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_183
    del _BuildAutomaton_183
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3094, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeleteProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3094, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DeleteProductType._Automaton = _BuildAutomaton_183()




DeleteSingleDataContainerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Values'), ValuesType, scope=DeleteSingleDataContainerType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3114, 12)))

DeleteSingleDataContainerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssetCrossReference'), AssetCrossReferenceType, scope=DeleteSingleDataContainerType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3115, 12)))

DeleteSingleDataContainerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClassificationCrossReference'), ClassificationCrossReferenceType, scope=DeleteSingleDataContainerType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3116, 12)))

DeleteSingleDataContainerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EntityCrossReference'), EntityCrossReferenceType, scope=DeleteSingleDataContainerType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3117, 12)))

DeleteSingleDataContainerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ProductCrossReference'), ProductCrossReferenceType, scope=DeleteSingleDataContainerType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3118, 12)))

def _BuildAutomaton_184 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_184
    del _BuildAutomaton_184
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3114, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3115, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3116, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3117, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3118, 12))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeleteSingleDataContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Values')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3114, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DeleteSingleDataContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssetCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3115, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DeleteSingleDataContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClassificationCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3116, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DeleteSingleDataContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EntityCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3117, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(DeleteSingleDataContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ProductCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3118, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DeleteSingleDataContainerType._Automaton = _BuildAutomaton_184()




DeleteSuppressedClassificationCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=DeleteSuppressedClassificationCrossReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3146, 12)))

DeleteSuppressedClassificationCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=DeleteSuppressedClassificationCrossReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3147, 12)))

def _BuildAutomaton_185 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_185
    del _BuildAutomaton_185
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3146, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3147, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeleteSuppressedClassificationCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3146, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DeleteSuppressedClassificationCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3147, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DeleteSuppressedClassificationCrossReferenceType._Automaton = _BuildAutomaton_185()




DeleteSuppressedClassificationReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=DeleteSuppressedClassificationReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3164, 12)))

DeleteSuppressedClassificationReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=DeleteSuppressedClassificationReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3165, 12)))

def _BuildAutomaton_186 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_186
    del _BuildAutomaton_186
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3164, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3165, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeleteSuppressedClassificationReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3164, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DeleteSuppressedClassificationReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3165, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DeleteSuppressedClassificationReferenceType._Automaton = _BuildAutomaton_186()




DeleteSuppressedProductReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=DeleteSuppressedProductReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3182, 12)))

def _BuildAutomaton_187 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_187
    del _BuildAutomaton_187
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3182, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeleteSuppressedProductReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3182, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DeleteSuppressedProductReferenceType._Automaton = _BuildAutomaton_187()




DeleteSuppressedProductCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=DeleteSuppressedProductCrossReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3199, 12)))

DeleteSuppressedProductCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=DeleteSuppressedProductCrossReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3200, 12)))

def _BuildAutomaton_188 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_188
    del _BuildAutomaton_188
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3199, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3200, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeleteSuppressedProductCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3199, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DeleteSuppressedProductCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3200, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DeleteSuppressedProductCrossReferenceType._Automaton = _BuildAutomaton_188()




DeleteSuppressedEntityCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=DeleteSuppressedEntityCrossReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3218, 12)))

DeleteSuppressedEntityCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=DeleteSuppressedEntityCrossReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3219, 12)))

def _BuildAutomaton_189 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_189
    del _BuildAutomaton_189
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3218, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3219, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeleteSuppressedEntityCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3218, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DeleteSuppressedEntityCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3219, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DeleteSuppressedEntityCrossReferenceType._Automaton = _BuildAutomaton_189()




DeleteSuppressedAssetCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=DeleteSuppressedAssetCrossReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3236, 12)))

DeleteSuppressedAssetCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=DeleteSuppressedAssetCrossReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3237, 12)))

def _BuildAutomaton_190 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_190
    del _BuildAutomaton_190
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3236, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3237, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeleteSuppressedAssetCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3236, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DeleteSuppressedAssetCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3237, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DeleteSuppressedAssetCrossReferenceType._Automaton = _BuildAutomaton_190()




DimensionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=DimensionType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3320, 12)))

DimensionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=DimensionType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3321, 12)))

DimensionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DimensionPoint'), DimensionPointType, scope=DimensionType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3322, 12)))

def _BuildAutomaton_191 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_191
    del _BuildAutomaton_191
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3320, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3321, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3322, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DimensionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3320, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DimensionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3321, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DimensionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DimensionPoint')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3322, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DimensionType._Automaton = _BuildAutomaton_191()




DimensionPointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=DimensionPointType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3374, 12)))

DimensionPointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=DimensionPointType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3375, 12)))

DimensionPointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DimensionPointLink'), DimensionPointLinkType, scope=DimensionPointType, documentation='\n                        The parent dimension point.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3376, 12)))

def _BuildAutomaton_192 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_192
    del _BuildAutomaton_192
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3374, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3375, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3376, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DimensionPointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3374, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DimensionPointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3375, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DimensionPointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DimensionPointLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3376, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DimensionPointType._Automaton = _BuildAutomaton_192()




ECatalogType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=ECatalogType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3431, 12)))

ECatalogType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), ConfigurationType, scope=ECatalogType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3432, 12)))

ECatalogType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CommercialList'), CommercialListType, scope=ECatalogType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3433, 12)))

ECatalogType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SelectionList'), CollectionType, scope=ECatalogType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3434, 12)))

ECatalogType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Collection'), CollectionType, scope=ECatalogType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3435, 12)))

ECatalogType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ECatalog'), ECatalogType, scope=ECatalogType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3436, 12)))

def _BuildAutomaton_193 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_193
    del _BuildAutomaton_193
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3431, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3432, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3433, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3434, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3435, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3436, 12))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ECatalogType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3431, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ECatalogType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Configuration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3432, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ECatalogType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CommercialList')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3433, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ECatalogType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SelectionList')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3434, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ECatalogType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Collection')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3435, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ECatalogType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ECatalog')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3436, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ECatalogType._Automaton = _BuildAutomaton_193()




EntitiesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Entity'), EntityType, scope=EntitiesType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3526, 12)))

def _BuildAutomaton_194 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_194
    del _BuildAutomaton_194
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3526, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(EntitiesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Entity')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3526, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
EntitiesType._Automaton = _BuildAutomaton_194()




EntityCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=EntityCrossReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3558, 12)))

EntityCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=EntityCrossReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3560, 16)))

EntityCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Entity'), EntityType, scope=EntityCrossReferenceType, documentation='\n                            Embedded reference target. Has no effect during import.\n                        ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3561, 16)))

def _BuildAutomaton_195 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_195
    del _BuildAutomaton_195
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3558, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3559, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3560, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3561, 16))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(EntityCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3558, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(EntityCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3560, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(EntityCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Entity')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3561, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
EntityCrossReferenceType._Automaton = _BuildAutomaton_195()




EntityCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=EntityCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3622, 12)))

EntityCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=EntityCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3623, 12)))

EntityCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink'), AttributeLinkType, scope=EntityCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3624, 12)))

EntityCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink'), DimensionLinkType, scope=EntityCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3625, 12)))

EntityCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), AttributeGroupLinkType, scope=EntityCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3626, 12)))

EntityCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink'), UserTypeLinkType, scope=EntityCrossReferenceTypeType, documentation='\n                        Link to a valid source type. Notice that this source can be a DataContainerType.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3627, 12)))

EntityCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TargetUserTypeLink'), TargetUserTypeLinkType, scope=EntityCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3634, 12)))

def _BuildAutomaton_196 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_196
    del _BuildAutomaton_196
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3622, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3623, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3624, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3625, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3626, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3627, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3634, 12))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(EntityCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3622, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(EntityCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3623, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(EntityCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3624, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(EntityCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3625, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(EntityCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3626, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(EntityCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3627, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(EntityCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TargetUserTypeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3634, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
EntityCrossReferenceTypeType._Automaton = _BuildAutomaton_196()




EntityElementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RuleBasedLayout'), RuleBasedLayoutType, scope=EntityElementType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3694, 12)))

EntityElementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TemplateLayout'), TemplateLayoutType, scope=EntityElementType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3695, 12)))

EntityElementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PickupLayout'), PickupLayoutType, scope=EntityElementType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3696, 12)))

def _BuildAutomaton_197 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_197
    del _BuildAutomaton_197
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EntityElementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RuleBasedLayout')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3694, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EntityElementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TemplateLayout')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3695, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EntityElementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PickupLayout')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3696, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EntityElementType._Automaton = _BuildAutomaton_197()




EntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=EntityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3715, 12)))

EntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ParentKeyValue'), ParentKeyValueType, scope=EntityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3716, 12)))

EntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=EntityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3717, 12)))

EntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Entity'), EntityType, scope=EntityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3719, 16)))

EntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedClassificationCrossReference'), DeleteSuppressedClassificationCrossReferenceType, scope=EntityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3721, 20)))

EntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteClassificationCrossReference'), DeleteClassificationCrossReferenceType, scope=EntityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3724, 20)))

EntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SuppressedClassificationCrossReference'), SuppressedClassificationCrossReferenceType, scope=EntityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3726, 20)))

EntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClassificationCrossReference'), ClassificationCrossReferenceType, scope=EntityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3728, 20)))

EntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedProductCrossReference'), DeleteSuppressedProductCrossReferenceType, scope=EntityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3732, 20)))

EntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteProductCrossReference'), DeleteProductCrossReferenceType, scope=EntityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3734, 20)))

EntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SuppressedProductCrossReference'), SuppressedProductCrossReferenceType, scope=EntityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3736, 20)))

EntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ProductCrossReference'), ProductCrossReferenceType, scope=EntityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3738, 20)))

EntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedAssetCrossReference'), DeleteSuppressedAssetCrossReferenceType, scope=EntityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3742, 20)))

EntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteAssetCrossReference'), DeleteAssetCrossReferenceType, scope=EntityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3744, 20)))

EntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SuppressedAssetCrossReference'), SuppressedAssetCrossReferenceType, scope=EntityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3746, 20)))

EntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssetCrossReference'), AssetCrossReferenceType, scope=EntityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3748, 20)))

EntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedEntityCrossReference'), DeleteSuppressedEntityCrossReferenceType, scope=EntityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3751, 20)))

EntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteEntityCrossReference'), DeleteEntityCrossReferenceType, scope=EntityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3753, 20)))

EntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SuppressedEntityCrossReference'), SuppressedEntityCrossReferenceType, scope=EntityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3755, 20)))

EntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EntityCrossReference'), EntityCrossReferenceType, scope=EntityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3757, 20)))

EntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SuppressedContextCrossReference'), SuppressedContextCrossReferenceType, scope=EntityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3761, 20)))

EntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ContextCrossReference'), ContextCrossReferenceType, scope=EntityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3763, 20)))

EntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SuppressedWorkspaceCrossReference'), SuppressedWorkspaceCrossReferenceType, scope=EntityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3767, 20)))

EntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'WorkspaceCrossReference'), WorkspaceCrossReferenceType, scope=EntityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3769, 20)))

EntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Values'), ValuesType, scope=EntityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3772, 16)))

EntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DataContainers'), DataContainersType, scope=EntityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3773, 16)))

EntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CurrentTasks'), CurrentTasksType, scope=EntityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3774, 16)))

EntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Terms'), TermsType, scope=EntityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3775, 16)))

def _BuildAutomaton_198 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_198
    del _BuildAutomaton_198
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3715, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3716, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3717, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3718, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3721, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3724, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3726, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3728, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3732, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3734, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3736, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3738, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3742, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3744, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3746, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3748, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3751, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3753, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3755, 20))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3757, 20))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3761, 20))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3763, 20))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3767, 20))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3769, 20))
    counters.add(cc_23)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(EntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3715, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(EntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ParentKeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3716, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(EntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3717, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(EntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Entity')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3719, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(EntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedClassificationCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3721, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(EntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteClassificationCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3724, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(EntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SuppressedClassificationCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3726, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(EntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClassificationCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3728, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(EntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedProductCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3732, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(EntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteProductCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3734, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(EntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SuppressedProductCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3736, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(EntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ProductCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3738, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(EntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedAssetCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3742, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(EntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteAssetCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3744, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(EntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SuppressedAssetCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3746, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(EntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssetCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3748, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(EntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedEntityCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3751, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(EntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteEntityCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3753, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(EntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SuppressedEntityCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3755, 20))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(EntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EntityCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3757, 20))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(EntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SuppressedContextCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3761, 20))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(EntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ContextCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3763, 20))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(EntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SuppressedWorkspaceCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3767, 20))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(EntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'WorkspaceCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3769, 20))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(EntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Values')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3772, 16))
    st_24 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(EntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DataContainers')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3773, 16))
    st_25 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(EntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CurrentTasks')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3774, 16))
    st_26 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(EntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Terms')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3775, 16))
    st_27 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_18, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_19, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_20, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_21, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_22, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_23, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_27._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
EntityType._Automaton = _BuildAutomaton_198()




EventProcessorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink'), SetupGroupLinkType, scope=EventProcessorType, documentation='\n                        The setup group the event processor is located in.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3839, 12)))

EventProcessorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=EventProcessorType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3846, 12)))

EventProcessorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=EventProcessorType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3847, 12)))

EventProcessorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), ConfigurationType, scope=EventProcessorType, documentation='\n                        The configuration in encoded form.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3848, 12)))

EventProcessorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EventQueue'), EventQueueType, scope=EventProcessorType, documentation='\n                        The behind-the-scenes event queue of the event processor. This event queue is privately owned by\n                        this event processor and thus not accessible from anywhere else.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3855, 12)))

def _BuildAutomaton_199 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_199
    del _BuildAutomaton_199
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3839, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3846, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3847, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3848, 12))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EventProcessorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3839, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EventProcessorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3846, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EventProcessorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3847, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EventProcessorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Configuration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3848, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EventProcessorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EventQueue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3855, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EventProcessorType._Automaton = _BuildAutomaton_199()




EventQueueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=EventQueueType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3897, 12)))

EventQueueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=EventQueueType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3898, 12)))

EventQueueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), ConfigurationType, scope=EventQueueType, documentation='\n                        Configuration in encoded form.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3899, 12)))

def _BuildAutomaton_200 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_200
    del _BuildAutomaton_200
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3897, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3898, 12))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EventQueueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3897, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EventQueueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3898, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EventQueueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Configuration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3899, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EventQueueType._Automaton = _BuildAutomaton_200()




ExportConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=ExportConfigurationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3940, 12)))

ExportConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=ExportConfigurationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3941, 12)))

ExportConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClassificationReference'), ClassificationReferenceType, scope=ExportConfigurationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3942, 12)))

ExportConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), ConfigurationType, scope=ExportConfigurationType, documentation='\n                        The configuration in encoded form.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3944, 12)))

def _BuildAutomaton_201 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_201
    del _BuildAutomaton_201
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3940, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3941, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3942, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3944, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ExportConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3940, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ExportConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3941, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ExportConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClassificationReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3942, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ExportConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Configuration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3944, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ExportConfigurationType._Automaton = _BuildAutomaton_201()




TranslationConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=TranslationConfigurationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3967, 12)))

TranslationConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=TranslationConfigurationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3968, 12)))

TranslationConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClassificationReference'), ClassificationReferenceType, scope=TranslationConfigurationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3969, 12)))

TranslationConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), ConfigurationType, scope=TranslationConfigurationType, documentation='\n                        The configuration in encoded form.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3971, 12)))

def _BuildAutomaton_202 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_202
    del _BuildAutomaton_202
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3967, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3968, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3969, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3971, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TranslationConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3967, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TranslationConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3968, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TranslationConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClassificationReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3969, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TranslationConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Configuration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 3971, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
TranslationConfigurationType._Automaton = _BuildAutomaton_202()




FootnoteTagType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TagFormat'), TagFormatType, scope=FootnoteTagType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4044, 12)))

def _BuildAutomaton_203 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_203
    del _BuildAutomaton_203
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4044, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(FootnoteTagType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TagFormat')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4044, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
FootnoteTagType._Automaton = _BuildAutomaton_203()




FrameType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ProductElement'), ProductElementType, scope=FrameType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4085, 12)))

FrameType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssetElement'), AssetElementType, scope=FrameType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4086, 12)))

FrameType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TextElement'), TextElementType, scope=FrameType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4087, 12)))

FrameType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClassificationElement'), ClassificationElementType, scope=FrameType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4088, 12)))

def _BuildAutomaton_204 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_204
    del _BuildAutomaton_204
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4084, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(FrameType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ProductElement')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4085, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(FrameType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssetElement')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4086, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(FrameType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TextElement')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4087, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(FrameType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClassificationElement')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4088, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
FrameType._Automaton = _BuildAutomaton_204()




GalleyElementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ProductElement'), ProductElementType, scope=GalleyElementType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4100, 12)))

def _BuildAutomaton_205 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_205
    del _BuildAutomaton_205
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4100, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(GalleyElementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ProductElement')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4100, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
GalleyElementType._Automaton = _BuildAutomaton_205()




GalleyFrameType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ProductElement'), ProductElementType, scope=GalleyFrameType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4108, 12)))

def _BuildAutomaton_206 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_206
    del _BuildAutomaton_206
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4108, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(GalleyFrameType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ProductElement')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4108, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
GalleyFrameType._Automaton = _BuildAutomaton_206()




GatewayIntegrationEndpointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink'), SetupGroupLinkType, scope=GatewayIntegrationEndpointType, documentation='\n                        The setup group the endpoint is located in.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4126, 12)))

GatewayIntegrationEndpointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=GatewayIntegrationEndpointType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4133, 12)))

GatewayIntegrationEndpointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=GatewayIntegrationEndpointType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4134, 12)))

GatewayIntegrationEndpointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), ConfigurationType, scope=GatewayIntegrationEndpointType, documentation='\n                        The configuration in encoded form.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4135, 12)))

def _BuildAutomaton_207 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_207
    del _BuildAutomaton_207
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4126, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4133, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4134, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4135, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(GatewayIntegrationEndpointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4126, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(GatewayIntegrationEndpointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4133, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(GatewayIntegrationEndpointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4134, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(GatewayIntegrationEndpointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Configuration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4135, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
GatewayIntegrationEndpointType._Automaton = _BuildAutomaton_207()




HyperlinkTagType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), ConfigurationType, scope=HyperlinkTagType, documentation='\n                        How tag content should be styled in STEP GUI.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4230, 12)))

HyperlinkTagType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TagFormat'), TagFormatType, scope=HyperlinkTagType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4237, 12)))

def _BuildAutomaton_208 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_208
    del _BuildAutomaton_208
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4230, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4237, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(HyperlinkTagType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Configuration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4230, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(HyperlinkTagType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TagFormat')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4237, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
HyperlinkTagType._Automaton = _BuildAutomaton_208()




ImportConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=ImportConfigurationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4268, 12)))

ImportConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=ImportConfigurationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4269, 12)))

ImportConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClassificationReference'), ClassificationReferenceType, scope=ImportConfigurationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4270, 12)))

ImportConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), ConfigurationType, scope=ImportConfigurationType, documentation='\n                        The configuration in encoded form.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4272, 12)))

def _BuildAutomaton_209 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_209
    del _BuildAutomaton_209
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4268, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4269, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4270, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4272, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ImportConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4268, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ImportConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4269, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ImportConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClassificationReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4270, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ImportConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Configuration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4272, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ImportConfigurationType._Automaton = _BuildAutomaton_209()




ImageConversionConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=ImageConversionConfigurationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4295, 12)))

ImageConversionConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=ImageConversionConfigurationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4296, 12)))

ImageConversionConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClassificationReference'), ClassificationReferenceType, scope=ImageConversionConfigurationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4297, 12)))

ImageConversionConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), ConfigurationType, scope=ImageConversionConfigurationType, documentation='\n                        The configuration in encoded form.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4299, 12)))

def _BuildAutomaton_210 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_210
    del _BuildAutomaton_210
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4295, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4296, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4297, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4299, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ImageConversionConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4295, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ImageConversionConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4296, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ImageConversionConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClassificationReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4297, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ImageConversionConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Configuration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4299, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ImageConversionConfigurationType._Automaton = _BuildAutomaton_210()




InBoundIntegrationEndpointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink'), SetupGroupLinkType, scope=InBoundIntegrationEndpointType, documentation='\n                        The setup group the endpoint is located in.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4345, 12)))

InBoundIntegrationEndpointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=InBoundIntegrationEndpointType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4352, 12)))

InBoundIntegrationEndpointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=InBoundIntegrationEndpointType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4353, 12)))

InBoundIntegrationEndpointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScheduleSpecification'), ConfigurationType, scope=InBoundIntegrationEndpointType, documentation='\n                        The encoded schedule specification.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4354, 12)))

InBoundIntegrationEndpointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PreProcessorPluginConfiguration'), ConfigurationType, scope=InBoundIntegrationEndpointType, documentation='\n                        The encoded preprocessor plugin configuration.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4361, 12)))

InBoundIntegrationEndpointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PostProcessorPluginConfiguration'), ConfigurationType, scope=InBoundIntegrationEndpointType, documentation='\n                        The encoded postprocessor plugin configuration.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4368, 12)))

InBoundIntegrationEndpointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReceiverPluginConfiguration'), ConfigurationType, scope=InBoundIntegrationEndpointType, documentation='\n                        The encoded receiver plugin configuration.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4375, 12)))

InBoundIntegrationEndpointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ProcessPluginConfiguration'), ConfigurationType, scope=InBoundIntegrationEndpointType, documentation='\n                        The encoded process plugin configuration.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4382, 12)))

InBoundIntegrationEndpointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SampleFileConfiguration'), SampleFileType, scope=InBoundIntegrationEndpointType, documentation='\n                        Encoded sample file content.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4389, 12)))

InBoundIntegrationEndpointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ErrorReporterPluginConfiguration'), ConfigurationType, scope=InBoundIntegrationEndpointType, documentation='\n                        The encoded error reporter plugin configuration.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4396, 12)))

InBoundIntegrationEndpointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ContextLink'), ContextLinkType, scope=InBoundIntegrationEndpointType, documentation='\n                        ID of the default import context.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4403, 12)))

InBoundIntegrationEndpointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'WorkspaceID'), StepID, scope=InBoundIntegrationEndpointType, documentation='\n                        ID of the default import workspace.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4410, 12)))

def _BuildAutomaton_211 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_211
    del _BuildAutomaton_211
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4345, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4352, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4353, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4354, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4361, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4368, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4375, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4382, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4389, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4396, 12))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InBoundIntegrationEndpointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4345, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InBoundIntegrationEndpointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4352, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InBoundIntegrationEndpointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4353, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InBoundIntegrationEndpointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScheduleSpecification')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4354, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InBoundIntegrationEndpointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PreProcessorPluginConfiguration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4361, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InBoundIntegrationEndpointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PostProcessorPluginConfiguration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4368, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InBoundIntegrationEndpointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReceiverPluginConfiguration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4375, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InBoundIntegrationEndpointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ProcessPluginConfiguration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4382, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InBoundIntegrationEndpointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SampleFileConfiguration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4389, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InBoundIntegrationEndpointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ErrorReporterPluginConfiguration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4396, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InBoundIntegrationEndpointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ContextLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4403, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(InBoundIntegrationEndpointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'WorkspaceID')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4410, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
InBoundIntegrationEndpointType._Automaton = _BuildAutomaton_211()




def _BuildAutomaton_212 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_212
    del _BuildAutomaton_212
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
KeyValueType._Automaton = _BuildAutomaton_212()




KeyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=KeyType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4592, 12)))

KeyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyFormula'), KeyFormulaType, scope=KeyType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4593, 12)))

KeyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=KeyType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4594, 12)))

KeyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink'), UserTypeLinkType, scope=KeyType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4595, 12)))

KeyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink'), AttributeLinkType, scope=KeyType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4596, 12)))

def _BuildAutomaton_213 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_213
    del _BuildAutomaton_213
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4592, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4594, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4595, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4596, 12))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(KeyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4592, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(KeyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyFormula')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4593, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(KeyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4594, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(KeyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4595, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(KeyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4596, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
KeyType._Automaton = _BuildAutomaton_213()




ListOfValuesGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=ListOfValuesGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4679, 12)))

ListOfValuesGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=ListOfValuesGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4680, 12)))

ListOfValuesGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), AttributeGroupLinkType, scope=ListOfValuesGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4681, 12)))

ListOfValuesGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ListOfValuesGroup'), ListOfValuesGroupType, scope=ListOfValuesGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4682, 12)))

def _BuildAutomaton_214 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_214
    del _BuildAutomaton_214
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4679, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4680, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4681, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4682, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ListOfValuesGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4679, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ListOfValuesGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4680, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ListOfValuesGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4681, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ListOfValuesGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ListOfValuesGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4682, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ListOfValuesGroupType._Automaton = _BuildAutomaton_214()




ListOfValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=ListOfValueType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4722, 12)))

ListOfValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Validation'), ValidationType, scope=ListOfValueType, documentation='\n                        Validation specification. During import, for existing LOVs, the validation can be modified if\n                        the import is running in single update mode and no conflicting values exist.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4723, 12)))

ListOfValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink'), DimensionLinkType, scope=ListOfValueType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4731, 12)))

ListOfValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=ListOfValueType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4732, 12)))

ListOfValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), AttributeGroupLinkType, scope=ListOfValueType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4733, 12)))

ListOfValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Value'), ValueType, scope=ListOfValueType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4735, 16)))

ListOfValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValueGroup'), ValueGroupType, scope=ListOfValueType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4736, 16)))

ListOfValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteValue'), DeleteValueType, scope=ListOfValueType, documentation='\n                        Allows for the deletion of a specific value in the LOV.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4738, 12)))

def _BuildAutomaton_215 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_215
    del _BuildAutomaton_215
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4722, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4723, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4731, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4732, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4733, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4735, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4736, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4738, 12))
    counters.add(cc_7)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ListOfValueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4722, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ListOfValueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Validation')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4723, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ListOfValueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4731, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ListOfValueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4732, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ListOfValueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4733, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ListOfValueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Value')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4735, 16))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ListOfValueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValueGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4736, 16))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ListOfValueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4738, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ListOfValueType._Automaton = _BuildAutomaton_215()




LocalBusinessRuleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=LocalBusinessRuleType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4836, 12)))

LocalBusinessRuleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Description'), BusinessRuleDescriptionType, scope=LocalBusinessRuleType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4837, 12)))

LocalBusinessRuleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Dependency'), BusinessRuleDependencyType, scope=LocalBusinessRuleType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4838, 12)))

LocalBusinessRuleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), ConfigurationType, scope=LocalBusinessRuleType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4839, 12)))

LocalBusinessRuleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValidObjectTypes'), ValidObjectTypesType, scope=LocalBusinessRuleType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4840, 12)))

def _BuildAutomaton_216 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_216
    del _BuildAutomaton_216
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4836, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4837, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4838, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4839, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4840, 12))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(LocalBusinessRuleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4836, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(LocalBusinessRuleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Description')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4837, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(LocalBusinessRuleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Dependency')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4838, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(LocalBusinessRuleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Configuration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4839, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(LocalBusinessRuleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValidObjectTypes')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4840, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
LocalBusinessRuleType._Automaton = _BuildAutomaton_216()




MatchCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink'), SetupGroupLinkType, scope=MatchCodeType, documentation='\n                        The setup group that the match code is located in.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4917, 12)))

MatchCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=MatchCodeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4924, 12)))

MatchCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=MatchCodeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4925, 12)))

MatchCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValidObjectType'), ValidObjectTypeType, scope=MatchCodeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4926, 12)))

MatchCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValidForProductHierarchy'), MatchCodeObjectSubsetLink, scope=MatchCodeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4928, 16)))

MatchCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValidForClassificationHierarchy'), MatchCodeObjectSubsetLink, scope=MatchCodeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4929, 16)))

MatchCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValidForEntityHierarchy'), MatchCodeObjectSubsetLink, scope=MatchCodeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4930, 16)))

MatchCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValidForCollection'), MatchCodeObjectSubsetLink, scope=MatchCodeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4931, 16)))

MatchCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Template'), MatchCodeTemplateType, scope=MatchCodeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4933, 12)))

def _BuildAutomaton_217 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_217
    del _BuildAutomaton_217
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4917, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4924, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4925, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4926, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4927, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4933, 12))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MatchCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4917, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MatchCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4924, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MatchCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4925, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MatchCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValidObjectType')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4926, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MatchCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValidForProductHierarchy')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4928, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MatchCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValidForClassificationHierarchy')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4929, 16))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MatchCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValidForEntityHierarchy')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4930, 16))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MatchCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValidForCollection')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4931, 16))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(MatchCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Template')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4933, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MatchCodeType._Automaton = _BuildAutomaton_217()




MatchingAlgorithmType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EmbeddedMatchCode'), EmbeddedMatchCodeType, scope=MatchingAlgorithmType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4991, 12)))

MatchingAlgorithmType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink'), SetupGroupLinkType, scope=MatchingAlgorithmType, documentation='\n                        The setup group the match code is located in.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4992, 12)))

MatchingAlgorithmType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=MatchingAlgorithmType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4999, 12)))

MatchingAlgorithmType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=MatchingAlgorithmType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5000, 12)))

MatchingAlgorithmType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MatchingAlgorithmConfiguration'), MatchingAlgorithmConfigurationType, scope=MatchingAlgorithmType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5001, 12)))

def _BuildAutomaton_218 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_218
    del _BuildAutomaton_218
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4991, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4992, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4999, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5000, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5001, 12))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MatchingAlgorithmType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EmbeddedMatchCode')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4991, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MatchingAlgorithmType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4992, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MatchingAlgorithmType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 4999, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MatchingAlgorithmType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5000, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MatchingAlgorithmType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MatchingAlgorithmConfiguration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5001, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MatchingAlgorithmType._Automaton = _BuildAutomaton_218()




MultiDataContainerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DataContainer'), DataContainerType, scope=MultiDataContainerType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5084, 12)))

MultiDataContainerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteDataContainer'), DeleteDataContainerType, scope=MultiDataContainerType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5085, 12)))

def _BuildAutomaton_219 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_219
    del _BuildAutomaton_219
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5083, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MultiDataContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DataContainer')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5084, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MultiDataContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteDataContainer')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5085, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MultiDataContainerType._Automaton = _BuildAutomaton_219()




MultiValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Value'), ValueType, scope=MultiValueType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5109, 16)))

MultiValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValueGroup'), ValueGroupType, scope=MultiValueType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5110, 16)))

def _BuildAutomaton_220 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_220
    del _BuildAutomaton_220
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5108, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MultiValueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Value')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5109, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MultiValueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValueGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5110, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MultiValueType._Automaton = _BuildAutomaton_220()




def _BuildAutomaton_221 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_221
    del _BuildAutomaton_221
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
NameType._Automaton = _BuildAutomaton_221()




NoteFrameType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NoteRecord'), NoteRecordType, scope=NoteFrameType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5167, 12)))

def _BuildAutomaton_222 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_222
    del _BuildAutomaton_222
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(NoteFrameType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NoteRecord')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5167, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
NoteFrameType._Automaton = _BuildAutomaton_222()




OutBoundIntegrationEndpointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink'), SetupGroupLinkType, scope=OutBoundIntegrationEndpointType, documentation='\n                        The setup group the endpoint is located in.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5233, 12)))

OutBoundIntegrationEndpointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=OutBoundIntegrationEndpointType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5240, 12)))

OutBoundIntegrationEndpointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=OutBoundIntegrationEndpointType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5241, 12)))

OutBoundIntegrationEndpointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScheduleSpecification'), ConfigurationType, scope=OutBoundIntegrationEndpointType, documentation='\n                        The encoded schedule specification.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5242, 12)))

OutBoundIntegrationEndpointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PreProcessorPluginConfiguration'), ConfigurationType, scope=OutBoundIntegrationEndpointType, documentation='\n                        The encoded preprocessor plugin configuration.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5249, 12)))

OutBoundIntegrationEndpointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PostProcessorPluginConfiguration'), ConfigurationType, scope=OutBoundIntegrationEndpointType, documentation='\n                        The encoded postprocessor plugin configuration.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5256, 12)))

OutBoundIntegrationEndpointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DataSourcePluginConfiguration'), ConfigurationType, scope=OutBoundIntegrationEndpointType, documentation='\n                        The encoded data source plugin configuration.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5263, 12)))

OutBoundIntegrationEndpointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeliveryMethodPluginConfiguration'), ConfigurationType, scope=OutBoundIntegrationEndpointType, documentation='\n                        The encoded delivery plugin configuration.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5270, 12)))

OutBoundIntegrationEndpointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EventQueue'), EventQueueType, scope=OutBoundIntegrationEndpointType, documentation='\n                        The behind-the-scenes event queue of the integration endpoint.\n                        This event queue is privately owned by this integration endpoint and thus not accessible from\n                        anywhere else.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5277, 12)))

OutBoundIntegrationEndpointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ProcessPluginConfiguration'), ConfigurationType, scope=OutBoundIntegrationEndpointType, documentation='\n                        The encoded process plugin configuration.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5286, 12)))

OutBoundIntegrationEndpointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ErrorReporterPluginConfiguration'), ConfigurationType, scope=OutBoundIntegrationEndpointType, documentation='\n                        The encoded error reporter plugin configuration.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5293, 12)))

OutBoundIntegrationEndpointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ContextLink'), ContextLinkType, scope=OutBoundIntegrationEndpointType, documentation='\n                        A link to a context from which data should be exported.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5300, 12)))

OutBoundIntegrationEndpointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'WorkspaceID'), StepID, scope=OutBoundIntegrationEndpointType, documentation='\n                        Specifies the ID of the workspace that provides the content selection for exports.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5307, 12)))

def _BuildAutomaton_223 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_223
    del _BuildAutomaton_223
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5233, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5240, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5241, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5242, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5249, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5256, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5263, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5270, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5277, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5286, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5293, 12))
    counters.add(cc_10)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OutBoundIntegrationEndpointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5233, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OutBoundIntegrationEndpointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5240, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OutBoundIntegrationEndpointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5241, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OutBoundIntegrationEndpointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScheduleSpecification')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5242, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OutBoundIntegrationEndpointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PreProcessorPluginConfiguration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5249, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OutBoundIntegrationEndpointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PostProcessorPluginConfiguration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5256, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OutBoundIntegrationEndpointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DataSourcePluginConfiguration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5263, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OutBoundIntegrationEndpointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeliveryMethodPluginConfiguration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5270, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OutBoundIntegrationEndpointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EventQueue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5277, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OutBoundIntegrationEndpointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ProcessPluginConfiguration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5286, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OutBoundIntegrationEndpointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ErrorReporterPluginConfiguration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5293, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OutBoundIntegrationEndpointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ContextLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5300, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(OutBoundIntegrationEndpointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'WorkspaceID')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5307, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
OutBoundIntegrationEndpointType._Automaton = _BuildAutomaton_223()




OverrideSubProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Product'), ProductType, scope=OverrideSubProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5494, 16)))

def _BuildAutomaton_224 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_224
    del _BuildAutomaton_224
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5493, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5494, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(OverrideSubProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Product')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5494, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
OverrideSubProductType._Automaton = _BuildAutomaton_224()




def _BuildAutomaton_225 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_225
    del _BuildAutomaton_225
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
ParentKeyValueType._Automaton = _BuildAutomaton_225()




PortalConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink'), SetupGroupLinkType, scope=PortalConfigurationType, documentation='\n                        The setup group that the configuration is located in.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5605, 12)))

PortalConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=PortalConfigurationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5612, 12)))

PortalConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=PortalConfigurationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5613, 12)))

PortalConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), ConfigurationType, scope=PortalConfigurationType, documentation='\n                        The configuration in encoded form.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5614, 12)))

def _BuildAutomaton_226 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_226
    del _BuildAutomaton_226
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5605, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5612, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5613, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5614, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PortalConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5605, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PortalConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5612, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PortalConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5613, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PortalConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Configuration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5614, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PortalConfigurationType._Automaton = _BuildAutomaton_226()




ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5666, 12)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ParentKeyValue'), ParentKeyValueType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5667, 12)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5668, 12)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'STEPWorkflowStateBind'), STEPWorkflowStateBindType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5669, 12)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Product'), ProductType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5671, 16)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SequenceProduct'), SequenceProductType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5672, 16)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ProductReference'), ProductReferenceType, scope=ProductType, documentation='\n                            @Deprecated, in this context an alias for ProductCrossReference that should be used instead.\n                        ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5673, 16)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedClassificationCrossReference'), DeleteSuppressedClassificationCrossReferenceType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5681, 20)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteClassificationCrossReference'), DeleteClassificationCrossReferenceType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5684, 20)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SuppressedClassificationCrossReference'), SuppressedClassificationCrossReferenceType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5686, 20)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClassificationCrossReference'), ClassificationCrossReferenceType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5688, 20)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedProductCrossReference'), DeleteSuppressedProductCrossReferenceType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5692, 20)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteProductCrossReference'), DeleteProductCrossReferenceType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5694, 20)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SuppressedProductCrossReference'), SuppressedProductCrossReferenceType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5696, 20)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ProductCrossReference'), ProductCrossReferenceType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5698, 20)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedAssetCrossReference'), DeleteSuppressedAssetCrossReferenceType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5702, 20)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteAssetCrossReference'), DeleteAssetCrossReferenceType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5704, 20)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SuppressedAssetCrossReference'), SuppressedAssetCrossReferenceType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5706, 20)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssetCrossReference'), AssetCrossReferenceType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5708, 20)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedClassificationReference'), DeleteSuppressedClassificationReferenceType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5712, 20)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteClassificationReference'), DeleteClassificationReferenceType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5714, 20)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SuppressedClassificationReference'), SuppressedClassificationReferenceType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5716, 20)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClassificationReference'), ClassificationReferenceType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5719, 20)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedEntityCrossReference'), DeleteSuppressedEntityCrossReferenceType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5723, 20)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteEntityCrossReference'), DeleteEntityCrossReferenceType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5725, 20)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SuppressedEntityCrossReference'), SuppressedEntityCrossReferenceType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5727, 20)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EntityCrossReference'), EntityCrossReferenceType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5729, 20)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteAttributeLink'), DeleteAttributeLinkType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5733, 20)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink'), AttributeLinkType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5735, 20)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DataContainerTypeLink'), DataContainerTypeLinkType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5738, 20)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteDataContainerTypeLink'), DeleteDataContainerTypeLinkType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5740, 20)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DataContainers'), DataContainersType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5743, 16)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CurrentTasks'), CurrentTasksType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5744, 16)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Terms'), TermsType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5745, 16)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OverrideSubProduct'), OverrideSubProductType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5746, 16)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PackagingReference'), PackagingReferenceType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5747, 16)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Tables'), TablesType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5748, 16)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Values'), ValuesType, scope=ProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5749, 16)))

def _BuildAutomaton_227 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_227
    del _BuildAutomaton_227
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5666, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5667, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5668, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5669, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5670, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5681, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5684, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5686, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5688, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5692, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5694, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5696, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5698, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5702, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5704, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5706, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5708, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5712, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5714, 20))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5716, 20))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5719, 20))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5723, 20))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5725, 20))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5727, 20))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5729, 20))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5733, 20))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5735, 20))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5738, 20))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5740, 20))
    counters.add(cc_28)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5666, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ParentKeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5667, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5668, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'STEPWorkflowStateBind')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5669, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Product')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5671, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SequenceProduct')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5672, 16))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ProductReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5673, 16))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedClassificationCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5681, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteClassificationCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5684, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SuppressedClassificationCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5686, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClassificationCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5688, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedProductCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5692, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteProductCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5694, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SuppressedProductCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5696, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ProductCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5698, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedAssetCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5702, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteAssetCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5704, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SuppressedAssetCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5706, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssetCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5708, 20))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedClassificationReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5712, 20))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteClassificationReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5714, 20))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SuppressedClassificationReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5716, 20))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClassificationReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5719, 20))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteSuppressedEntityCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5723, 20))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteEntityCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5725, 20))
    st_24 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SuppressedEntityCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5727, 20))
    st_25 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EntityCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5729, 20))
    st_26 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteAttributeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5733, 20))
    st_27 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_26, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5735, 20))
    st_28 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_27, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DataContainerTypeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5738, 20))
    st_29 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_28, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteDataContainerTypeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5740, 20))
    st_30 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DataContainers')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5743, 16))
    st_31 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_31)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CurrentTasks')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5744, 16))
    st_32 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_32)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Terms')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5745, 16))
    st_33 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_33)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OverrideSubProduct')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5746, 16))
    st_34 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_34)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PackagingReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5747, 16))
    st_35 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_35)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Tables')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5748, 16))
    st_36 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_36)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Values')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5749, 16))
    st_37 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_37)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_15, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_16, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_17, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_18, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_19, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_20, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_21, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_22, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_23, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_24, False) ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_25, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_25, False) ]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_26, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_26, False) ]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_27, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_27, False) ]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_28, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_28, False) ]))
    st_30._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_31._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_32._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_33._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_34._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_35._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_36._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_37._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ProductType._Automaton = _BuildAutomaton_227()




ProductBasketLinkType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=ProductBasketLinkType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5808, 12)))

def _BuildAutomaton_228 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_228
    del _BuildAutomaton_228
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5807, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProductBasketLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5808, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ProductBasketLinkType._Automaton = _BuildAutomaton_228()




ProductCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=ProductCrossReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5819, 12)))

ProductCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=ProductCrossReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5821, 16)))

ProductCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Product'), ProductType, scope=ProductCrossReferenceType, documentation='\n                            Embedded reference target. Has no effect during import.\n                        ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5822, 16)))

def _BuildAutomaton_229 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_229
    del _BuildAutomaton_229
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5819, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5820, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5821, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5822, 16))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProductCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5819, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ProductCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5821, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ProductCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Product')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5822, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ProductCrossReferenceType._Automaton = _BuildAutomaton_229()




ProductCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=ProductCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5897, 12)))

ProductCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=ProductCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5898, 12)))

ProductCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink'), AttributeLinkType, scope=ProductCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5899, 12)))

ProductCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink'), DimensionLinkType, scope=ProductCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5900, 12)))

ProductCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), AttributeGroupLinkType, scope=ProductCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5901, 12)))

ProductCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink'), UserTypeLinkType, scope=ProductCrossReferenceTypeType, documentation='\n                        Link to a valid source type. Notice that this source can be a DataContainerType.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5902, 12)))

ProductCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TargetUserTypeLink'), TargetUserTypeLinkType, scope=ProductCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5909, 12)))

def _BuildAutomaton_230 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_230
    del _BuildAutomaton_230
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5897, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5898, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5899, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5900, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5901, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5902, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5909, 12))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProductCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5897, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ProductCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5898, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ProductCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5899, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ProductCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5900, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ProductCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5901, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ProductCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5902, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ProductCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TargetUserTypeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5909, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ProductCrossReferenceTypeType._Automaton = _BuildAutomaton_230()




ProductElementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=ProductElementType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5968, 12)))

ProductElementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TemplateLayout'), TemplateLayoutType, scope=ProductElementType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5969, 12)))

ProductElementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PickupLayout'), PickupLayoutType, scope=ProductElementType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5970, 12)))

def _BuildAutomaton_231 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_231
    del _BuildAutomaton_231
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5967, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProductElementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5968, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProductElementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TemplateLayout')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5969, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProductElementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PickupLayout')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5970, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ProductElementType._Automaton = _BuildAutomaton_231()




ProductReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=ProductReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5991, 12)))

def _BuildAutomaton_232 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_232
    del _BuildAutomaton_232
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5991, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProductReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 5991, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ProductReferenceType._Automaton = _BuildAutomaton_232()




ProductsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Product'), ProductType, scope=ProductsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6005, 12)))

def _BuildAutomaton_233 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_233
    del _BuildAutomaton_233
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6005, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProductsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Product')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6005, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ProductsType._Automaton = _BuildAutomaton_233()




PublicationGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=PublicationGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6040, 12)))

PublicationGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=PublicationGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6041, 12)))

PublicationGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PublicationGroup'), PublicationGroupType, scope=PublicationGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6042, 12)))

PublicationGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Publication'), PublicationType, scope=PublicationGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6043, 12)))

def _BuildAutomaton_234 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_234
    del _BuildAutomaton_234
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6040, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6041, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6042, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6043, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PublicationGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6040, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PublicationGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6041, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PublicationGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PublicationGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6042, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PublicationGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Publication')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6043, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PublicationGroupType._Automaton = _BuildAutomaton_234()




PublicationSectionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=PublicationSectionType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6064, 12)))

PublicationSectionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=PublicationSectionType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6065, 12)))

PublicationSectionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PaginationRules'), ConfigurationType, scope=PublicationSectionType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6066, 12)))

PublicationSectionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PublicationSection'), PublicationSectionType, scope=PublicationSectionType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6067, 12)))

PublicationSectionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Basket'), BasketType, scope=PublicationSectionType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6068, 12)))

PublicationSectionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AutoPageProductLink'), AutoPageProductLinkType, scope=PublicationSectionType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6070, 16)))

PublicationSectionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AutoPageAssetLink'), AutoPageAssetLinkType, scope=PublicationSectionType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6072, 16)))

PublicationSectionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AutoPageClassificationLink'), AutoPageClassificationLinkType, scope=PublicationSectionType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6073, 16)))

PublicationSectionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PlannedPage'), PlannedPageType, scope=PublicationSectionType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6076, 12)))

def _BuildAutomaton_235 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_235
    del _BuildAutomaton_235
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6064, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6065, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6066, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6067, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6068, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6069, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6070, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6072, 16))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6073, 16))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6076, 12))
    counters.add(cc_9)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PublicationSectionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6064, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PublicationSectionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6065, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PublicationSectionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PaginationRules')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6066, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PublicationSectionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PublicationSection')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6067, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(PublicationSectionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Basket')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6068, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(PublicationSectionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AutoPageProductLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6070, 16))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(PublicationSectionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AutoPageAssetLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6072, 16))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(PublicationSectionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AutoPageClassificationLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6073, 16))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(PublicationSectionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PlannedPage')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6076, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_6, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_7, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_8, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PublicationSectionType._Automaton = _BuildAutomaton_235()




PublicationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=PublicationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6085, 12)))

PublicationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=PublicationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6086, 12)))

PublicationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Version'), VersionType, scope=PublicationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6087, 12)))

PublicationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Basket'), BasketType, scope=PublicationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6088, 12)))

PublicationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PaginationRules'), ConfigurationType, scope=PublicationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6089, 12)))

PublicationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PageTemplateLink'), PageTemplateLinkType, scope=PublicationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6090, 12)))

PublicationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ProductTemplateLink'), ProductTemplateLinkType, scope=PublicationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6091, 12)))

PublicationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PublicationSection'), PublicationSectionType, scope=PublicationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6092, 12)))

PublicationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SuppressedEntityCrossReference'), SuppressedEntityCrossReferenceType, scope=PublicationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6093, 12)))

PublicationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EntityCrossReference'), EntityCrossReferenceType, scope=PublicationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6095, 12)))

def _BuildAutomaton_236 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_236
    del _BuildAutomaton_236
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6085, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6086, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6087, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6088, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6089, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6090, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6091, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6092, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6093, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6095, 12))
    counters.add(cc_9)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PublicationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6085, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PublicationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6086, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PublicationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Version')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6087, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PublicationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Basket')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6088, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(PublicationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PaginationRules')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6089, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(PublicationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PageTemplateLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6090, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(PublicationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ProductTemplateLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6091, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(PublicationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PublicationSection')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6092, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(PublicationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SuppressedEntityCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6093, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(PublicationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EntityCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6095, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PublicationType._Automaton = _BuildAutomaton_236()




QualifierType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DimensionPointLink'), DimensionPointLinkType, scope=QualifierType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6130, 12)))

QualifierType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Context'), ContextType, scope=QualifierType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6131, 12)))

def _BuildAutomaton_237 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_237
    del _BuildAutomaton_237
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6130, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6131, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(QualifierType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DimensionPointLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6130, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(QualifierType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Context')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6131, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
QualifierType._Automaton = _BuildAutomaton_237()




RowColumnTableGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=RowColumnTableGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6701, 12)))

RowColumnTableGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RowColumnTableGroup'), RowColumnTableGroupType, scope=RowColumnTableGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6702, 12)))

def _BuildAutomaton_238 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_238
    del _BuildAutomaton_238
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6701, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6702, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(RowColumnTableGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6701, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(RowColumnTableGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RowColumnTableGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6702, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
RowColumnTableGroupType._Automaton = _BuildAutomaton_238()




RowType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Origin'), OriginType, scope=RowType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6717, 12)))

RowType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ProductOrigin'), ProductOriginType, scope=RowType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6718, 12)))

RowType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClassificationOrigin'), ClassificationOriginType, scope=RowType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6719, 12)))

RowType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EntityOrigin'), EntityOriginType, scope=RowType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6721, 12)))

RowType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssetOrigin'), AssetOriginType, scope=RowType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6722, 12)))

RowType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeOrigin'), AttributeOriginType, scope=RowType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6723, 12)))

RowType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cell'), CellType, scope=RowType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6724, 12)))

def _BuildAutomaton_239 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_239
    del _BuildAutomaton_239
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6717, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6718, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6719, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6721, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6722, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6723, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6724, 12))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(RowType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Origin')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6717, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(RowType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ProductOrigin')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6718, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(RowType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClassificationOrigin')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6719, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(RowType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EntityOrigin')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6721, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(RowType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssetOrigin')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6722, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(RowType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeOrigin')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6723, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(RowType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cell')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6724, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
RowType._Automaton = _BuildAutomaton_239()




RowTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=RowTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6741, 12)))

RowTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TableTypeLink'), TableTypeLinkType, scope=RowTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6742, 12)))

RowTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PublicationTypeValidity'), PublicationTypeValidityType, scope=RowTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6743, 12)))

def _BuildAutomaton_240 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_240
    del _BuildAutomaton_240
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6741, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6742, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6743, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(RowTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6741, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(RowTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TableTypeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6742, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(RowTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PublicationTypeValidity')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6743, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
RowTypeType._Automaton = _BuildAutomaton_240()




SequenceProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=SequenceProductType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6786, 12)))

def _BuildAutomaton_241 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_241
    del _BuildAutomaton_241
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6786, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SequenceProductType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6786, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SequenceProductType._Automaton = _BuildAutomaton_241()




SetupEntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink'), SetupGroupLinkType, scope=SetupEntityType, documentation='\n                        The setup group the setup entity is located in.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6808, 12)))

SetupEntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=SetupEntityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6815, 12)))

SetupEntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=SetupEntityType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6816, 12)))

SetupEntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), ConfigurationType, scope=SetupEntityType, documentation='\n                        The configuration in encoded form.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6817, 12)))

def _BuildAutomaton_242 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_242
    del _BuildAutomaton_242
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6808, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6815, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6816, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6817, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SetupEntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6808, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SetupEntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6815, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SetupEntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6816, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SetupEntityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Configuration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6817, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SetupEntityType._Automaton = _BuildAutomaton_242()




SetupGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=SetupGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6868, 12)))

SetupGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=SetupGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6869, 12)))

SetupGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SetupGroup'), SetupGroupType, scope=SetupGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6870, 12)))

def _BuildAutomaton_243 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_243
    del _BuildAutomaton_243
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6868, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6869, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6870, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SetupGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6868, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SetupGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6869, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SetupGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SetupGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6870, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SetupGroupType._Automaton = _BuildAutomaton_243()




SingleDataContainerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Values'), ValuesType, scope=SingleDataContainerType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6899, 12)))

SingleDataContainerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssetCrossReference'), AssetCrossReferenceType, scope=SingleDataContainerType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6901, 16)))

SingleDataContainerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteAssetCrossReference'), DeleteAssetCrossReferenceType, scope=SingleDataContainerType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6902, 16)))

SingleDataContainerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClassificationCrossReference'), ClassificationCrossReferenceType, scope=SingleDataContainerType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6905, 16)))

SingleDataContainerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteClassificationReference'), DeleteClassificationReferenceType, scope=SingleDataContainerType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6906, 16)))

SingleDataContainerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EntityCrossReference'), EntityCrossReferenceType, scope=SingleDataContainerType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6909, 16)))

SingleDataContainerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteEntityCrossReference'), DeleteEntityCrossReferenceType, scope=SingleDataContainerType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6910, 16)))

SingleDataContainerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ProductCrossReference'), ProductCrossReferenceType, scope=SingleDataContainerType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6913, 16)))

SingleDataContainerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeleteProductCrossReference'), DeleteProductCrossReferenceType, scope=SingleDataContainerType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6914, 16)))

def _BuildAutomaton_244 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_244
    del _BuildAutomaton_244
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6898, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6899, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6901, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6902, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6905, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6906, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6909, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6910, 16))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6913, 16))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6914, 16))
    counters.add(cc_9)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SingleDataContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Values')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SingleDataContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssetCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6901, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SingleDataContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteAssetCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6902, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(SingleDataContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClassificationCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6905, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(SingleDataContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteClassificationReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6906, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(SingleDataContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EntityCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6909, 16))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(SingleDataContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteEntityCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6910, 16))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(SingleDataContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ProductCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6913, 16))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(SingleDataContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeleteProductCrossReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6914, 16))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_7, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SingleDataContainerType._Automaton = _BuildAutomaton_244()




SpecialCharacterTagType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Formatting'), FormattingType, scope=SpecialCharacterTagType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6978, 12)))

def _BuildAutomaton_245 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_245
    del _BuildAutomaton_245
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6978, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SpecialCharacterTagType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Formatting')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 6978, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SpecialCharacterTagType._Automaton = _BuildAutomaton_245()




STEPWorkflowType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BusinessRuleLink'), BusinessRuleLinkType, scope=STEPWorkflowType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7072, 12)))

STEPWorkflowType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink'), SetupGroupLinkType, scope=STEPWorkflowType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7073, 12)))

STEPWorkflowType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=STEPWorkflowType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7074, 12)))

STEPWorkflowType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=STEPWorkflowType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7075, 12)))

STEPWorkflowType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValidUserTypeLink'), UserTypeLinkType, scope=STEPWorkflowType, documentation='\n                        A list of object types valid in the context of the STEP Workflow.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7076, 12)))

STEPWorkflowType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StartCondition'), StartConditionType, scope=STEPWorkflowType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7083, 12)))

STEPWorkflowType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), ConfigurationType, scope=STEPWorkflowType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7084, 12)))

STEPWorkflowType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LocalBusinessRule'), LocalBusinessRuleType, scope=STEPWorkflowType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7085, 12)))

def _BuildAutomaton_246 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_246
    del _BuildAutomaton_246
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7072, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7073, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7074, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7075, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7076, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7083, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7084, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7085, 12))
    counters.add(cc_7)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(STEPWorkflowType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BusinessRuleLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7072, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(STEPWorkflowType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7073, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(STEPWorkflowType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7074, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(STEPWorkflowType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7075, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(STEPWorkflowType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValidUserTypeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7076, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(STEPWorkflowType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StartCondition')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7083, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(STEPWorkflowType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Configuration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7084, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(STEPWorkflowType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LocalBusinessRule')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7085, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
STEPWorkflowType._Automaton = _BuildAutomaton_246()




STEPWorkflowProfileType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink'), SetupGroupLinkType, scope=STEPWorkflowProfileType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7115, 12)))

STEPWorkflowProfileType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=STEPWorkflowProfileType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7116, 12)))

STEPWorkflowProfileType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), ConfigurationType, scope=STEPWorkflowProfileType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7117, 12)))

def _BuildAutomaton_247 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_247
    del _BuildAutomaton_247
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7115, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7116, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7117, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(STEPWorkflowProfileType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SetupGroupLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7115, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(STEPWorkflowProfileType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7116, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(STEPWorkflowProfileType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Configuration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7117, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
STEPWorkflowProfileType._Automaton = _BuildAutomaton_247()




StyleTagGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=StyleTagGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7137, 12)))

StyleTagGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=StyleTagGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7138, 12)))

StyleTagGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), AttributeGroupLinkType, scope=StyleTagGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7139, 12)))

StyleTagGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StyleTagGroup'), StyleTagGroupType, scope=StyleTagGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7140, 12)))

def _BuildAutomaton_248 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_248
    del _BuildAutomaton_248
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7137, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7138, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7139, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7140, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(StyleTagGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7137, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(StyleTagGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7138, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(StyleTagGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7139, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(StyleTagGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StyleTagGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7140, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
StyleTagGroupType._Automaton = _BuildAutomaton_248()




StyleTagType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), ConfigurationType, scope=StyleTagType, documentation='\n                        How tag content should be styled in STEP GUI.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7168, 12)))

StyleTagType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TagFormat'), TagFormatType, scope=StyleTagType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7175, 12)))

def _BuildAutomaton_249 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_249
    del _BuildAutomaton_249
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7168, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7175, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(StyleTagType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Configuration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7168, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(StyleTagType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TagFormat')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7175, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
StyleTagType._Automaton = _BuildAutomaton_249()




SuppressedAssetCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=SuppressedAssetCrossReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7207, 12)))

def _BuildAutomaton_250 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_250
    del _BuildAutomaton_250
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7207, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SuppressedAssetCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7207, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SuppressedAssetCrossReferenceType._Automaton = _BuildAutomaton_250()




SuppressedClassificationCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=SuppressedClassificationCrossReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7236, 12)))

def _BuildAutomaton_251 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_251
    del _BuildAutomaton_251
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7236, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SuppressedClassificationCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7236, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SuppressedClassificationCrossReferenceType._Automaton = _BuildAutomaton_251()




SuppressedClassificationReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=SuppressedClassificationReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7266, 12)))

def _BuildAutomaton_252 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_252
    del _BuildAutomaton_252
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7266, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SuppressedClassificationReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7266, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SuppressedClassificationReferenceType._Automaton = _BuildAutomaton_252()




SuppressedProductCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=SuppressedProductCrossReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7296, 12)))

def _BuildAutomaton_253 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_253
    del _BuildAutomaton_253
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7296, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SuppressedProductCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7296, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SuppressedProductCrossReferenceType._Automaton = _BuildAutomaton_253()




SuppressedEntityCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=SuppressedEntityCrossReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7325, 12)))

def _BuildAutomaton_254 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_254
    del _BuildAutomaton_254
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7325, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SuppressedEntityCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7325, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SuppressedEntityCrossReferenceType._Automaton = _BuildAutomaton_254()




def _BuildAutomaton_255 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_255
    del _BuildAutomaton_255
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
SystemSetupValueType._Automaton = _BuildAutomaton_255()




TableDefinitionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TableXML'), TableConfigurationType, scope=TableDefinitionType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7480, 12)))

TableDefinitionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TableFreeTextXML'), TableConfigurationType, scope=TableDefinitionType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7481, 12)))

def _BuildAutomaton_256 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_256
    del _BuildAutomaton_256
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7481, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TableDefinitionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TableXML')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7480, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TableDefinitionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TableFreeTextXML')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7481, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TableDefinitionType._Automaton = _BuildAutomaton_256()




TableTextsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Text'), TableTextType, scope=TableTextsType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7515, 12)))

def _BuildAutomaton_257 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_257
    del _BuildAutomaton_257
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7514, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TableTextsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Text')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7515, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
TableTextsType._Automaton = _BuildAutomaton_257()




TableType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Column'), ColumnType, scope=TableType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7534, 12)))

TableType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Row'), RowType, scope=TableType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7535, 12)))

TableType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Texts'), TableTextsType, scope=TableType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7536, 12)))

def _BuildAutomaton_258 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_258
    del _BuildAutomaton_258
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7534, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7535, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7536, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TableType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Column')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7534, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TableType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Row')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7535, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TableType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Texts')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7536, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
TableType._Automaton = _BuildAutomaton_258()




TableTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=TableTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7552, 12)))

TableTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink'), UserTypeLinkType, scope=TableTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7553, 12)))

TableTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ColumnType'), ColumnTypeType, scope=TableTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7554, 12)))

TableTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RowType'), RowTypeType, scope=TableTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7555, 12)))

TableTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink'), DimensionLinkType, scope=TableTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7556, 12)))

TableTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TableTransformation'), TableConfigurationType, scope=TableTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7557, 12)))

TableTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TablePaginationPlugin'), TableConfigurationType, scope=TableTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7558, 12)))

def _BuildAutomaton_259 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_259
    del _BuildAutomaton_259
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7552, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7553, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7554, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7555, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7556, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7557, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7558, 12))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TableTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7552, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TableTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7553, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TableTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ColumnType')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7554, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TableTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RowType')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7555, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(TableTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7556, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TableTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TableTransformation')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7557, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(TableTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TablePaginationPlugin')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7558, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
TableTypeType._Automaton = _BuildAutomaton_259()




def _BuildAutomaton_260 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_260
    del _BuildAutomaton_260
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
TermType._Automaton = _BuildAutomaton_260()




TransformationLookupTableConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=TransformationLookupTableConfigurationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7816, 12)))

TransformationLookupTableConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=TransformationLookupTableConfigurationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7817, 12)))

TransformationLookupTableConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClassificationReference'), ClassificationReferenceType, scope=TransformationLookupTableConfigurationType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7818, 12)))

TransformationLookupTableConfigurationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), ConfigurationType, scope=TransformationLookupTableConfigurationType, documentation='\n                        The configruation in encoded form.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7820, 12)))

def _BuildAutomaton_261 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_261
    del _BuildAutomaton_261
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7816, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7817, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7818, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7820, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TransformationLookupTableConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7816, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TransformationLookupTableConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7817, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TransformationLookupTableConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClassificationReference')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7818, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TransformationLookupTableConfigurationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Configuration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7820, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
TransformationLookupTableConfigurationType._Automaton = _BuildAutomaton_261()




UnitFamilyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=UnitFamilyType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7871, 12)))

UnitFamilyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=UnitFamilyType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7872, 12)))

UnitFamilyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Unit'), UnitType, scope=UnitFamilyType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7873, 12)))

def _BuildAutomaton_262 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_262
    del _BuildAutomaton_262
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7871, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7872, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7873, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(UnitFamilyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7871, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(UnitFamilyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7872, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(UnitFamilyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Unit')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7873, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
UnitFamilyType._Automaton = _BuildAutomaton_262()




def _BuildAutomaton_263 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_263
    del _BuildAutomaton_263
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
UnitTemplateType._Automaton = _BuildAutomaton_263()




UnitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=UnitType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7936, 12)))

UnitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UnitConversion'), UnitConversionType, scope=UnitType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7937, 12)))

UnitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=UnitType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7938, 12)))

UnitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GDSNReceiverUnit'), GDSNReceiverUnitType, scope=UnitType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7939, 12)))

def _BuildAutomaton_264 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_264
    del _BuildAutomaton_264
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7936, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7937, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7938, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7939, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(UnitType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7936, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(UnitType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UnitConversion')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7937, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(UnitType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7938, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(UnitType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GDSNReceiverUnit')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7939, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
UnitType._Automaton = _BuildAutomaton_264()




UserType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=UserType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7968, 12)))

UserType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=UserType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7969, 12)))

UserType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UserGroupLink'), UserGroupLinkType, scope=UserType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7970, 12)))

UserType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GUISetup'), GUISetupType, scope=UserType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7971, 12)))

UserType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GUITop'), GUITopType, scope=UserType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7972, 12)))

UserType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SystemSetup'), SystemSetupType, scope=UserType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7973, 12)))

UserType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink'), DimensionLinkType, scope=UserType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7974, 12)))

def _BuildAutomaton_265 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_265
    del _BuildAutomaton_265
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7968, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7969, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7970, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7971, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7972, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7973, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7974, 12))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(UserType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7968, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(UserType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7969, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(UserType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UserGroupLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7970, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(UserType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GUISetup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7971, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(UserType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GUITop')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7972, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(UserType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SystemSetup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7973, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(UserType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7974, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
UserType._Automaton = _BuildAutomaton_265()




UserGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=UserGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7997, 12)))

UserGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UserGroup'), UserGroupType, scope=UserGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7998, 12)))

UserGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=UserGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7999, 12)))

UserGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PrivilegeRule'), PrivilegeRuleType, scope=UserGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8000, 12)))

UserGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GUISetup'), GUISetupType, scope=UserGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8001, 12)))

UserGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GUITop'), GUITopType, scope=UserGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8002, 12)))

def _BuildAutomaton_266 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_266
    del _BuildAutomaton_266
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7997, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7998, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7999, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8000, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8001, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8002, 12))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(UserGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7997, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(UserGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UserGroup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7998, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(UserGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 7999, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(UserGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PrivilegeRule')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8000, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(UserGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GUISetup')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8001, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(UserGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GUITop')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8002, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
UserGroupType._Automaton = _BuildAutomaton_266()




UserTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=UserTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8068, 12)))

UserTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Icon'), pyxb.binding.datatypes.base64Binary, scope=UserTypeType, documentation='\n                        Base64 encoded custom icon.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8069, 12)))

UserTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VisibleTermFields'), VisibleTermFieldsType, scope=UserTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8076, 12)))

UserTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=UserTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8077, 12)))

UserTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink'), DimensionLinkType, scope=UserTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8078, 12)))

UserTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink'), UserTypeLinkType, scope=UserTypeType, documentation='\n                        Link to a parent object type.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8079, 12)))

UserTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink'), AttributeLinkType, scope=UserTypeType, documentation='\n                        Represents an attribute valid for this object type. Export only. Has no effect during import.\n                        Use Attribute/UserTypeLink instead to maintain the attribute validity with imports.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8086, 12)))

UserTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Validation'), ValidationType, scope=UserTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8094, 12)))

UserTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MIMEType'), MIMETypeType, scope=UserTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8095, 12)))

def _BuildAutomaton_267 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_267
    del _BuildAutomaton_267
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8068, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8069, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8076, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8077, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8078, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8079, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8086, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8094, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8095, 12))
    counters.add(cc_8)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(UserTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8068, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(UserTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Icon')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8069, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(UserTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VisibleTermFields')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8076, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(UserTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8077, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(UserTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8078, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(UserTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8079, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(UserTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8086, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(UserTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Validation')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8094, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(UserTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MIMEType')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8095, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
UserTypeType._Automaton = _BuildAutomaton_267()




def _BuildAutomaton_268 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_268
    del _BuildAutomaton_268
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
ValueType._Automaton = _BuildAutomaton_268()




ValueGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Value'), ValueType, scope=ValueGroupType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8334, 12)))

def _BuildAutomaton_269 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_269
    del _BuildAutomaton_269
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8334, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ValueGroupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Value')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8334, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ValueGroupType._Automaton = _BuildAutomaton_269()




def _BuildAutomaton_270 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_270
    del _BuildAutomaton_270
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
ValueTemplateType._Automaton = _BuildAutomaton_270()




VersionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=VersionType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8373, 12)))

VersionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=VersionType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8374, 12)))

VersionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TermsListLink'), TermsListLinkType, scope=VersionType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8375, 12)))

VersionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LayerMapping'), LayerMappingType, scope=VersionType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8376, 12)))

def _BuildAutomaton_271 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_271
    del _BuildAutomaton_271
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8373, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8374, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8375, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8376, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(VersionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8373, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(VersionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8374, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(VersionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TermsListLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8375, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(VersionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LayerMapping')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8376, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
VersionType._Automaton = _BuildAutomaton_271()




WorkspaceCrossReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=WorkspaceCrossReferenceType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8410, 12)))

def _BuildAutomaton_272 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_272
    del _BuildAutomaton_272
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8410, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(WorkspaceCrossReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8410, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
WorkspaceCrossReferenceType._Automaton = _BuildAutomaton_272()




WorkspaceCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=WorkspaceCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8441, 12)))

WorkspaceCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=WorkspaceCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8442, 12)))

WorkspaceCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink'), AttributeLinkType, scope=WorkspaceCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8443, 12)))

WorkspaceCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink'), DimensionLinkType, scope=WorkspaceCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8444, 12)))

WorkspaceCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink'), AttributeGroupLinkType, scope=WorkspaceCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8445, 12)))

WorkspaceCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink'), UserTypeLinkType, scope=WorkspaceCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8446, 12)))

WorkspaceCrossReferenceTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TargetUserTypeLink'), TargetUserTypeLinkType, scope=WorkspaceCrossReferenceTypeType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8447, 12)))

def _BuildAutomaton_273 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_273
    del _BuildAutomaton_273
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8441, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8442, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8443, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8444, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8445, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8446, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8447, 12))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(WorkspaceCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8441, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(WorkspaceCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8442, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(WorkspaceCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8443, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(WorkspaceCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DimensionLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8444, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(WorkspaceCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AttributeGroupLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8445, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(WorkspaceCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UserTypeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8446, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(WorkspaceCrossReferenceTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TargetUserTypeLink')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8447, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
WorkspaceCrossReferenceTypeType._Automaton = _BuildAutomaton_273()




ScheduledProcessType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), NameType, scope=ScheduledProcessType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8484, 12)))

ScheduledProcessType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MetaData'), MetaDataType, scope=ScheduledProcessType, location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8485, 12)))

ScheduledProcessType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Configuration'), ConfigurationType, scope=ScheduledProcessType, documentation='\n                        The configuration in encoded form.\n                    ', location=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8486, 12)))

def _BuildAutomaton_274 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_274
    del _BuildAutomaton_274
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8484, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8485, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8486, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ScheduledProcessType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8484, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ScheduledProcessType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MetaData')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8485, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ScheduledProcessType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Configuration')), pyxb.utils.utility.Location('/cygdrive/c/Users/eddo8/git/gitlab.stibo.dk/dave/Stibo/StepXML/PIM.xsd', 8486, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ScheduledProcessType._Automaton = _BuildAutomaton_274()

